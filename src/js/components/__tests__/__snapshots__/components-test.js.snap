// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Components loads 1`] = `
Object {
  "Accordion": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Accordion&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/accordion&module=%2Fsrc%2FAccordion.js",
      },
    ],
    "description": "An accordion containing collapsible panels.",
    "intrinsicElement": "div",
    "name": "Accordion",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "defaultValue": 0,
        "description": "Active panel index. If specified, Accordion will be a controlled 
component. This means that future panel changes will not work unless you
subscribe to onActive function and update activeIndex accordingly.",
        "format": "number
[number]",
        "name": "activeIndex",
      },
      Object {
        "defaultValue": true,
        "description": "Transition content in & out with a slide down animation.",
        "format": "boolean",
        "name": "animate",
      },
      Object {
        "description": "Array of AccordionPanels.",
        "format": "node",
        "name": "children",
      },
      Object {
        "description": "Function that will be called when the active index changes.
It will always send an array with currently active panel indexes.",
        "format": "function",
        "name": "onActive",
      },
      Object {
        "defaultValue": false,
        "description": "Allow multiple panels to be opened at once.",
        "format": "boolean",
        "name": "multiple",
      },
      Object {
        "defaultValue": Object {
          "tabContents": "Tab Contents",
        },
        "description": "Custom messages for Tabs. Used for accessibility by screen readers.",
        "format": "{
  tabContents: string
}",
        "name": "messages",
      },
    ],
    "usage": "import { Accordion, AccordionPanel } from 'grommet';
<Accordion>
  <AccordionPanel label='Panel 1'>...</AccordionPanel>
  <AccordionPanel label='Panel 2'>...</AccordionPanel>
</Accordion>",
  },
  "AccordionPanel": Object {
    "description": "An Accordion panel.",
    "intrinsicElement": "div",
    "name": "AccordionPanel",
    "properties": Array [
      Object {
        "description": "The panel label.",
        "format": "string
node",
        "name": "label",
      },
      Object {
        "description": "If specified, the entire panel header will be managed by the caller.",
        "format": "node",
        "name": "header",
      },
    ],
  },
  "Anchor": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Anchor&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/anchor&module=%2Fsrc%2FAnchor.js",
      },
    ],
    "description": "A text link.",
    "details": "We have a separate component from the browser
base so we can style it. You can either set the icon and/or label properties
or just use children.",
    "intrinsicElement": "a",
    "name": "Anchor",
    "properties": Array [
      Object {
        "description": "Custom title to be used by screen readers.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Color when hovering over places while selecting.",
        "format": "string
{
  dark: string,
  light: string
}",
        "name": "color",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the anchor is disabled.",
        "format": "boolean",
        "name": "disabled",
      },
      Object {
        "description": "Hyperlink reference to place in the anchor.",
        "format": "string",
        "name": "href",
      },
      Object {
        "description": "Icon element to place in the anchor.",
        "format": "element",
        "name": "icon",
      },
      Object {
        "description": "Label text to place in the anchor.",
        "format": "node",
        "name": "label",
      },
      Object {
        "description": "Click handler. It can be used, for example,
        to add analytics and track who clicked in the anchor.",
        "format": "function",
        "name": "onClick",
      },
      Object {
        "defaultValue": false,
        "description": "Whether an icon and label should be reversed so that the
        icon is at the end of the anchor.",
        "format": "boolean",
        "name": "reverse",
      },
      Object {
        "description": "The font size is typically driven by the components containing
this component. But, it can be adjusted directly via this size property,
typically when it is not contained in a 'Heading', 'Paragraph', or 'Text'.",
        "format": "xsmall
small
medium
large
xlarge
xxlarge
string",
        "name": "size",
      },
      Object {
        "description": "The DOM tag or react component to use for the element.",
        "format": "string
function",
        "name": "as",
      },
    ],
    "usage": "import { Anchor } from 'grommet';
<Anchor href={location} label='Label' />",
  },
  "Avatar": [Function],
  "Box": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Box&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/box&module=%2Fsrc%2FBox.js",
      },
    ],
    "description": "A container that lays out its contents in one direction. Box
      provides CSS flexbox capabilities for layout, as well as general
      styling of things like background color, border, and animation.",
    "intrinsicElement": "div",
    "name": "Box",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "How to align the contents along the cross axis.",
        "format": "start
center
end
baseline
stretch",
        "name": "align",
      },
      Object {
        "defaultValue": "stretch",
        "description": "How to align the contents when there is extra space in
        the cross axis.",
        "format": "start
center
end
between
around
stretch",
        "name": "alignContent",
      },
      Object {
        "description": "Animation effect(s) to use. 'duration' and 'delay' should
        be in milliseconds. 'jiggle' and 'pulse' types are intended for
        small elements, like icons.",
        "format": "fadeIn
fadeOut
jiggle
pulse
rotateLeft
rotateRight
slideUp
slideDown
slideLeft
slideRight
zoomIn
zoomOut
{
  type: 
    fadeIn
    fadeOut
    jiggle
    pulse
    rotateLeft
    rotateRight
    slideUp
    slideDown
    slideLeft
    slideRight
    zoomIn
    zoomOut,
  delay: number,
  duration: number,
  size: 
    xsmall
    small
    medium
    large
    xlarge
}
[
  fadeIn
  fadeOut
  jiggle
  pulse
  rotateLeft
  rotateRight
  slideUp
  slideDown
  slideLeft
  slideRight
  zoomIn
  zoomOut
  {
    type: 
      fadeIn
      fadeOut
      jiggle
      pulse
      rotateLeft
      rotateRight
      slideUp
      slideDown
      slideLeft
      slideRight
      zoomIn
      zoomOut,
    delay: number,
    duration: number,
    size: 
      xsmall
      small
      medium
      large
      xlarge
  }
]",
        "name": "animation",
      },
      Object {
        "description": "Either a color 
identifier to use for the background color. For example: 'neutral-1'. Or, a 
'url()' for an image. Dark is not needed if color is provided.",
        "format": "string
{
  color: 
    string
    {
      dark: string,
      light: string
    },
  dark: 
    boolean
    string,
  image: string,
  position: string,
  opacity: 
    string
    boolean
    number
    weak
    medium
    strong,
  repeat: 
    no-repeat
    repeat
    string,
  size: 
    cover
    contain
    string,
  light: string
}",
        "name": "background",
      },
      Object {
        "description": "A fixed or relative size along its container's main axis.",
        "format": "xxsmall
xsmall
small
medium
large
xlarge
xxlarge
full
1/2
1/3
2/3
1/4
2/4
3/4
auto
string",
        "name": "basis",
      },
      Object {
        "description": "Include a border. 'between' will place a border in the gap between
      child elements. You must have a 'gap' to use 'between'.",
        "format": "boolean
top
left
bottom
right
start
end
horizontal
vertical
all
between
{
  color: 
    string
    {
      dark: string,
      light: string
    },
  side: 
    top
    left
    bottom
    right
    start
    end
    horizontal
    vertical
    all
    between,
  size: 
    xsmall
    small
    medium
    large
    xlarge
    string,
  style: 
    solid
    dashed
    dotted
    double
    groove
    ridge
    inset
    outset
    hidden
}
[{
  color: 
    string
    {
      dark: string,
      light: string
    },
  side: 
    top
    left
    bottom
    right
    start
    end
    horizontal
    vertical
    all
    between,
  size: 
    xsmall
    small
    medium
    large
    xlarge
    string,
  style: 
    solid
    dashed
    dotted
    double
    groove
    ridge
    inset
    outset
    hidden
}]",
        "name": "border",
      },
      Object {
        "defaultValue": "column",
        "description": "The orientation to layout the child components in.",
        "format": "row
column
row-responsive
row-reverse
column-reverse",
        "name": "direction",
      },
      Object {
        "defaultValue": "none",
        "description": "Elevated height above the underlying context, indicated
        via a drop shadow.",
        "format": "none
xsmall
small
medium
large
xlarge
string",
        "name": "elevation",
      },
      Object {
        "description": "Whether flex-grow and/or flex-shrink is true and at a desired factor.",
        "format": "grow
shrink
boolean
{
  grow: number,
  shrink: number
}",
        "name": "flex",
      },
      Object {
        "description": "Whether the width and/or height should fill the container.",
        "format": "horizontal
vertical
boolean",
        "name": "fill",
      },
      Object {
        "defaultValue": true,
        "description": "When interactive via 'onClick', whether it should receive a focus
        outline.",
        "format": "boolean",
        "name": "focusIndicator",
      },
      Object {
        "description": "The amount of spacing between child elements. This
        should not be used in conjunction with 'wrap' as the gap elements
        will not wrap gracefully. If a child is a Fragment,
        Box will not add a gap between the choldren of the Fragment.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
string",
        "name": "gap",
      },
      Object {
        "description": "A fixed height.",
        "format": "xxsmall
xsmall
small
medium
large
xlarge
xxlarge
string
{
  min: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    xxlarge
    string,
  max: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    xxlarge
    string
}",
        "name": "height",
      },
      Object {
        "defaultValue": false,
        "description": "The hover indicator to apply when the user is mousing over the
button. An object can be also be specified for color index support:
{background: 'neutral-2'}. This prop is meant to be used only
with plain Buttons.",
        "format": "boolean
string
background
{
  color: string,
  dark: 
    boolean
    string,
  image: string,
  light: string,
  position: string,
  opacity: 
    string
    boolean
    number
    weak
    medium
    strong,
  repeat: 
    no-repeat
    repeat
    string,
  size: 
    cover
    contain
    string
}",
        "name": "hoverIndicator",
      },
      Object {
        "defaultValue": "stretch",
        "description": "How to align the contents along the main axis.",
        "format": "around
between
center
end
evenly
start
stretch",
        "name": "justify",
      },
      Object {
        "description": "Click handler. Setting this property adds additional attributes to
      the DOM for accessibility.",
        "format": "function",
        "name": "onClick",
      },
      Object {
        "description": "box overflow.",
        "format": "auto
hidden
scroll
visible
{
  horizontal: 
    auto
    hidden
    scroll
    visible,
  vertical: 
    auto
    hidden
    scroll
    visible
}
string",
        "name": "overflow",
      },
      Object {
        "defaultValue": "none",
        "description": "Spacing around the outer edge of
    the drawing coordinate area for the graphic elements to overflow into.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "pad",
      },
      Object {
        "defaultValue": true,
        "description": "Whether margin, pad, and border
      sizes should be scaled for mobile environments.",
        "format": "boolean",
        "name": "responsive",
      },
      Object {
        "defaultValue": false,
        "description": "How much to round the corners.",
        "format": "boolean
xsmall
small
medium
large
xlarge
full
string
{
  corner: 
    top
    left
    bottom
    right
    top-left
    top-right
    bottom-left
    bottom-right,
  size: 
    xsmall
    small
    medium
    large
    xlarge
    string
}",
        "name": "round",
      },
      Object {
        "description": "The DOM tag to use for the element. NOTE: This is deprecated in favor
of indicating the DOM tag via the 'as' property.",
        "format": "string
function",
        "name": "tag",
      },
      Object {
        "defaultValue": "div",
        "description": "The DOM tag or react component to use for the element.",
        "format": "string
function",
        "name": "as",
      },
      Object {
        "description": "A fixed width.",
        "format": "xxsmall
xsmall
small
medium
large
xlarge
xxlarge
string
{
  min: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    xxlarge
    string,
  max: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    xxlarge
    string
}",
        "name": "width",
      },
      Object {
        "defaultValue": false,
        "description": "Whether children can wrap if they can't all fit.",
        "format": "boolean
reverse",
        "name": "wrap",
      },
    ],
    "usage": "import { Box } from 'grommet';
<Box />",
  },
  "Button": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Button&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/button&module=%2Fsrc%2FButton.js",
      },
    ],
    "description": "A button.",
    "details": "You can provide a single function child that will be called with
      'hover' and 'focus' keys. This allows you to customize the rendering
      of the Button in those cases.",
    "intrinsicElement": "button",
    "name": "Button",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Function that can be called to render the visual representation.
      Button can take in Children as a function, node, or object. 
      For example hover can be passed as an object that would 
      then return a react element.
      \`children={({ hover }) => <Box...>{...}</Box>}\`
      ",
        "format": "function
object
node",
        "name": "children",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the button is active.",
        "format": "boolean",
        "name": "active",
      },
      Object {
        "description": "The DOM tag or react component to use for the element.",
        "format": "string
function",
        "name": "as",
      },
      Object {
        "description": "Color when hovering over places while selecting.",
        "format": "string
{
  dark: string,
  light: string
}",
        "name": "color",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the button is disabled.",
        "format": "boolean",
        "name": "disabled",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the button expands to fill all of the available width and/or 
        height.",
        "format": "horizontal
vertical
boolean",
        "name": "fill",
      },
      Object {
        "defaultValue": true,
        "description": "Whether when 'plain' it should receive a focus outline.",
        "format": "boolean",
        "name": "focusIndicator",
      },
      Object {
        "defaultValue": "small",
        "description": "The amount of spacing between icon and label in the button.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
string",
        "name": "gap",
      },
      Object {
        "defaultValue": false,
        "description": "The hover indicator to apply when the user is mousing over the
button. An object can be also be specified for color index support:
{background: 'neutral-2'}. This prop is meant to be used only
with plain Buttons.",
        "format": "boolean
string
background
{
  color: string,
  dark: 
    boolean
    string,
  image: string,
  light: string,
  position: string,
  opacity: 
    string
    boolean
    number
    weak
    medium
    strong,
  repeat: 
    no-repeat
    repeat
    string,
  size: 
    cover
    contain
    string
}",
        "name": "hoverIndicator",
      },
      Object {
        "description": "If specified, the button will behave like an anchor tag.",
        "format": "string",
        "name": "href",
      },
      Object {
        "description": "Icon element to place in the button.",
        "format": "element",
        "name": "icon",
      },
      Object {
        "description": "Label text to place in the button.",
        "format": "node",
        "name": "label",
      },
      Object {
        "description": "Click handler. Not setting this property and not specifying a href
        causes the Button to be disabled.",
        "format": "function",
        "name": "onClick",
      },
      Object {
        "defaultValue": false,
        "description": "Whether this is a plain button with no border or pad.
          Non plain button will show both pad and border.
          The plain button has no border and unless the icon prop exist it has 
          no pad as well.",
        "format": "boolean",
        "name": "plain",
      },
      Object {
        "defaultValue": false,
        "description": "Whether this is a primary button. There should be at most one per page
            or screen.",
        "format": "boolean",
        "name": "primary",
      },
      Object {
        "defaultValue": false,
        "description": "Whether an icon and label should be reversed so that the icon is at the
              end of the anchor.",
        "format": "boolean",
        "name": "reverse",
      },
      Object {
        "description": "Whether this is a secondary button.",
        "format": "boolean",
        "name": "secondary",
      },
      Object {
        "description": "The possible sizes of Button, that impacts the overall Button 
      padding, border radius, text size and line height. 
      'size' will not impact any icon related sizing.",
        "format": "small
medium
large",
        "name": "size",
      },
      Object {
        "description": "Specifies where to display the URL defined in the href property.",
        "format": "_self
_blank
_parent
_top
string",
        "name": "target",
      },
      Object {
        "defaultValue": "button",
        "description": "The type of button. Set the type to submit for the default button on 
                forms.",
        "format": "button
reset
submit",
        "name": "type",
      },
    ],
    "usage": "import { Button } from 'grommet';
<Button primary label='Label' />",
  },
  "Calendar": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Calendar&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/calendar&module=%2Fsrc%2FCalendar.js",
      },
    ],
    "description": "A calendar of days displayed by month.
      It can be used to select a single date, a range of dates, or multiple
      individual dates.",
    "intrinsicElement": "div",
    "name": "Calendar",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "defaultValue": true,
        "description": "Whether to animate the calender as the user interacts with it.",
        "format": "boolean",
        "name": "animate",
      },
      Object {
        "description": "An array of two numbers indicating the limits on
        navigation in ISO8601 format",
        "format": "[string]",
        "name": "bounds",
      },
      Object {
        "description": "The selected date in ISO8601 format",
        "format": "string",
        "name": "date",
      },
      Object {
        "description": "Multiple selected dates in ISO8601 format.
      Items that are an array indicate a range of dates.",
        "format": "[
  string
  [string]
]",
        "name": "dates",
      },
      Object {
        "description": "Multiple dates in ISO8601 format that should not be
        selectable. Items that are an array indicate a range of dates.",
        "format": "[
  string
  [string]
]",
        "name": "disabled",
      },
      Object {
        "defaultValue": false,
        "description": "Whether to show the days of the week.",
        "format": "boolean",
        "name": "daysOfWeek",
      },
      Object {
        "defaultValue": 0,
        "description": "The first day of the week. 0 for Sunday. 1 for Monday.",
        "format": "0
1",
        "name": "firstDayOfWeek",
      },
      Object {
        "description": "If specified, the entire calendar header will be managed by the caller.
The function passes the following options:

\`\`\`
  {
    date: Date,
    locale: string,
    onPreviousMonth: func,
    onNextMonth: func,
    previousInBound: bool,
    nextInBound: bool,
  }
\`\`\`

\`onPreviousMonth\` and \`onNextMonth\` are callbacks that will tell the 
calendar to move between months.
\`previousInBound\` and \`nextInBound\` are booleans that tell, when using 
\`bounds\`, if the current date is within that range. You can then use that 
to disable the previous and next buttons.
",
        "format": "function",
        "name": "header",
      },
      Object {
        "defaultValue": "en-US",
        "description": "The locale to use.",
        "format": "string",
        "name": "locale",
      },
      Object {
        "description": "Called with an ISO8601 date when the user navigates to a different
       month.",
        "format": "function",
        "name": "onReference",
      },
      Object {
        "description": "Called with an ISO8601 date when
      the user selects a day.
      For single select, make this the subsequent \`date\` property value.
      For multiple select or ranges, toggle values in \`dates\`.
      Not specifying this property makes the component read only.",
        "format": "function",
        "name": "onSelect",
      },
      Object {
        "defaultValue": false,
        "description": "Whether to automatically manage multiple date selection as a range.
        When the user clicks the first date, onSelect will be called with that
        date. When the user selects another date, onSelect will be called with
        an array of two dates.",
        "format": "boolean",
        "name": "range",
      },
      Object {
        "description": "The date to show if \`date\` isn't set, in ISO8601 format",
        "format": "string",
        "name": "reference",
      },
      Object {
        "defaultValue": true,
        "description": "Whether to show the days from the previous and next months.",
        "format": "boolean",
        "name": "showAdjacentDays",
      },
      Object {
        "defaultValue": "medium",
        "description": "What size to make it.",
        "format": "small
medium
large
string",
        "name": "size",
      },
    ],
    "usage": "import { Calendar } from 'grommet';
<Calendar />",
  },
  "Card": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Card&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/card&module=%2Fsrc%2FCard.js",
      },
    ],
    "description": "A Card.",
    "intrinsicElement": "div",
    "name": "Card",
    "usage": "import { Card } from 'grommet';
<Card/>",
  },
  "CardBody": [Function],
  "CardFooter": [Function],
  "CardHeader": [Function],
  "Carousel": [Function],
  "Chart": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Chart&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/chart&module=%2Fsrc%2FChart.js",
      },
    ],
    "description": "A graphical chart.",
    "name": "Chart",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Whether to animate drawing.",
        "format": "boolean",
        "name": "animate",
      },
      Object {
        "description": "The limits for the values, specified as a two dimensional array. 
      The first array specifies the limits of the x-axis. The second array 
      specifies the limits of the y-axis. 
      For example: [[x-min, x-max], [y-min, y-max]].
      If not specified, the bounds will automatically be set to fit
      the provided values.",
        "format": "[[number]]",
        "name": "bounds",
      },
      Object {
        "defaultValue": "accent-1",
        "description": "A color identifier to use for the graphic color. If an
      array is specified, it is used to create a gradient mask. Array objects
      indicate what color to show at what value. In the simplest case, the
      values should map to the Y bounds values, resulting in a vertical
      gradient. Specifying more objects allows more fine grained control over
      where the gradient colors change.",
        "format": "string
{
  dark: string,
  light: string
}
{
  color: 
    string
    {
      dark: string,
      light: string
    },
  opacity: 
    weak
    medium
    strong
    boolean
}
[{
  color: 
    string
    {
      dark: string,
      light: string
    },
  value: number
}]",
        "name": "color",
      },
      Object {
        "description": "A unique identifier for the Chart. This
      is required if more than one Chart is shown and they use color
      gradients.",
        "format": "string",
        "name": "id",
      },
      Object {
        "defaultValue": false,
        "description": "Whether to use dashed lines for line or bar charts.",
        "format": "boolean",
        "name": "dash",
      },
      Object {
        "description": "The amount of spacing between data points. This
      is only used when the size specifies width as 'auto'.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
string",
        "name": "gap",
      },
      Object {
        "description": "Called when the user clicks on the
     visualization. Clicking on individual bars or points are handled via
     values[].onClick for those types of charts.",
        "format": "function",
        "name": "onClick",
      },
      Object {
        "description": "Called with a boolean argument
      indicating when the user hovers onto or away from it.
      This is only available when the type is line or area.",
        "format": "function",
        "name": "onHover",
      },
      Object {
        "description": "What opacity to apply to the visuals. Supercedes 'color.opacity'",
        "format": "weak
medium
strong
boolean",
        "name": "opacity",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the chart strokes should overflow the component. Set this
      to true for precise positioning when stacking charts or including
      precise axes. Set this to false to have the graphical elements
      align with the component boundaries.",
        "format": "boolean",
        "name": "overflow",
      },
      Object {
        "defaultValue": "none",
        "description": "Spacing around the outer edge of
    the drawing coordinate area for the graphic elements to overflow into.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "pad",
      },
      Object {
        "description": "When using a 'point' type, what shape the points should use.
      If this property is not specified, points will be drawn as a square or
      a circle, based on how 'round' is specified.",
        "format": "circle
diamond
square
star
triangle
triangleDown",
        "name": "point",
      },
      Object {
        "defaultValue": false,
        "description": "Whether to round the line ends.",
        "format": "boolean",
        "name": "round",
      },
      Object {
        "defaultValue": Object {
          "height": "small",
          "width": "medium",
        },
        "description": "The size of the Chart.
      'full' is deprecated as 'fill' is more consistent with how that term is
      used elsewhere.",
        "format": "xxsmall
xsmall
small
medium
large
xlarge
fill
full
{
  height: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    fill
    full
    string,
  width: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    fill
    full
    auto
    string
}
string",
        "name": "size",
      },
      Object {
        "defaultValue": "medium",
        "description": "The width of the stroke.",
        "format": "hair
xsmall
small
medium
large
xlarge
none
string
number",
        "name": "thickness",
      },
      Object {
        "defaultValue": "bar",
        "description": "The visual type of chart.",
        "format": "bar
line
area
point",
        "name": "type",
      },
      Object {
        "description": "Array of value objects describing the data.
      'value' is a tuple indicating the coordinate of the value or a triple
      indicating the x coordinate and a range of two y coordinates.
      'label' is a text string describing it.
      'onHover' and 'onClick' only work when type='bar'.
      'color', 'opacity', and 'thickness' allow bar and point charts to have
      color variation per-value.",
        "format": "[
  number
  [number]
  {
    color: 
      string
      {
        dark: string,
        light: string
      },
    label: string,
    onClick: function,
    onHover: function,
    opacity: 
      string
      number,
    thickness: 
      hair
      xsmall
      small
      medium
      large
      xlarge
      none
      string
      number,
    value: 
      number
      [number]
  }
]",
        "name": "values",
        "required": true,
      },
    ],
    "usage": "import { Chart } from 'grommet';
<Chart />",
  },
  "CheckBox": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=CheckBox&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/checkbox&module=%2Fsrc%2FCheckBox.js",
      },
    ],
    "description": "A checkbox toggle control.",
    "intrinsicElement": "input",
    "name": "CheckBox",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers.
      When provided, an aria-label will be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "defaultValue": false,
        "description": "Same as React <input checked={} />",
        "format": "boolean",
        "name": "checked",
      },
      Object {
        "defaultValue": false,
        "description": "Same as React <input disabled={} />. Also adds a hidden input element
      with the same name so form submissions work.",
        "format": "boolean",
        "name": "disabled",
      },
      Object {
        "description": "The DOM id attribute value to use for the underlying <input/> element.",
        "format": "string",
        "name": "id",
      },
      Object {
        "description": "Label text to place next to the control. 
      Can be used instead of a11yTitle to meet accessibility requirements",
        "format": "node",
        "name": "label",
      },
      Object {
        "description": "The DOM name attribute value to use for the underlying <input/> 
      element.",
        "format": "string",
        "name": "name",
      },
      Object {
        "description": "Function that will be called when the user clicks the check box. It
      will be passed a React event object. The current state can be accessed
      via event.target.checked. Same as React <input onChange={} />.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "defaultValue": false,
        "description": "Whether to show the label in front of the checkbox.",
        "format": "boolean",
        "name": "reverse",
      },
      Object {
        "defaultValue": false,
        "description": "Whether to visualize it as a toggle switch.",
        "format": "boolean",
        "name": "toggle",
      },
      Object {
        "defaultValue": false,
        "description": "Whether state is indeterminate.
NOTE: This can only be used with non-toggle components",
        "format": "boolean",
        "name": "indeterminate",
      },
    ],
    "usage": "import { CheckBox } from 'grommet';
<CheckBox />",
  },
  "CheckBoxGroup": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=CheckBoxGroup&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/checkboxgroup&module=%2Fsrc%2FCheckBoxGroup.js",
      },
    ],
    "description": "A group of CheckBoxes.",
    "intrinsicElement": "div",
    "name": "CheckBoxGroup",
    "properties": Array [
      Object {
        "description": "An array of the values for the checked options. 
      If options is provided as an object, the value array will be the values 
     that the valueKey maps to.",
        "format": "[
  number
  string
]",
        "name": "value",
      },
      Object {
        "defaultValue": undefined,
        "description": "Disables all options.",
        "format": "boolean",
        "name": "disabled",
      },
      Object {
        "description": "When the options array contains objects, this property indicates how
        to determine the label of each option. If a string is
        provided, it is used as the key to retrieve each option's label.",
        "format": "string",
        "name": "labelKey",
      },
      Object {
        "description": "Required when used in the Context of Form and FormField.",
        "format": "string",
        "name": "name",
      },
      Object {
        "description": "Function that will be called when the user clicks on a CheckBox option. 
      It will pass a React event object with the additional CheckBoxGroup 
      properties of 'option' and 'value'.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "description": "Options can be either a string or an object of CheckBox props 
      excluding the 'checked' property, use CheckBoxGroup 'value' prop instead 
      of 'checked'.",
        "format": "[string]
[{

}]",
        "name": "options",
        "required": true,
      },
      Object {
        "description": "When the options array contains objects, this property indicates how
        to determine the value of each option. If a string is provided, 
        it is used as the key to retrieve each option's value.",
        "format": "string",
        "name": "valueKey",
      },
    ],
    "usage": "import { CheckBoxGroup } from 'grommet';
        <CheckBoxGroup />",
  },
  "Clock": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Clock&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/clock&module=%2Fsrc%2FClock.js",
      },
    ],
    "description": "A clock with timezone awareness.",
    "intrinsicElement": Array [
      "div",
      "svg",
    ],
    "name": "Clock",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "defaultValue": 24,
        "description": "Whether to roll over the hours after 12 or after 24.",
        "format": "12
24
12
24",
        "name": "hourLimit",
      },
      Object {
        "description": "If the clock is running, this function will be called with the
      current time value each time it changes.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "defaultValue": "seconds",
        "description": "How precise a time to represent.",
        "format": "hours
minutes
seconds",
        "name": "precision",
      },
      Object {
        "defaultValue": "forward",
        "description": "Whether the clock should actively adjust time or be fixed to the
      time specified. 'backward' could be used as a countdown timer.",
        "format": "boolean
backward
forward",
        "name": "run",
      },
      Object {
        "defaultValue": "medium",
        "description": "Clock size",
        "format": "small
medium
large
xlarge
string",
        "name": "size",
      },
      Object {
        "description": "ISO8601 time or duration. For example: 'PT8H12M23S',
      'T08:12:23', or '2015-02-22T08:12:23'. Any included date
      portion will be ignored. If not provided, the
      current browser time will be used.",
        "format": "string",
        "name": "time",
      },
      Object {
        "defaultValue": "analog",
        "description": "What type of visualization to show.",
        "format": "analog
digital",
        "name": "type",
      },
    ],
    "usage": "import { Clock } from 'grommet';
<Clock />",
  },
  "Collapsible": Object {
    "description": "Expand or collapse animation.",
    "intrinsicElement": "div",
    "name": "Collapsible",
    "properties": Array [
      Object {
        "description": "Whether or not the component should be open.",
        "format": "boolean",
        "name": "open",
      },
      Object {
        "defaultValue": "vertical",
        "description": "Direction to animate the collapsible content.",
        "format": "horizontal
vertical",
        "name": "direction",
      },
    ],
    "usage": "import { Collapsible } from 'grommet';
<Collapsible open>test</Collapsible>",
  },
  "DataChart": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=DataChart&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/datachart&module=%2Fsrc%2FDataChart.js",
      },
    ],
    "description": "Takes a data set and visualizes it. While Chart renders a
    single value across a data set. DataChart allows multiple overlayed
    Charts and adds guides and axes for decoration.",
    "intrinsicElement": "div",
    "name": "DataChart",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "defaultValue": true,
        "description": "Whether to show an axis and how it should look.
      If 'x' or 'y' is a string, it indicates the property to use
      to determine the values to show.
      If axis or 'x' is true, DataChart will look for a property called 'date'
      or 'time' and automatically use that for the x-axis. If DataChart
      can't find a property to use, it will use the data index for the x-axis.
      If axis or 'y' is true, DataChart will use the first property in 'series'.
      'granularity' indicates how many values to show.
      'coarse' granularity shows two values, one at each end.
      'fine' granularity shows all x-axis values and 5 y-axis values.
      'medium' granularity picks something in between.",
        "format": "boolean
{
  x: 
    boolean
    string
    {
      property: string,
      granularity: 
        coarse
        medium
        fine
    },
  y: 
    boolean
    string
    {
      property: string,
      granularity: 
        coarse
        medium
        fine
    }
}",
        "name": "axis",
      },
      Object {
        "defaultValue": "align",
        "description": "When set to 'align', indicates that the bounds of all series
      should be aligned. When not set, the bounds of each series
      property are based solely on the data found for that property.",
        "format": "align",
        "name": "bounds",
      },
      Object {
        "description": "How to visualize the data.
    'property' indicates which property of the data objects to use.
    When 'property' is an array, multiple properties are used for a
    stacked bar chart. If only a string is specified, that is the property
    to use and all other aspects are defaulted. If 'property' is an object,
    it specifies a map of properties to graphic aspects: x, y, color, thickness.
    If 'transform' is specified, it will be used to transform the data value
    before using it. For example, to convert a data value to a hex color
    string for the color.",
        "format": "string
{
  property: 
    string
    [
      string
      {
        property: string,
        color: 
          string
          [{
  color: string,
  value: number
}]
      }
    ]
    {
      color: 
        string
        {
          property: string,
          transform: function
        },
      thickness: 
        string
        {
          property: string,
          transform: function
        },
      x: string,
      y: string
    },
  color: 
    string
    [{
  color: string,
  value: number
}],
  dash: boolean,
  opacity: 
    weak
    medium
    strong
    number
    boolean,
  point: 
    circle
    diamond
    square
    star
    triangle
    triangleDown,
  round: boolean,
  thickness: 
    hair
    xsmall
    small
    medium
    large
    xlarge
    none
    string,
  type: 
    bar
    bars
    line
    area
    point
}
[
  string
  {
    property: 
      string
      [
        string
        {
          property: string,
          color: 
            string
            [{
  color: string,
  value: number
}]
        }
      ]
      {
        color: 
          string
          {
            property: string,
            transform: function
          },
        thickness: 
          string
          {
            property: string,
            transform: function
          },
        x: string,
        y: string
      },
    color: 
      string
      [{
  color: string,
  value: number
}],
    dash: boolean,
    opacity: 
      weak
      medium
      strong
      number
      boolean,
    point: 
      circle
      diamond
      square
      star
      triangle
      triangleDown,
    round: boolean,
    thickness: 
      hair
      xsmall
      small
      medium
      large
      xlarge
      none
      string,
    type: 
      bar
      bars
      line
      area
      point
  }
]",
        "name": "chart",
      },
      Object {
        "description": "the data set",
        "format": "[{

}]",
        "name": "data",
      },
      Object {
        "description": "Whether to add the ability to interact with the chart
      via mouse or keyboard to show details on specific values in the chart.
      It shows all properties specified in 'series', using any 'render'
      functions therein.",
        "format": "boolean",
        "name": "detail",
      },
      Object {
        "description": "The spacing between the axes and the Charts.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
string",
        "name": "gap",
      },
      Object {
        "description": "Whether to put guidelines underneath the chart graphics.
    See the description of 'granularity' under 'axis'.",
        "format": "boolean
{
  x: 
    boolean
    {
      granularity: 
        coarse
        medium
        fine
    },
  y: 
    boolean
    {
      granularity: 
        coarse
        medium
        fine
    }
}",
        "name": "guide",
      },
      Object {
        "description": "Whether to include a legend",
        "format": "boolean",
        "name": "legend",
      },
      Object {
        "defaultValue": "none",
        "description": "Spacing around the outer edge of
    the drawing coordinate area for the graphic elements to overflow into.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "pad",
      },
      Object {
        "description": "Describes which parts of the 'data' are of interest and
    how to handle them. 'property' indicates which property of the 'data'
    objects this series refers to. 'label' indicates how to label the series
    in a legend or hover details. 'prefix' and 'suffix' are applied to the
    data values shown in an axis, legend, or details. 'render' allows custom
    rendering of the data value. 'render' is called with:
    (value, datum, property) => { return < />; }",
        "format": "string
{
  label: 
    string,
  prefix: string,
  property: string,
  render: function,
  suffix: string
}
[
  string
  {
    label: 
      string,
    prefix: string,
    property: string,
    render: function,
    suffix: string
  }
]",
        "name": "series",
      },
      Object {
        "description": "The size of the Charts. This does not include the axes
      and any gap. It is passed through to the underlying Chart.",
        "format": "fill
{
  height: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    fill
    string,
  width: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    fill
    auto
    string
}",
        "name": "size",
      },
    ],
    "usage": "import { DataChart } from 'grommet';
<DataChart data={data} property={} />",
  },
  "DataTable": [Function],
  "DateInput": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=DateInput&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/dateinput&module=%2Fsrc%2FDateInput.js",
      },
    ],
    "description": "A control to input a single date or a date range.",
    "intrinsicElement": "div",
    "name": "DateInput",
    "properties": Array [
      Object {
        "description": "Any properties to pass on to the underlying DropButton
      when not inline and no format.",
        "format": "{

}",
        "name": "buttonProps",
      },
      Object {
        "description": "Any properties to pass on to the underlying Calendar.",
        "format": "{

}",
        "name": "calendarProps",
      },
      Object {
        "description": "The default date or date range value in ISO8601 format.",
        "format": "string
[string]",
        "name": "defaultValue",
      },
      Object {
        "defaultValue": Object {
          "align": Object {
            "left": "left",
            "top": "bottom",
          },
        },
        "description": "Any properties to pass on to the underlying Drop when not inline.",
        "format": "{

}",
        "name": "dropProps",
      },
      Object {
        "description": "The date format to use. If not specified, the date value will not
      be displayed as a text string and the user will not be able to enter
      a date by typing. For example: 'mm/dd/yyyy', or for a range:
      'mm/dd/yyyy-mm/dd/yyyy'. This property should be used when in a Form.",
        "format": "string",
        "name": "format",
      },
      Object {
        "description": "The id of the input.",
        "format": "string",
        "name": "id",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the calendar should always be shown or via a Drop when
      interacting with the input.",
        "format": "boolean",
        "name": "inline",
      },
      Object {
        "description": "Any properties to pass on to the underlying MaskedInput
      when there is a format.",
        "format": "{

}",
        "name": "inputProps",
      },
      Object {
        "description": "The name of the input.
      This property is required when used within FormField.",
        "format": "string",
        "name": "name",
      },
      Object {
        "description": "Function that will be called when the user types or selects a date.
      The updated value will be available via 'event.value'.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "description": "The date or date range value(s) in ISO8601 format.",
        "format": "string
[string]",
        "name": "value",
      },
    ],
    "usage": "import { DateInput } from 'grommet';
<DateInput id='item' name='item' />",
  },
  "Diagram": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Diagram&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/diagram&module=%2Fsrc%2FDiagram.js",
      },
    ],
    "description": "Graphical connection lines. Diagram is meant to be used with Stack.
      Boxes can be used in the \`guidingChild\` layer of Stack and then
      Diagram can be used to draw lines connecting the Boxes.",
    "intrinsicElement": "svg",
    "name": "Diagram",
    "properties": Array [
      Object {
        "defaultValue": Array [],
        "description": "Array of objects describing the connections.
      The 'fromTarget' and 'toTarget' may be either DOM element ids or
      React references.
      'offset' can be used to shift a bit to reduce the amount of overlap
      with other connection lines to make the lines easier to distinguish.",
        "format": "[{
  anchor: 
    center
    vertical
    horizontal,
  color: 
    string
    {
      dark: string,
      light: string
    },
  fromTarget: 
    string
    object,
  label: string,
  offset: 
    xsmall
    small
    medium
    large
    string,
  thickness: 
    hair
    xxsmall
    xsmall
    small
    medium
    large
    string,
  toTarget: 
    string
    object,
  type: 
    direct
    curved
    rectilinear
}]",
        "name": "connections",
        "required": true,
      },
    ],
    "usage": "import { Diagram } from 'grommet';
<Diagram />",
  },
  "Distribution": [Function],
  "Drop": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Drop&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/drop&module=%2Fsrc%2FDrop.js",
      },
    ],
    "description": "A container that is overlaid next to a target.",
    "intrinsicElement": "div",
    "name": "Drop",
    "properties": Array [
      Object {
        "defaultValue": Object {
          "left": "left",
          "top": "top",
        },
        "description": "How to align the drop with respect to the target element. Not 
        specifying a vertical or horizontal alignment will cause it to be 
        aligned in the center.",
        "format": "{
  top: 
    top
    bottom,
  bottom: 
    top
    bottom,
  right: 
    left
    right,
  left: 
    left
    right
}",
        "name": "align",
      },
      Object {
        "description": "Function that will be invoked when the user clicks outside the drop.",
        "format": "function",
        "name": "onClickOutside",
      },
      Object {
        "description": "Function that will be called when the user presses the escape key inside
       the drop.",
        "format": "function",
        "name": "onEsc",
      },
      Object {
        "defaultValue": "auto",
        "description": "How to control the overflow inside the drop.",
        "format": "auto
hidden
scroll
visible
{
  horizontal: 
    auto
    hidden
    scroll
    visible,
  vertical: 
    auto
    hidden
    scroll
    visible
}
string",
        "name": "overflow",
      },
      Object {
        "defaultValue": true,
        "description": "Whether to dynamically re-place when resized.",
        "format": "boolean",
        "name": "responsive",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the drop should control focus.",
        "format": "boolean",
        "name": "restrictFocus",
      },
      Object {
        "defaultValue": true,
        "description": "Whether the drop element should be stretched to at least match the
      width of the target element. The default is true because
      that is what most uses of Drop want, like Select and Menu.",
        "format": "boolean",
        "name": "stretch",
      },
      Object {
        "description": "Target where the drop will be aligned to. This should be a React 
      reference.",
        "format": "object",
        "name": "target",
        "required": true,
      },
      Object {
        "description": "Elevated height of the target, indicated via a drop shadow.",
        "format": "none
xsmall
small
medium
large
xlarge
string",
        "name": "elevation",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the drop element should have no background nor shadow",
        "format": "boolean",
        "name": "plain",
      },
    ],
    "usage": "import { Drop } from 'grommet';
<Drop target={reference}>...</Drop>",
  },
  "DropButton": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=DropButton&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/dropbutton&module=%2Fsrc%2FDropButton.js",
      },
    ],
    "description": "A Button that controls a Drop. When opened, the Drop will contain
      whatever is specified via \`dropContent\`. The Drop will control the focus
      so that the contents behind it are not focusable. All properties and 
      theme properties of Button or Drop can be passed through.
      ",
    "intrinsicElement": "button",
    "name": "DropButton",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the button should be disabled.",
        "format": "boolean",
        "name": "disabled",
      },
      Object {
        "defaultValue": Object {
          "left": "left",
          "top": "top",
        },
        "description": "How to align the drop with respect to the button.",
        "format": "{
  top: 
    top
    bottom,
  bottom: 
    top
    bottom,
  right: 
    left
    right,
  left: 
    left
    right
}",
        "name": "dropAlign",
      },
      Object {
        "description": "Content to put inside the Drop.",
        "format": "element",
        "name": "dropContent",
        "required": true,
      },
      Object {
        "description": "Target where the drop will be aligned to. This should be
      a React reference. Typically, this is not required as the drop will be
      aligned to the DropButton itself by default.",
        "format": "object",
        "name": "dropTarget",
      },
      Object {
        "description": "Any valid Drop prop.",
        "format": "object",
        "name": "dropProps",
      },
      Object {
        "description": "Callback for when the drop is closed",
        "format": "function",
        "name": "onClose",
      },
      Object {
        "description": "Callback for when the drop is opened",
        "format": "function",
        "name": "onOpen",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the drop should be open or not. Setting this property does not
      influence user interaction after it has been rendered.",
        "format": "boolean",
        "name": "open",
      },
    ],
    "usage": "import { DropButton } from 'grommet';
<DropButton dropContent={...} />",
  },
  "Footer": [Function],
  "Form": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Form&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/form&module=%2Fsrc%2FForm.js",
      },
    ],
    "description": "A form that manages state for its fields.",
    "intrinsicElement": "form",
    "name": "Form",
    "properties": Array [
      Object {
        "defaultValue": Object {},
        "description": "An object representing any errors in the data. Their keys should
        match the keys in the value object.",
        "format": "{

}",
        "name": "errors",
      },
      Object {
        "defaultValue": Object {},
        "description": "An object representing any information details in the data.
        Their keys should match the keys in the value object.",
        "format": "{

}",
        "name": "infos",
      },
      Object {
        "defaultValue": Object {
          "invalid": "invalid",
          "required": "required",
        },
        "description": "Custom validation messages.",
        "format": "{
  invalid: string,
  required: string
}",
        "name": "messages",
      },
      Object {
        "description": "Function that will be called when any fields are updated.
      The fields must have a non-null \`name\` property assigned.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "description": "Function that will be called when the form is submitted. The
      single argument is an event containing the latest value object
      via \`event.value\` and an object indicating which fields were
      touched via \`event.touched\`.",
        "format": "function",
        "name": "onSubmit",
      },
      Object {
        "description": "Function that will be called when the form is reset. The
      single argument is the event provided by react.",
        "format": "function",
        "name": "onReset",
      },
      Object {
        "description": "Function that will be called when the form is validated. The
      single argument is an event containing the latest error object
      via \`validationResults.errors\` and info object via 
      \`validationResults.infos\`.",
        "format": "function",
        "name": "onValidate",
      },
      Object {
        "defaultValue": "submit",
        "description": "When to perform validation",
        "format": "blur
submit",
        "name": "validate",
      },
      Object {
        "defaultValue": Object {},
        "description": "An object representing all of the data in the form.",
        "format": "{

}",
        "name": "value",
      },
    ],
    "usage": "import { Form } from 'grommet';
<Form />",
  },
  "FormContext": Object {
    "$$typeof": Symbol(react.context),
    "Consumer": Object {
      "$$typeof": Symbol(react.context),
      "_calculateChangedBits": null,
      "_context": [Circular],
    },
    "Provider": Object {
      "$$typeof": Symbol(react.provider),
      "_context": [Circular],
    },
    "_calculateChangedBits": null,
    "_currentRenderer": null,
    "_currentRenderer2": null,
    "_currentValue": Object {
      "useFormField": [Function],
      "useFormInput": [Function],
    },
    "_currentValue2": Object {
      "useFormField": [Function],
      "useFormInput": [Function],
    },
    "_threadCount": 0,
  },
  "FormField": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=FormField&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/formfield&module=%2Fsrc%2FFormField.js",
      },
    ],
    "description": "A single field in a form. FormField wraps an input component with
      a label, help, and/or error messaging. It typically contains an input
      control like TextInput, TextArea, Select, etc.",
    "intrinsicElement": "div",
    "name": "FormField",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers.
       Should only be provided if FormField has no children.
       When a11yTitle is provided an aria-label will be added to the element
       if it has no children.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "The component to insert in the FormField. Grommet will add update the
      form values when this field changes. Any additional properties
      (such as initial value) you pass to FormField will be forwarded to this
      component. The component may be custom as long it supports the properties
      of name, value, onChange (event => {}), while event has either event.value
      or event.target.value.",
        "format": "function
object",
        "name": "component",
      },
      Object {
        "description": "Any valid Box property. These
     properties are applied to the FormField contents container and will
     override properties from the theme.",
        "format": "object",
        "name": "contentProps",
      },
      Object {
        "description": "Whether the field should look disabled.",
        "format": "boolean",
        "name": "disabled",
      },
      Object {
        "description": "Any error text describing issues with the field's value",
        "format": "string
node",
        "name": "error",
      },
      Object {
        "description": "Any help text describing how the field works",
        "format": "string
node",
        "name": "help",
      },
      Object {
        "description": "The id of the input element contained in this field",
        "format": "string",
        "name": "htmlFor",
      },
      Object {
        "description": "Any informational text regarding the field's value",
        "format": "string
node",
        "name": "info",
      },
      Object {
        "description": "A short label describing the field",
        "format": "string
node",
        "name": "label",
      },
      Object {
        "description": "The name of the value data when in a Form and the name of
      the input field.",
        "format": "string",
        "name": "name",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Whether to add padding to align with the padding of TextInput.",
        "format": "boolean",
        "name": "pad",
      },
      Object {
        "description": "Whether the field is required.",
        "format": "boolean",
        "name": "required",
      },
      Object {
        "description": "Validation rule when used within a grommet Form. Provide an object
      with a regular expression, a function, or an array of these. If a
      function is provided, it will be called with two arguments, the value
      for this field and the entire value object. This permits validation to
      encompass multiple fields. The function should return a string message
      describing the validation issue, if any, or an object with 'message'
      and 'status' properties.",
        "format": "{
  regexp: new RegExp(...),
  message: 
    string
    node,
  status: 
    error
    info
}
function
[
  {
    regexp: new RegExp(...),
    message: 
      string
      node,
    status: 
      error
      info
  }
  function
]",
        "name": "validate",
      },
    ],
    "usage": "import { FormField } from 'grommet';
<FormField />",
  },
  "Grid": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Grid&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/grid&module=%2Fsrc%2FGrid.js",
      },
    ],
    "description": "A grid system for laying out content. To use, define the
rows and columns, create area names for adjacent cells, and then
place Box components inside those areas using the gridArea property.
See https://css-tricks.com/snippets/css/complete-guide-grid/.
The availability of Grid can be tested via \`Grid.available\`. Use this
to create fallback rendering for older browsers, like ie11.",
    "intrinsicElement": "div",
    "name": "Grid",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "defaultValue": "stretch",
        "description": "How to align the individual items inside the grid when there is extra
space in the column axis.",
        "format": "start
center
end
stretch",
        "name": "align",
      },
      Object {
        "description": "How to align the contents along the column axis.",
        "format": "start
center
end
between
around
stretch",
        "name": "alignContent",
      },
      Object {
        "description": "Grid areas.
      Either area names and column,row coordinates.
      Or, an array of string arrays that specify named grid areas.",
        "format": "[{
  name: string,
  start: [number],
  end: [number]
}]
[[string]]",
        "name": "areas",
      },
      Object {
        "description": "Column sizes.
      If an array value is an array, the inner array indicates the
      minimum and maximum sizes for the column.
      Specifying a single string will repeat multiple columns
      of that size, as long as there is room for more.
      Specifying an object allows indicating how the columns
      stretch to fit the available space.",
        "format": "[
  [
    xsmall
    small
    medium
    large
    xlarge
    full
    1/2
    1/3
    2/3
    1/4
    2/4
    3/4
    flex
    auto
    string
  ]
  xsmall
  small
  medium
  large
  xlarge
  full
  1/2
  1/3
  2/3
  1/4
  2/4
  3/4
  flex
  auto
  string
]
xsmall
small
medium
large
xlarge
{
  count: 
    fit
    fill
    number,
  size: 
    xsmall
    small
    medium
    large
    xlarge
    [xsmall
small
medium
large
xlarge
full
1/2
1/3
2/3
1/4
2/4
3/4
flex
auto]
    string
}
string",
        "name": "columns",
      },
      Object {
        "description": "Whether the width and/or height should fill the container.",
        "format": "horizontal
vertical
boolean",
        "name": "fill",
      },
      Object {
        "description": "Gap sizes between rows and/or columns.",
        "format": "xxsmall
xsmall
small
medium
large
xlarge
none
{
  row: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    none
    string,
  column: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    none
    string
}
string",
        "name": "gap",
      },
      Object {
        "defaultValue": "stretch",
        "description": "How to align the individual items inside the grid when there is extra
space in the row axis.",
        "format": "start
center
end
stretch",
        "name": "justify",
      },
      Object {
        "description": "How to align the contents along the row axis.",
        "format": "start
center
end
between
around
stretch",
        "name": "justifyContent",
      },
      Object {
        "defaultValue": "none",
        "description": "Spacing around the outer edge of
    the drawing coordinate area for the graphic elements to overflow into.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "pad",
      },
      Object {
        "defaultValue": true,
        "description": "Whether margin and pad sizes should be scaled for mobile
        environments.",
        "format": "boolean",
        "name": "responsive",
      },
      Object {
        "description": "Row sizes.
      If an array value is an array, the inner array indicates the
      minimum and maximum sizes for the row.
      Specifying a single string will cause automatically added rows to be
      the specified size.",
        "format": "[
  [
    xsmall
    small
    medium
    large
    xlarge
    full
    1/2
    1/3
    2/3
    1/4
    2/4
    3/4
    flex
    auto
    string
  ]
  xsmall
  small
  medium
  large
  xlarge
  full
  1/2
  1/3
  2/3
  1/4
  2/4
  3/4
  flex
  auto
  string
]
xsmall
small
medium
large
xlarge
string",
        "name": "rows",
      },
      Object {
        "description": "The DOM tag to use for the element. NOTE: This is deprecated
      in favor of indicating the DOM tag via the 'as' property.",
        "format": "string
function",
        "name": "tag",
      },
      Object {
        "defaultValue": "div",
        "description": "The DOM tag or react component to use for the element.",
        "format": "string
function",
        "name": "as",
      },
    ],
    "usage": "import { Grid } from 'grommet';
<Grid />",
  },
  "Grommet": [Function],
  "Header": [Function],
  "Heading": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Heading&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/heading&module=%2Fsrc%2FHeading.js",
      },
    ],
    "description": "Heading text structured in levels.",
    "intrinsicElement": Array [
      "h1",
      "h2",
      "h3",
      "h4",
    ],
    "name": "Heading",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Color when hovering over places while selecting.",
        "format": "string
{
  dark: string,
  light: string
}",
        "name": "color",
      },
      Object {
        "defaultValue": 1,
        "description": "The heading level. It corresponds to the number after the 'H' for
the DOM tag. Set the level for semantic accuracy and accessibility.
The sizing can be further adjusted using the size property.",
        "format": "1
2
3
4
5
6
1
2
3
4
5
6",
        "name": "level",
      },
      Object {
        "defaultValue": true,
        "description": "Whether the font size should be scaled for
      mobile environments.",
        "format": "boolean",
        "name": "responsive",
      },
      Object {
        "defaultValue": "medium",
        "description": "The font size is primarily driven by the chosen tag. But, it can
be adjusted via this size property. The tag should be set for semantic
correctness and accessibility. This size property allows for stylistic
adjustments.",
        "format": "small
medium
large
xlarge
string",
        "name": "size",
      },
      Object {
        "defaultValue": "start",
        "description": "How to align the text inside the heading.",
        "format": "start
center
end",
        "name": "textAlign",
      },
      Object {
        "defaultValue": false,
        "description": "Restrict the text to a single line and truncate with ellipsis if it
is too long to all fit.",
        "format": "boolean",
        "name": "truncate",
      },
    ],
    "usage": "import { Heading } from 'grommet';
<Heading />",
  },
  "Image": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Image&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/image&module=%2Fsrc%2FImage.js",
      },
    ],
    "description": "An image.",
    "intrinsicElement": "img",
    "name": "Image",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Whether the width and/or height should fill the container.",
        "format": "horizontal
vertical
boolean",
        "name": "fill",
      },
      Object {
        "description": "How the image fills its container.",
        "format": "cover
contain",
        "name": "fit",
      },
      Object {
        "description": "Specifies the URL of the fallback image used when 
      src is failing to load",
        "format": "string",
        "name": "fallback",
      },
      Object {
        "description": "Transparency of the image.",
        "format": "weak
medium
strong
string
boolean",
        "name": "opacity",
      },
    ],
    "usage": "import { Image } from 'grommet';
<Image/>",
  },
  "InfiniteScroll": [Function],
  "Keyboard": [Function],
  "Layer": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Layer&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/layer&module=%2Fsrc%2FLayer.js",
      },
    ],
    "description": "An overlay. Layer is typically modal and anchored to an edge, corner, or
      center of the window. It is the caller's responsibility to provide a
      control for the user to close the layer.",
    "intrinsicElement": "div",
    "name": "Layer",
    "properties": Array [
      Object {
        "defaultValue": true,
        "description": "Whether to animate the Layer content when it opens. This
        property is deprecated and will be removed in the next major version
        of grommet. Instead, use 'animation'.",
        "format": "boolean",
        "name": "animate",
      },
      Object {
        "defaultValue": "slide",
        "description": "Animation transition of the Layer content when it opens and closes.",
        "format": "slide
fadeIn
none
boolean",
        "name": "animation",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the width and/or height should fill the current viewport 
        size.",
        "format": "boolean
vertical
horizontal",
        "name": "full",
      },
      Object {
        "description": "The amount of margin around the Layer. An object can be specified to
distinguish horizontal margin, vertical margin, and margin on a
particular side of the layer",
        "format": "none
xxsmall
xsmall
small
medium
large
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    string
}
string",
        "name": "margin",
      },
      Object {
        "defaultValue": true,
        "description": "Whether there should be an overlay preventing interaction underneath 
        the layer.",
        "format": "boolean",
        "name": "modal",
      },
      Object {
        "description": "Function that will be invoked on modal layers when the user clicks 
      outside the layer.",
        "format": "function",
        "name": "onClickOutside",
      },
      Object {
        "description": "Function that will be called when the user presses the escape key inside
       the layer.",
        "format": "function",
        "name": "onEsc",
      },
      Object {
        "defaultValue": false,
        "description": "Whether this is a plain Layer with no background color or border.",
        "format": "boolean",
        "name": "plain",
      },
      Object {
        "defaultValue": "center",
        "description": "Position of the layer content.",
        "format": "bottom
bottom-left
bottom-right
center
end
hidden
left
right
start
top
top-left
top-right",
        "name": "position",
      },
      Object {
        "defaultValue": true,
        "description": "Whether the layer should take full width and height on mobile",
        "format": "boolean",
        "name": "responsive",
      },
      Object {
        "description": "Target where the layer will be aligned to. This should be a React 
      reference.",
        "format": "object",
        "name": "target",
      },
    ],
    "usage": "import { Layer } from 'grommet';
<Layer />",
  },
  "List": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=List&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/list&module=%2Fsrc%2FList.js",
      },
    ],
    "description": "An ordered list of items.",
    "intrinsicElement": "ol",
    "name": "List",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Accepts a function that allows for a custom rendering
       of a component, it should be passed with an item and
        index of an array and return a react element
      \`action = ({item, index}) => <Content />\`
    />",
        "format": "function",
        "name": "action",
      },
      Object {
        "defaultValue": "ul",
        "description": "The DOM tag or react component to use for the element.",
        "format": "string",
        "name": "as",
      },
      Object {
        "description": "Item background. An array value indicates that items should have
      different backgrounds, modulo the array index.",
        "format": "string
[string]",
        "name": "background",
      },
      Object {
        "description": "Item border.",
        "format": "boolean
horizontal
vertical
top
bottom
left
right
start
end
{
  color: 
    string
    {
      dark: string,
      light: string
    },
  side: 
    horizontal
    vertical
    top
    bottom
    left
    right
    start
    end,
  size: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}",
        "name": "border",
      },
      Object {
        "description": "Array of data objects.",
        "format": "[
  string
  {

  }
]",
        "name": "data",
      },
      Object {
        "description": "Function that will be called when each data item is rendered.
      It will be passed three arguments, the individual data item, its index,
      and an object indicating the state of the item, if any. It
      should return a react element.
      For example:
      \`children={(item, index, { active }) => <Box ...>{...}</Box>}\`
      ",
        "format": "function",
        "name": "children",
      },
      Object {
        "description": "Item specific background, border, and pad, keyed by data index.
      For example:
      { 27: { background: ..., border: ..., pad: ... }},
      where the background, border, and pad accept the same values as
      the same named properties on List.",
        "format": "{

}",
        "name": "itemProps",
      },
      Object {
        "description": "Use this to indicate that 'data' doesn't contain all that it could.
      It will be called when all of the data items have been rendered.
      This might be used when the total number of items that could be retrieved
      is more than you'd want to load into the browser. 'onMore' allows you
      to lazily fetch more from the server only when needed.",
        "format": "function",
        "name": "onMore",
      },
      Object {
        "description": "When supplied, this function will be called with an event object that
      include a 'item' property containing the data value associated with
      the clicked item and an 'index' property containing the index in 'data'
      of the clicked item. You should not include interactive elements, like
      Anchor or Button inside 'primaryKey' or 'secondaryKey' as that can
      cause confusion with overlapping interactive elements.",
        "format": "function",
        "name": "onClickItem",
      },
      Object {
        "description": "Item padding.",
        "format": "xxsmall
xsmall
small
medium
large
xlarge
string
{
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge,
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
}",
        "name": "pad",
      },
      Object {
        "description": "When a string is supplied, it indicates the property in a data item
      object to use to get the primary content. If a function is supplied, it
      will be called with the current data item object and should return
      a React element that will be rendered as the primary content.",
        "format": "string
function",
        "name": "primaryKey",
      },
      Object {
        "description": "When a string is supplied, it indicates the property in a data item
      object to use to get the secondary content. If a function is supplied, it
      will be called with the current data item object and should return
      a React element that will be rendered as the secondary content.",
        "format": "string
function",
        "name": "secondaryKey",
      },
      Object {
        "defaultValue": 50,
        "description": "How many items to render at a time.",
        "format": "number",
        "name": "step",
      },
    ],
    "usage": "import { List } from 'grommet';
<List data={[...]} />",
  },
  "Main": [Function],
  "Markdown": [Function],
  "MaskedInput": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=MaskedInput&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/maskedinput&module=%2Fsrc%2FMaskedInput.js",
      },
    ],
    "description": "An input field with formalized syntax.",
    "intrinsicElement": "input",
    "name": "MaskedInput",
    "properties": Array [
      Object {
        "description": "Custom title to be used by screen readers.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "An optional icon to show. This could be used to provide an
      indication of what kind of input is expected, like an email icon,
      or what the input will be used for, like a search icon.",
        "format": "element",
        "name": "icon",
      },
      Object {
        "description": "The id attribute of the input.",
        "format": "string",
        "name": "id",
      },
      Object {
        "description": "The name attribute of the input.",
        "format": "string",
        "name": "name",
      },
      Object {
        "description": "Function that will be called when the user types or pastes text.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "description": "Function that will be called when the user leaves the field.",
        "format": "function",
        "name": "onBlur",
      },
      Object {
        "description": "Describes the structure of the mask. If a regexp is provided, it should
      allow both the final full string element as well as partial strings
      as the user types characters one by one.",
        "format": "[{
  length: 
    number
    [number],
  fixed: string,
  options: [
  string
  number
],
  regexp: 
    {

    }
}]",
        "name": "mask",
      },
      Object {
        "description": "Whether an icon should be reversed so that the icon is at the
      end of the input.",
        "format": "boolean",
        "name": "reverse",
      },
      Object {
        "description": "The size of the text.",
        "format": "small
medium
large
xlarge
string",
        "name": "size",
      },
      Object {
        "description": "What text to put in the input. The caller should ensure that it
      is initially valid with respect to the mask.",
        "format": "string
number",
        "name": "value",
      },
    ],
    "usage": "import { MaskedInput } from 'grommet';
<MaskedInput id='item' name='item' />",
  },
  "Menu": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Menu&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/menu&module=%2Fsrc%2FMenu.js",
      },
    ],
    "description": "A control that opens a Drop containing plain Buttons.",
    "details": "The labels and behavior of the contained Buttons are described
      via the \`items\` property.
      You can provide a single function child that will be called with
      'hover', 'focus', and 'drop' keys. This allows you to customize
      the rendering of the Menu button in those cases.",
    "intrinsicElement": "button",
    "name": "Menu",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Function that will be called to render the visual representation.
      It will be passed an object containing button props.
      It should return a react element.
      For example:
      \`children={({ drop, hover }) => <Box ...>{...}</Box>}\`
      ",
        "format": "function",
        "name": "children",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the menu should be disabled.",
        "format": "boolean",
        "name": "disabled",
      },
      Object {
        "defaultValue": Object {
          "left": "left",
          "top": "top",
        },
        "description": "Where to place the drop down.
The keys correspond to a side of the drop down.
The values correspond to a side of the control. For instance,
{left: 'left', top: 'bottom'} would align the left edges and the top of
the drop down to the bottom of the control. At most one of left or right and
one of top or bottom should be specified.",
        "format": "{
  top: 
    top
    bottom,
  bottom: 
    top
    bottom,
  left: 
    right
    left,
  right: 
    right
    left
}",
        "name": "dropAlign",
      },
      Object {
        "description": "Background color when drop is active",
        "format": "string
{
  color: string,
  opacity: 
    boolean
    number
    weak
    medium
    strong
}",
        "name": "dropBackground",
      },
      Object {
        "description": "Target where the drop will be aligned to. This should be
      a React reference. Typically, this is not required as the drop will be
      aligned to the Menu itself by default.",
        "format": "object",
        "name": "dropTarget",
      },
      Object {
        "defaultValue": Object {},
        "description": "Any valid Drop prop.",
        "format": "object",
        "name": "dropProps",
      },
      Object {
        "defaultValue": "start",
        "description": "How to align the contents along the row axis.",
        "format": "start
center
end
between
around
stretch",
        "name": "justifyContent",
      },
      Object {
        "description": "Indicates the icon shown as a control to open it.",
        "format": "boolean
node",
        "name": "icon",
      },
      Object {
        "defaultValue": Array [],
        "description": "Menu items to be placed inside the drop down.
The object values can be any Button prop, 
for example: label, onClick, and href.",
        "format": "[object]",
        "name": "items",
        "required": true,
      },
      Object {
        "description": "Indicates the label shown as a control to open it.",
        "format": "string
node",
        "name": "label",
      },
      Object {
        "defaultValue": Object {
          "closeMenu": "Close Menu",
          "openMenu": "Open Menu",
        },
        "description": "Custom messages. Used for accessibility by screen readers. 
      These values will be overridden if an a11yTitle is provided.",
        "format": "{
  closeMenu: string,
  openMenu: string
}",
        "name": "messages",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the state of the component should be open",
        "format": "boolean",
        "name": "open",
      },
      Object {
        "defaultValue": "medium",
        "description": "The size of the menu.",
        "format": "small
medium
large
xlarge
string",
        "name": "size",
      },
    ],
    "usage": "import { Menu } from 'grommet';
<Menu />",
  },
  "Meter": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Meter&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/meter&module=%2Fsrc%2FMeter.js",
      },
    ],
    "description": "A graphical meter.",
    "name": "Meter",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "defaultValue": Object {
          "color": "light-2",
          "opacity": "medium",
        },
        "description": "Background color",
        "format": "string
{
  color: string,
  opacity: 
    weak
    medium
    strong
    number
    boolean
}",
        "name": "background",
      },
      Object {
        "description": "The maximum value for the Meter.",
        "format": "number
string",
        "name": "max",
      },
      Object {
        "defaultValue": false,
        "description": "Whether to round the line ends",
        "format": "boolean",
        "name": "round",
      },
      Object {
        "defaultValue": "medium",
        "description": "The size of the Meter.",
        "format": "xsmall
small
medium
large
xlarge
full
string",
        "name": "size",
      },
      Object {
        "defaultValue": "medium",
        "description": "The size of the Meter.",
        "format": "xsmall
small
medium
large
xlarge
string",
        "name": "thickness",
      },
      Object {
        "defaultValue": "bar",
        "description": "The visual type of meter.",
        "format": "bar
circle",
        "name": "type",
      },
      Object {
        "description": "Array of value objects describing the data.
      'value' is the actual numeric value.
      'label' is a text string describing it.
      'color' indicates the color name to use. If not specified a default one
      will be chosen.
      'onClick' will be called when the user clicks on it.
      Set 'highlight' to call attention to it.
      'onHover' will be called with a boolean argument indicating when the
      user hovers onto or away from it.",
        "format": "[{
  color: string,
  highlight: boolean,
  label: string,
  onClick: function,
  onHover: function,
  value: number
}]",
        "name": "values",
      },
    ],
    "usage": "import { Meter } from 'grommet';
<Meter />",
  },
  "Nav": [Function],
  "Paragraph": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Paragraph&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/paragraph&module=%2Fsrc%2FParagraph.js",
      },
    ],
    "description": "A paragraph of text.",
    "intrinsicElement": "p",
    "name": "Paragraph",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Color when hovering over places while selecting.",
        "format": "string
{
  dark: string,
  light: string
}",
        "name": "color",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the width should fill the container.",
        "format": "boolean",
        "name": "fill",
      },
      Object {
        "defaultValue": true,
        "description": "Whether margin should be scaled for mobile environments.",
        "format": "boolean",
        "name": "responsive",
      },
      Object {
        "defaultValue": "medium",
        "description": "The size of the Paragraph text.",
        "format": "small
medium
large
xlarge
xxlarge
string",
        "name": "size",
      },
      Object {
        "defaultValue": "start",
        "description": "How to align the text inside the paragraph.",
        "format": "start
center
end",
        "name": "textAlign",
      },
    ],
    "usage": "import { Paragraph } from 'grommet';
<Paragraph />",
  },
  "RadioButton": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=RadioButton&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/radiobutton&module=%2Fsrc%2FRadioButton.js",
      },
    ],
    "description": "A radio button control.",
    "details": "RadioButton should typically not be used directly.
      Instead, use RadioButtonGroup.",
    "intrinsicElement": "input",
    "name": "RadioButton",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers.
      When provided, an aria-label will be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "Same as React <input checked={} />",
        "format": "boolean",
        "name": "checked",
      },
      Object {
        "description": "Function that will be called to render the visual representation.
      It will be passed an object indicating whether the button is checked. It
      should return a react element.
      For example:
      \`children={({ checked }) => <Box ...>{...}</Box>}\`
      ",
        "format": "function",
        "name": "children",
      },
      Object {
        "description": "Same as React <input disabled={} />. Also adds a hidden input element
with the same name so form submissions work.",
        "format": "boolean",
        "name": "disabled",
      },
      Object {
        "description": "The DOM id attribute value to use for the underlying <input/> element.",
        "format": "string",
        "name": "id",
      },
      Object {
        "description": "Label text to place next to the control.",
        "format": "node",
        "name": "label",
      },
      Object {
        "description": "The DOM name attribute value to use for the underlying <input/>
       element.",
        "format": "string",
        "name": "name",
        "required": true,
      },
      Object {
        "description": "Function that will be called when the user clicks the radio button. It
      will be passed a React event object. The current state can be accessed
      via event.target.checked. Same as React <input onChange={} />.",
        "format": "function",
        "name": "onChange",
      },
    ],
    "usage": "import { RadioButton } from 'grommet';
<RadioButton />",
  },
  "RadioButtonGroup": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=RadioButtonGroup&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/radiobuttongroup&module=%2Fsrc%2FRadioButtonGroup.js",
      },
    ],
    "description": "A group of radio buttons.",
    "intrinsicElement": "div",
    "name": "RadioButtonGroup",
    "properties": Array [
      Object {
        "description": "Function that will be called to render the visual representation.
      It will be passed an object indicating whether the button is checked. It
      should return a react element.
      For example:
      \`children={(option, { checked }) => <Box ...>{...}</Box>}\`
      ",
        "format": "function",
        "name": "children",
      },
      Object {
        "defaultValue": false,
        "description": "Disables all options.",
        "format": "boolean",
        "name": "disabled",
      },
      Object {
        "description": "The DOM name attribute value to use for the underlying <input/> 
      elements.",
        "format": "string",
        "name": "name",
        "required": true,
      },
      Object {
        "description": "Function that will be called when the user clicks on one of the radio
      buttons. It will be passed a React event object.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "description": "Options can be either a string, boolean, number 
      or an object. Each option is rendered as a single RadioButton.",
        "format": "[string]
[number]
[boolean]
[{
  disabled: boolean,
  id: string,
  label: 
    string
    element,
  value: 
    string
    number
    boolean
}]",
        "name": "options",
        "required": true,
      },
      Object {
        "description": "Currently selected option value.",
        "format": "string
number
boolean
object",
        "name": "value",
      },
    ],
    "usage": "import { RadioButtonGroup } from 'grommet';
<RadioButtonGroup />",
  },
  "RangeInput": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=RangeInput&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/rangeinput&module=%2Fsrc%2FRangeInput.js",
      },
    ],
    "description": "A slider control to input a value within a fixed range.",
    "intrinsicElement": "input",
    "name": "RangeInput",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers.
      When provided, an aria-label will be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "The id attribute of the range input.",
        "format": "string",
        "name": "id",
      },
      Object {
        "description": "The minimum value permitted.",
        "format": "number
string",
        "name": "min",
      },
      Object {
        "description": "The maximum value permitted.",
        "format": "number
string",
        "name": "max",
      },
      Object {
        "description": "The name attribute of the range input.",
        "format": "string",
        "name": "name",
      },
      Object {
        "description": "Function that will be called when the user changes the value. It will
      be passed an event object. The new input value will be available
      via 'event.target.value'.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "description": "The step interval between values.",
        "format": "number",
        "name": "step",
      },
      Object {
        "description": "The current value.",
        "format": "number
string",
        "name": "value",
      },
    ],
    "usage": "import { RangeInput } from 'grommet';
<RangeInput />",
  },
  "RangeSelector": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=RangeSelector&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/rangeselector&module=%2Fsrc%2FRangeSelector.js",
      },
    ],
    "description": "A control to input a range of values.",
    "intrinsicElement": "div",
    "name": "RangeSelector",
    "properties": Array [
      Object {
        "description": "Color when hovering over places while selecting.",
        "format": "string
{
  dark: string,
  light: string
}",
        "name": "color",
      },
      Object {
        "defaultValue": "horizontal",
        "description": "",
        "format": "horizontal
vertical",
        "name": "direction",
      },
      Object {
        "description": "Whether to indicate what has not been selected.",
        "format": "boolean",
        "name": "invert",
      },
      Object {
        "defaultValue": 100,
        "description": "The maximum value permitted.",
        "format": "number",
        "name": "max",
      },
      Object {
        "description": "Custom messages used by screen readers for accessibility.",
        "format": "{
  lower: string,
  upper: string
}",
        "name": "messages",
      },
      Object {
        "defaultValue": 0,
        "description": "The minimum value permitted.",
        "format": "number",
        "name": "min",
      },
      Object {
        "description": "Function that will be called when the user changes one of the
      values. It will be passed an array of two numbers indicating
      the new values selected.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "defaultValue": "medium",
        "description": "Transparency of the selection indicator.",
        "format": "weak
medium
strong
string
boolean",
        "name": "opacity",
      },
      Object {
        "description": "How much to round the corners.",
        "format": "xsmall
small
medium
large
full
string",
        "name": "round",
      },
      Object {
        "defaultValue": "medium",
        "description": "How thick to make the selection indicator.",
        "format": "xxsmall
xsmall
small
medium
large
xlarge
full
string",
        "name": "size",
      },
      Object {
        "defaultValue": 1,
        "description": "The step interval between values.",
        "format": "number",
        "name": "step",
      },
      Object {
        "description": "The current values.",
        "format": "[number]",
        "name": "values",
        "required": true,
      },
    ],
    "usage": "import { RangeSelector } from 'grommet';
<RangeSelector />",
  },
  "RoutedAnchor": [Function],
  "RoutedButton": [Function],
  "Select": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Select&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/select&module=%2Fsrc%2FSelect.js",
      },
    ],
    "description": "A control to select a value, with optional search.",
    "name": "Select",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Function that will be called when each option is rendered.
      It will be passed (option, index, options, state) where option
      is the option to render, index is the index of that option in the
      options array, and state is an object with
      { active, disabled, selected } keys indicating the current state
      of the option.",
        "format": "function",
        "name": "children",
      },
      Object {
        "defaultValue": true,
        "description": "Wether to close the drop when a selection is made.",
        "format": "boolean",
        "name": "closeOnChange",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the entire select or individual options should be disabled.
        An array of numbers indicates the indexes into 'options' of the
        disabled options. An array of strings or objects work the same way
        as the 'value' to indicate which options are disabled.",
        "format": "boolean
[
  number
  string
  object
]",
        "name": "disabled",
      },
      Object {
        "description": "When the options array contains objects, this property indicates how
      to determine which options should be disabled. If a string is
      provided, it is used as the key for each item object and if that key
      returns truthy, the option is disabled. If a function is provided, it is
      called with the option and the return value determines if the option
      is disabled.",
        "format": "string
function",
        "name": "disabledKey",
      },
      Object {
        "defaultValue": Object {
          "left": "left",
          "top": "bottom",
        },
        "description": "How to align the drop.",
        "format": "{
  top: 
    top
    bottom,
  bottom: 
    top
    bottom,
  right: 
    left
    right,
  left: 
    left
    right
}",
        "name": "dropAlign",
      },
      Object {
        "description": "The height of the drop container.",
        "format": "xsmall
small
medium
large
xlarge
string",
        "name": "dropHeight",
      },
      Object {
        "description": "Target where the options drop will be aligned to. This should be
      a React reference. Typically, this is not required as the drop will be
      aligned to the Select itself by default.",
        "format": "object",
        "name": "dropTarget",
      },
      Object {
        "description": "Any valid Drop prop.",
        "format": "object",
        "name": "dropProps",
      },
      Object {
        "description": "Whether when 'plain' it should receive a focus outline.",
        "format": "boolean",
        "name": "focusIndicator",
      },
      Object {
        "description": "A custom icon to be used when rendering the select. You can use false to
       not render an icon at all.",
        "format": "boolean
function
node",
        "name": "icon",
      },
      Object {
        "description": "When the options array contains objects, this property indicates how
      to determine the label of each option. If a string is
      provided, it is used as the key to retrieve each option's label.
      If a function is provided, it is called with the option and the
      return value indicates the label.",
        "format": "string
function",
        "name": "labelKey",
      },
      Object {
        "description": "Custom messages.",
        "format": "{
  multiple: string
}",
        "name": "messages",
      },
      Object {
        "description": "Whether to allow multiple options to be selected.",
        "format": "boolean",
        "name": "multiple",
      },
      Object {
        "description": "The name of the attribute when in a Form or FormField.",
        "format": "string",
        "name": "name",
      },
      Object {
        "description": "Function that will be called when the user selects an option.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "description": "Function that will be called when the Select drop closes.",
        "format": "function",
        "name": "onClose",
      },
      Object {
        "description": "Function that will be called when the Select drop opens.",
        "format": "function",
        "name": "onOpen",
      },
      Object {
        "description": "Function that will be called when the user types in the search input.
      If this property is not provided, no search field will be rendered.",
        "format": "function",
        "name": "onSearch",
      },
      Object {
        "description": "Use this to indicate that 'items' doesn't contain all that it could.
      It will be called when the entire list of items has been rendered.
      This might be used when the total number of items that could be retrieved
      is more than you'd want to load into the browser. 'onMore' allows you
      to lazily fetch more from the server only when needed.",
        "format": "function",
        "name": "onMore",
      },
      Object {
        "description": "Options can be either a string or an object. If an object is used, use
      children callback in order to render anything based on the current item.",
        "format": "[
  string
  number
  boolean
  element
  object
]",
        "name": "options",
        "required": true,
      },
      Object {
        "description": "Control the state of the component.",
        "format": "boolean",
        "name": "open",
      },
      Object {
        "description": "Placeholder to use when no value is provided.",
        "format": "string
element
node",
        "name": "placeholder",
      },
      Object {
        "description": "Whether this is a plain Select input with no border or padding.",
        "format": "boolean",
        "name": "plain",
      },
      Object {
        "defaultValue": true,
        "description": "Whether to replace previously rendered items with a generic spacing
      element when they have scrolled out of view. This is more performant but
      means that in-page searching will not find elements that have been
      replaced.",
        "format": "boolean",
        "name": "replace",
      },
      Object {
        "description": "Placeholder text to use in the search box when the search input is 
      empty.",
        "format": "string",
        "name": "searchPlaceholder",
      },
      Object {
        "description": "Index of the currently selected option. When multiple, the set of
      options selected. NOTE: This is deprecated in favor of indicating
      the selected values via the 'value' property.",
        "format": "number
[number]",
        "name": "selected",
      },
      Object {
        "description": "The size of the text and icon.",
        "format": "small
medium
large
xlarge
string",
        "name": "size",
      },
      Object {
        "description": "Currently selected value. This can be an array
      when multiple. Passing an element allows the caller to control how
      the value is rendered. Passing an element is deprecated. Instead,
      use the 'valueLabel' property.",
        "format": "string
element
object
number
[
  string
  object
  number
]",
        "name": "value",
      },
      Object {
        "description": "Provides custom rendering of the value. If not provided, Select
      will render the value automatically.",
        "format": "node",
        "name": "valueLabel",
      },
      Object {
        "description": "When the options array contains objects, this property indicates how
      to determine the value of each option. If a string is
      provided, it is used as the key to retrieve each option's value.
      If a function is provided, it is called with the option and the
      return value indicates the value. If reduce is true, the value
      coming via the key will be used for the onChange value and the value
      property is expected to be reduced to align.",
        "format": "string
function
{
  key: string,
  reduce: boolean
}",
        "name": "valueKey",
      },
      Object {
        "defaultValue": "No matches found",
        "description": "Empty option message to display when no matching results were found",
        "format": "string",
        "name": "emptySearchMessage",
      },
    ],
    "usage": "import { Select } from 'grommet';
<Select />",
  },
  "Sidebar": [Function],
  "SkipLink": Object {
    "$$typeof": Symbol(react.forward_ref),
    "render": [Function],
  },
  "SkipLinkTarget": [Function],
  "SkipLinks": [Function],
  "Stack": [Function],
  "Tab": Object {
    "description": "One tab within Tabs.",
    "intrinsicElement": "button",
    "name": "Tab",
    "properties": Array [
      Object {
        "defaultValue": false,
        "description": "Whether the tab is disabled.",
        "format": "boolean",
        "name": "disabled",
      },
      Object {
        "description": "Icon element to place in the tab.",
        "format": "element",
        "name": "icon",
      },
      Object {
        "defaultValue": false,
        "description": "Whether this is a plain tab with no style.",
        "format": "boolean",
        "name": "plain",
      },
      Object {
        "defaultValue": false,
        "description": "Whether an icon and label should be reversed so that the icon is at the
              end of the tab.",
        "format": "boolean",
        "name": "reverse",
      },
      Object {
        "description": "The title of the tab.",
        "format": "node",
        "name": "title",
      },
    ],
    "usage": "import { Tab } from 'grommet';
<Tab />",
  },
  "Table": [Function],
  "TableBody": Object {
    "description": "The body of a table.",
    "intrinsicElement": "tbody",
    "name": "TableBody",
    "usage": "import { TableBody } from 'grommet';
<TableBody />",
  },
  "TableCell": Object {
    "description": "A cell of data in a table.",
    "intrinsicElement": "td",
    "name": "TableCell",
    "properties": Array [
      Object {
        "defaultValue": false,
        "description": "Whether default styling context should be removed.",
        "format": "boolean",
        "name": "plain",
      },
      Object {
        "description": "For header cells, what scope the header is for.
        Typically, the cells in a TableHeader have 'col' scope and
        the primary cell in each row in the TableBody has 'row' scope.",
        "format": "col
row",
        "name": "scope",
      },
      Object {
        "description": "What size the cell should be. Typically, this is not needed
      unless you are trying to align multiple tables.",
        "format": "xxsmall
xsmall
small
medium
large
xlarge
1/2
1/3
2/3
1/4
2/4
3/4
string",
        "name": "size",
      },
      Object {
        "description": "How to align the contents vertically.",
        "format": "top
middle
bottom",
        "name": "verticalAlign",
      },
    ],
    "usage": "import { TableCell } from 'grommet';
<TableCell />",
  },
  "TableFooter": [Function],
  "TableHeader": [Function],
  "TableRow": Object {
    "description": "A row of cells in a table.",
    "intrinsicElement": "tr",
    "name": "TableRow",
    "usage": "import { TableRow } from 'grommet';
<TableRow />",
  },
  "Tabs": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Tabs&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/tabs&module=%2Fsrc%2FTabs.js",
      },
    ],
    "description": "A container with controls to show one Tab at a time.",
    "intrinsicElement": "div",
    "name": "Tabs",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Active tab index. If specified, Tabs will be a controlled component.
This means that future tab changes will not work unless you subscribe to
onActive function and update activeIndex accordingly.",
        "format": "number",
        "name": "activeIndex",
      },
      Object {
        "description": "How to align the tab controls within the tabs header.",
        "format": "start
center
end
stretch",
        "name": "alignControls",
      },
      Object {
        "description": "Array of Tab.",
        "format": "node",
        "name": "children",
        "required": true,
      },
      Object {
        "description": "Whether flex-grow and/or flex-shrink is true.",
        "format": "grow
shrink
boolean",
        "name": "flex",
      },
      Object {
        "defaultValue": "center",
        "description": "How to align the tabs along the main axis.",
        "format": "start
center
end",
        "name": "justify",
      },
      Object {
        "defaultValue": Object {
          "tabContents": "Tab Contents",
        },
        "description": "Custom messages for Tabs. Used for accessibility by screen readers.",
        "format": "{
  tabContents: string
}",
        "name": "messages",
      },
      Object {
        "description": "Function that will be called with the active tab index when the
currently active tab changes.",
        "format": "function",
        "name": "onActive",
      },
    ],
    "usage": "import { Tabs, Tab } from 'grommet';
<Tabs>
  <Tab title='Tab 1'>...</Tab>
  <Tab title='Tab 2'>...</Tab>
</Tabs>",
  },
  "Text": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Text&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/text&module=%2Fsrc%2FText.js",
      },
    ],
    "description": "Arbitrary text.",
    "intrinsicElement": "span",
    "name": "Text",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can be 
    specified to distinguish horizontal margin, vertical margin, and margin on 
    a particular side. For vertical margin to be applied, Text needs to be 
    contained within a layout component (such as Box or a generic div) or 
    behave as a div (by applying as=\\"div\\" or a display style of 
    inline-block).",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Color when hovering over places while selecting.",
        "format": "string
{
  dark: string,
  light: string
}",
        "name": "color",
      },
      Object {
        "defaultValue": "medium",
        "description": "The font size and line height are primarily driven by the chosen tag. 
But, it can be adjusted via this size property. The tag should be set for 
semantic correctness and accessibility. This size property allows for stylistic
adjustments.",
        "format": "xsmall
small
medium
large
xlarge
xxlarge
string",
        "name": "size",
      },
      Object {
        "description": "The DOM tag to use for the element. NOTE: This is deprecated in favor
         of indicating the DOM tag via the 'as' property.",
        "format": "string
function",
        "name": "tag",
      },
      Object {
        "defaultValue": "span",
        "description": "The DOM tag or react component to use for the element.",
        "format": "string
function
element",
        "name": "as",
      },
      Object {
        "defaultValue": "start",
        "description": "How to align the text inside the component.",
        "format": "start
center
end",
        "name": "textAlign",
      },
      Object {
        "defaultValue": false,
        "description": "Restrict the text to a single line and truncate with ellipsis if it
is too long to all fit.",
        "format": "boolean",
        "name": "truncate",
      },
      Object {
        "description": "Font weight",
        "format": "normal
bold
number",
        "name": "weight",
      },
      Object {
        "defaultValue": "normal",
        "description": "Whether words should break when reaching the end of a line.",
        "format": "normal
break-all
keep-all
break-word",
        "name": "wordBreak",
      },
    ],
    "usage": "import { Text } from 'grommet';
<Text />",
  },
  "TextArea": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=TextArea&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/textarea&module=%2Fsrc%2FTextArea.js",
      },
    ],
    "description": "A control to input multiple lines of text.",
    "intrinsicElement": "textarea",
    "name": "TextArea",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers.
      When provided, an aria-label will be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "The id attribute of the textarea.",
        "format": "string",
        "name": "id",
      },
      Object {
        "defaultValue": false,
        "description": "Whether the width and height should fill the container.",
        "format": "boolean",
        "name": "fill",
      },
      Object {
        "description": "Whether the plain textarea should receive a focus outline.",
        "format": "boolean",
        "name": "focusIndicator",
      },
      Object {
        "description": "The name attribute of the textarea.",
        "format": "string",
        "name": "name",
      },
      Object {
        "description": "Function that will be called when the user types in the textarea.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "description": "Placeholder text to use when no value is provided.",
        "format": "string",
        "name": "placeholder",
      },
      Object {
        "description": "Whether this is a plain textarea with no border or padding.
Only use this when the containing context provides sufficient affordance.",
        "format": "boolean",
        "name": "plain",
      },
      Object {
        "description": "What text to put in the textarea.",
        "format": "string",
        "name": "value",
      },
      Object {
        "defaultValue": true,
        "description": "Whether user is allowed to resize the textarea.",
        "format": "vertical
horizontal
boolean",
        "name": "resize",
      },
      Object {
        "description": "The size of the TextArea.",
        "format": "small
medium
large
xlarge
string",
        "name": "size",
      },
    ],
    "usage": "import { TextArea } from 'grommet';
<TextArea id='item' name='item' />",
  },
  "TextInput": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=TextInput&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/textinput&module=%2Fsrc%2FTextInput.js",
      },
    ],
    "description": "A control to input a single line of text, with optional suggestions.",
    "intrinsicElement": "input",
    "name": "TextInput",
    "properties": Array [
      Object {
        "description": "Custom title to be used by screen readers.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "defaultValue": Object {
          "left": "left",
          "top": "bottom",
        },
        "description": "How to align the drop.",
        "format": "{
  top: 
    top
    bottom,
  bottom: 
    top
    bottom,
  right: 
    left
    right,
  left: 
    left
    right
}",
        "name": "dropAlign",
      },
      Object {
        "description": "The height of the drop container.",
        "format": "xsmall
small
medium
large
xlarge
string",
        "name": "dropHeight",
      },
      Object {
        "description": "Target where any suggestions drop will be aligned to. This should be
      a React reference. Typically, this is not required as the drop will be
      aligned to the TextInput itself by default.",
        "format": "object",
        "name": "dropTarget",
      },
      Object {
        "description": "Any valid Drop prop.",
        "format": "object",
        "name": "dropProps",
      },
      Object {
        "description": "An optional icon to show. This could be used to provide an
      indication of what kind of input is expected, like an email icon,
      or what the input will be used for, like a search icon.",
        "format": "element",
        "name": "icon",
      },
      Object {
        "description": "The id attribute of the input.",
        "format": "string",
        "name": "id",
      },
      Object {
        "description": "Whether the plain text input should receive a focus outline.",
        "format": "boolean",
        "name": "focusIndicator",
      },
      Object {
        "defaultValue": Object {
          "enterSelect": "(Press Enter to Select)",
          "suggestionIsOpen": "Suggestions drop is open, continue to use arrow keys to navigate",
          "suggestionsCount": "suggestions available",
          "suggestionsExist": "This input has suggestions use arrow keys to navigate",
        },
        "description": "Custom messages for TextInput. Used for accessibility by screen
        readers.",
        "format": "{
  enterSelect: string,
  suggestionsCount: string,
  suggestionsExist: string,
  suggestionIsOpen: string
}",
        "name": "messages",
      },
      Object {
        "description": "The name of the attribute when in a Form or FormField.",
        "format": "string",
        "name": "name",
      },
      Object {
        "description": "Function that will be called when the user types in the input.",
        "format": "function",
        "name": "onChange",
      },
      Object {
        "description": "Function that will be called when the user selects a suggestion.
The suggestion contains the object chosen from the supplied suggestions.",
        "format": "function",
        "name": "onSelect",
      },
      Object {
        "description": "Function that will be called when the suggestions drop is opened.",
        "format": "function",
        "name": "onSuggestionsOpen",
      },
      Object {
        "description": "Function that will be called when the suggestions drop is closed.",
        "format": "function",
        "name": "onSuggestionsClose",
      },
      Object {
        "description": "Placeholder to use when no value is provided.",
        "format": "node",
        "name": "placeholder",
      },
      Object {
        "description": "Whether this is a plain input with no border or padding.
Only use this when the containing context provides sufficient affordance",
        "format": "boolean",
        "name": "plain",
      },
      Object {
        "description": "Whether an icon should be reversed so that the icon is at the
      end of the input.",
        "format": "boolean",
        "name": "reverse",
      },
      Object {
        "description": "The size of the TextInput.",
        "format": "small
medium
large
xlarge
string",
        "name": "size",
      },
      Object {
        "description": "Suggestions to show. It is recommended to avoid showing too many
suggestions and instead rely on the user to type more.",
        "format": "[
  {
    label: node,
    value: any
  }
  string
]",
        "name": "suggestions",
      },
      Object {
        "description": "What text to put in the input.",
        "format": "string
number",
        "name": "value",
      },
    ],
    "usage": "import { TextInput } from 'grommet';
<TextInput id='item' name='item' />",
  },
  "Video": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=Video&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/video&module=%2Fsrc%2FVideo.js",
      },
    ],
    "description": "A video player.",
    "intrinsicElement": "video",
    "name": "Video",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Enables automatic playback of the video as soon as it is loaded.",
        "format": "boolean",
        "name": "autoPlay",
      },
      Object {
        "defaultValue": "over",
        "description": "Whether to show playback controls and where to place them.",
        "format": "false
over
below",
        "name": "controls",
      },
      Object {
        "description": "How the image fills its container.",
        "format": "cover
contain",
        "name": "fit",
      },
      Object {
        "description": "Enables continuous video looping.",
        "format": "boolean",
        "name": "loop",
      },
      Object {
        "description": "Enables video muting. This option is best used with the autoPlay flag.",
        "format": "boolean",
        "name": "mute",
      },
      Object {
        "defaultValue": Object {
          "closeMenu": "close menu",
          "fullScreen": "full screen",
          "openMenu": "open menu",
          "pauseButton": "pause",
          "playButton": "play",
          "progressMeter": "video progress",
          "scrubber": "scrubber",
          "volumeDown": "volume down",
          "volumeUp": "volume up",
        },
        "description": "Custom messages. Used for accessibility by screen readers.",
        "format": "{
  closeMenu: string,
  fullScreen: string,
  progressMeter: string,
  openMenu: string,
  pauseButton: string,
  playButton: string,
  scrubber: string,
  volumeDown: string,
  volumeUp: string
}",
        "name": "messages",
      },
    ],
    "usage": "import { Video } from 'grommet';
<Video />",
  },
  "WorldMap": Object {
    "availableAt": Array [
      Object {
        "badge": "https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png",
        "label": "Storybook",
        "url": "https://storybook.grommet.io/?selectedKind=WorldMap&full=0&addons=0&stories=1&panelRight=0",
      },
      Object {
        "badge": "https://codesandbox.io/static/img/play-codesandbox.svg",
        "label": "CodeSandbox",
        "url": "https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/worldmap&module=%2Fsrc%2FWorldMap.js",
      },
    ],
    "description": "A map of the world, or a continent.",
    "intrinsicElement": "svg",
    "name": "WorldMap",
    "properties": Array [
      Object {
        "description": "Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.",
        "format": "string",
        "name": "a11yTitle",
      },
      Object {
        "description": "How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.",
        "format": "start
center
end
stretch",
        "name": "alignSelf",
      },
      Object {
        "description": "The name of the area to place
    this inside a parent Grid.",
        "format": "string",
        "name": "gridArea",
      },
      Object {
        "description": "The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.",
        "format": "none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string",
        "name": "margin",
      },
      Object {
        "description": "Color when hovering over places while selecting.",
        "format": "string
{
  dark: string,
  light: string
}",
        "name": "color",
      },
      Object {
        "description": "Continent details.",
        "format": "[{
  color: 
    string
    {
      dark: string,
      light: string
    },
  name: 
    Africa
    Asia
    Australia
    Europe
    North America
    South America,
  onClick: function,
  onHover: function
}]",
        "name": "continents",
      },
      Object {
        "description": "Whether the width and/or height should fill the container.",
        "format": "horizontal
vertical
boolean",
        "name": "fill",
      },
      Object {
        "description": "Called when the user clicks on a place.
        It is passed the location.",
        "format": "function",
        "name": "onSelectPlace",
      },
      Object {
        "description": "Place details.",
        "format": "[{
  color: 
    string
    {
      dark: string,
      light: string
    },
  name: string,
  location: [number],
  onClick: function,
  onHover: function
}]",
        "name": "places",
      },
      Object {
        "description": "Color when hovering over places while selecting.",
        "format": "string
{
  dark: string,
  light: string
}",
        "name": "hoverColor",
      },
    ],
    "usage": "import { WorldMap } from 'grommet';
<WorldMap />",
  },
  "__esModule": true,
  "calcBounds": [Function],
  "calcs": [Function],
  "round": [Function],
}
`;
