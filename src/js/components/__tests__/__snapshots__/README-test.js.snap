// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`README is updated 1`] = `
Object {
  "Accordion": "## Accordion
An accordion containing collapsible panels.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Accordion&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/accordion&module=%2Fsrc%2FAccordion.js)
## Usage

\`\`\`javascript
import { Accordion, AccordionPanel } from 'grommet';
<Accordion>
  <AccordionPanel label='Panel 1'>...</AccordionPanel>
  <AccordionPanel label='Panel 2'>...</AccordionPanel>
</Accordion>
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**activeIndex**

Active panel index. If specified, Accordion will be a controlled 
component. This means that future panel changes will not work unless you
subscribe to onActive function and update activeIndex accordingly.

\`\`\`
number
[number]
\`\`\`

**animate**

Transition content in & out with a slide down animation. Defaults to \`true\`.

\`\`\`
boolean
\`\`\`

**children**

Array of AccordionPanels.

\`\`\`
node
\`\`\`

**onActive**

Function that will be called when the active index changes.
It will always send an array with currently active panel indexes.

\`\`\`
function
\`\`\`

**multiple**

Allow multiple panels to be opened at once.

\`\`\`
boolean
\`\`\`

**messages**

Custom messages for Tabs. Used for accessibility by screen readers. Defaults to \`{
  \\"tabContents\\": \\"Tab Contents\\"
}\`.

\`\`\`
{
  tabContents: string
}
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`",
  "AccordionPanel": "## AccordionPanel
An Accordion panel.


## Properties

**label**

The panel label.

\`\`\`
string
node
\`\`\`

**header**

If specified, the entire panel header will be managed by the caller.

\`\`\`
node
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`
## Theme
  
**accordion.hover.heading.color**

The text color of the heading when hovered. 
    backward compatible with accordion.hover.color Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: \\"light-4\\", light: \\"dark-3\\" }
\`\`\`

**accordion.heading.level**

The heading level. Expects \`number\`.

Defaults to

\`\`\`
4
\`\`\`

**accordion.heading.margin**

The margin size around the heading. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**accordion.icons.collapse**

The icon to use when the panel is expanded. Expects \`React.Element\`.

Defaults to

\`\`\`
<FormUp />
\`\`\`

**accordion.icons.color**

The icon color to use in the accordion. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
control
\`\`\`

**accordion.icons.expand**

The icon to use when the panel is collapsed. Expects \`React.Element\`.

Defaults to

\`\`\`
<FormDown />
\`\`\`

**accordion.border.color**

The border color to use in the accordion panel content. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
border
\`\`\`

**accordion.border.side**

The border side to use in the accordion panel content. Expects \`string\`.

Defaults to

\`\`\`
bottom
\`\`\`

**accordion.panel.border.color**

The border color to use on the accordion panel. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**accordion.panel.border.side**

The border side to use on the accordion panel. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**accordion.panel.border.size**

The border size of the accordion panel. Expects \`xsmall | small | medium | large | xlarge\`.

Defaults to

\`\`\`
undefined
\`\`\`

**accordion.panel.border.style**

The border style of the accordion panel. Expects \`solid | dashed | dotted | double| groove | ridge 
      | inset | outset | hidden\`.

Defaults to

\`\`\`
undefined
\`\`\`
",
  "Anchor": "## Anchor
A text link.

We have a separate component from the browser
base so we can style it. You can either set the icon and/or label properties
or just use children.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Anchor&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/anchor&module=%2Fsrc%2FAnchor.js)
## Usage

\`\`\`javascript
import { Anchor } from 'grommet';
<Anchor href={location} label='Label' />
\`\`\`

## Properties

**a11yTitle**

Custom title to be used by screen readers.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**color**

Label color and icon color, if not specified on the icon.

\`\`\`
string
{
  dark: string,
  light: string
}
\`\`\`

**disabled**

Whether the anchor is disabled.

\`\`\`
boolean
\`\`\`

**href**

Hyperlink reference to place in the anchor.

\`\`\`
string
\`\`\`

**icon**

Icon element to place in the anchor.

\`\`\`
element
\`\`\`

**label**

Label text to place in the anchor.

\`\`\`
node
\`\`\`

**onClick**

Click handler. It can be used, for example,
        to add analytics and track who clicked in the anchor.

\`\`\`
function
\`\`\`

**reverse**

Whether an icon and label should be reversed so that the
        icon is at the end of the anchor.

\`\`\`
boolean
\`\`\`

**size**

The font size is typically driven by the components containing
this component. But, it can be adjusted directly via this size property,
typically when it is not contained in a 'Heading', 'Paragraph', or 'Text'.

\`\`\`
xsmall
small
medium
large
xlarge
xxlarge
string
\`\`\`

**as**

The DOM tag or react component to use for the element.

\`\`\`
string
function
\`\`\`
  
## Intrinsic element

\`\`\`
a
\`\`\`
## Theme
  
**anchor.color**

The color of the label text and icon strokes. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ light: '#1D67E3', dark: '#6194EB' }
\`\`\`

**anchor.fontWeight**

The font weight of the label. Expects \`number\`.

Defaults to

\`\`\`
600
\`\`\`

**anchor.textDecoration**

The text decoration of the label. 
Refer to [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)
for possible values. Expects \`string\`.

Defaults to

\`\`\`
none
\`\`\`

**anchor.hover.fontWeight**

The font weight of the label when hovering. Expects \`number\`.

Defaults to

\`\`\`
undefined
\`\`\`

**anchor.hover.textDecoration**

The text decoration of the label when hovering. 
Refer to [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration)
for possible values. Expects \`string\`.

Defaults to

\`\`\`
underline
\`\`\`

**anchor.hover.extend**

Any additional style for the Anchor when hovering. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**anchor.extend**

Any additional style for the Anchor. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**text.medium.size**

The font size of the text label. Expects \`string\`.

Defaults to

\`\`\`
18px
\`\`\`

**text.medium.height**

The line height of the text label. Expects \`string\`.

Defaults to

\`\`\`
24px
\`\`\`

**global.focus.border.color**

The border color of the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
focus
\`\`\`

**global.focus.outline.color**

The outline color around the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.focus.outline.size**

The size of the outline around the component when in focus. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.focus.shadow.color**

The shadow color around the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
focus
\`\`\`

**global.focus.shadow.size**

The size of the shadow around the component when in focus. Expects \`string\`.

Defaults to

\`\`\`
2px
\`\`\`

**global.edgeSize**

The possible sizes for margin. Expects \`object\`.

Defaults to

\`\`\`
{
    edgeSize: {
      none: '0px',
      hair: '1px',
      xxsmall: '3px',
      xsmall: '6px',
      small: '12px',
      medium: '24px',
      large: '48px',
      xlarge: '96px',
      responsiveBreakpoint: 'small',
    },
  }
\`\`\`
",
  "Avatar": "## Avatar
An Avatar.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Avatar&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/avatar&module=%2Fsrc%2FAvatar.js)
## Usage

\`\`\`javascript
import { Avatar } from 'grommet';
<Avatar/>
\`\`\`

## Properties

**size**

A fixed size. Defaults to \`medium\`.

\`\`\`
xsmall
small
medium
large
xlarge
string
\`\`\`

**src**

Specifies a URL string for an avatar image.

\`\`\`
string
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`
## Theme
  
**avatar.extend**

Any additional style for the Avatar. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**avatar.size.xsmall**

The xsmall size of the Avatar. Expects \`string\`.

Defaults to

\`\`\`
18px
\`\`\`

**avatar.size.small**

The small size of the Avatar. Expects \`string\`.

Defaults to

\`\`\`
24px
\`\`\`

**avatar.size.medium**

The medium size of the Avatar. Expects \`string\`.

Defaults to

\`\`\`
48px
\`\`\`

**avatar.size.large**

The large size of the Avatar. Expects \`string\`.

Defaults to

\`\`\`
72px
\`\`\`

**avatar.size.xlarge**

The xlarge size of the Avatar. Expects \`string\`.

Defaults to

\`\`\`
96px
\`\`\`

**avatar.text.extend**

Any additional style for the text. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**avatar.text.fontWeight**

The font weight of the label. Expects \`number\`.

Defaults to

\`\`\`
undefined
\`\`\`
",
  "Box": "## Box
A container that lays out its contents in one direction. Box
      provides CSS flexbox capabilities for layout, as well as general
      styling of things like background color, border, and animation.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Box&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/box&module=%2Fsrc%2FBox.js)
## Usage

\`\`\`javascript
import { Box } from 'grommet';
<Box />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**align**

How to align the contents along the cross axis.

\`\`\`
start
center
end
baseline
stretch
\`\`\`

**alignContent**

How to align the contents when there is extra space in
        the cross axis. Defaults to \`stretch\`.

\`\`\`
start
center
end
between
around
stretch
\`\`\`

**animation**

Animation effect(s) to use. 'duration' and 'delay' should
        be in milliseconds. 'jiggle' and 'pulse' types are intended for
        small elements, like icons.

\`\`\`
fadeIn
fadeOut
jiggle
pulse
rotateLeft
rotateRight
slideUp
slideDown
slideLeft
slideRight
zoomIn
zoomOut
{
  type: 
    fadeIn
    fadeOut
    jiggle
    pulse
    rotateLeft
    rotateRight
    slideUp
    slideDown
    slideLeft
    slideRight
    zoomIn
    zoomOut,
  delay: number,
  duration: number,
  size: 
    xsmall
    small
    medium
    large
    xlarge
}
[
  fadeIn
  fadeOut
  jiggle
  pulse
  rotateLeft
  rotateRight
  slideUp
  slideDown
  slideLeft
  slideRight
  zoomIn
  zoomOut
  {
    type: 
      fadeIn
      fadeOut
      jiggle
      pulse
      rotateLeft
      rotateRight
      slideUp
      slideDown
      slideLeft
      slideRight
      zoomIn
      zoomOut,
    delay: number,
    duration: number,
    size: 
      xsmall
      small
      medium
      large
      xlarge
  }
]
\`\`\`

**background**

Either a color 
identifier to use for the background color. For example: 'neutral-1'. Or, a 
'url()' for an image. Dark is not needed if color is provided.

\`\`\`
string
{
  color: 
    string
    {
      dark: string,
      light: string
    },
  dark: 
    boolean
    string,
  image: string,
  position: string,
  opacity: 
    string
    boolean
    number
    weak
    medium
    strong,
  repeat: 
    no-repeat
    repeat
    string,
  size: 
    cover
    contain
    string,
  light: string
}
\`\`\`

**basis**

A fixed or relative size along its container's main axis.

\`\`\`
xxsmall
xsmall
small
medium
large
xlarge
xxlarge
full
1/2
1/3
2/3
1/4
2/4
3/4
auto
string
\`\`\`

**border**

Include a border. 'between' will place a border in the gap between
      child elements. You must have a 'gap' to use 'between'.

\`\`\`
boolean
top
left
bottom
right
start
end
horizontal
vertical
all
between
{
  color: 
    string
    {
      dark: string,
      light: string
    },
  side: 
    top
    left
    bottom
    right
    start
    end
    horizontal
    vertical
    all
    between,
  size: 
    xsmall
    small
    medium
    large
    xlarge
    string,
  style: 
    solid
    dashed
    dotted
    double
    groove
    ridge
    inset
    outset
    hidden
}
[{
  color: 
    string
    {
      dark: string,
      light: string
    },
  side: 
    top
    left
    bottom
    right
    start
    end
    horizontal
    vertical
    all
    between,
  size: 
    xsmall
    small
    medium
    large
    xlarge
    string,
  style: 
    solid
    dashed
    dotted
    double
    groove
    ridge
    inset
    outset
    hidden
}]
\`\`\`

**direction**

The orientation to layout the child components in. Defaults to \`column\`.

\`\`\`
row
column
row-responsive
row-reverse
column-reverse
\`\`\`

**elevation**

Elevated height above the underlying context, indicated
        via a drop shadow. Defaults to \`none\`.

\`\`\`
none
xsmall
small
medium
large
xlarge
string
\`\`\`

**flex**

Whether flex-grow and/or flex-shrink is true and at a desired factor.

\`\`\`
grow
shrink
boolean
{
  grow: number,
  shrink: number
}
\`\`\`

**fill**

Whether the width and/or height should fill the container.

\`\`\`
horizontal
vertical
boolean
\`\`\`

**focusIndicator**

When interactive via 'onClick', whether it should receive a focus
        outline. Defaults to \`true\`.

\`\`\`
boolean
\`\`\`

**gap**

The amount of spacing between child elements. This
        should not be used in conjunction with 'wrap' as the gap elements
        will not wrap gracefully. If a child is a Fragment,
        Box will not add a gap between the choldren of the Fragment.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
string
\`\`\`

**height**

A fixed height.

\`\`\`
xxsmall
xsmall
small
medium
large
xlarge
xxlarge
string
{
  min: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    xxlarge
    string,
  max: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    xxlarge
    string
}
\`\`\`

**hoverIndicator**

When 'onClick' has been specified, the hover indicator to apply
        when the user is mousing over the box.

\`\`\`
boolean
string
background
{
  color: string,
  dark: 
    boolean
    string,
  image: string,
  light: string,
  position: string,
  opacity: 
    string
    boolean
    number
    weak
    medium
    strong,
  repeat: 
    no-repeat
    repeat
    string,
  size: 
    cover
    contain
    string
}
\`\`\`

**justify**

How to align the contents along the main axis. Defaults to \`stretch\`.

\`\`\`
around
between
center
end
evenly
start
stretch
\`\`\`

**onClick**

Click handler. Setting this property adds additional attributes to
      the DOM for accessibility.

\`\`\`
function
\`\`\`

**overflow**

box overflow.

\`\`\`
auto
hidden
scroll
visible
{
  horizontal: 
    auto
    hidden
    scroll
    visible,
  vertical: 
    auto
    hidden
    scroll
    visible
}
string
\`\`\`

**pad**

The amount of padding around the box contents. An
    object can be specified to distinguish horizontal padding, vertical
    padding, and padding on a particular side of the box Defaults to \`none\`.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**responsive**

Whether margin, pad, and border
      sizes should be scaled for mobile environments. Defaults to \`true\`.

\`\`\`
boolean
\`\`\`

**round**

How much to round the corners.

\`\`\`
boolean
xsmall
small
medium
large
xlarge
full
string
{
  corner: 
    top
    left
    bottom
    right
    top-left
    top-right
    bottom-left
    bottom-right,
  size: 
    xsmall
    small
    medium
    large
    xlarge
    string
}
\`\`\`

**tag**

The DOM tag to use for the element. NOTE: This is deprecated in favor
of indicating the DOM tag via the 'as' property.

\`\`\`
string
function
\`\`\`

**as**

The DOM tag or react component to use for the element. Defaults to \`div\`.

\`\`\`
string
function
\`\`\`

**width**

A fixed width.

\`\`\`
xxsmall
xsmall
small
medium
large
xlarge
xxlarge
string
{
  min: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    xxlarge
    string,
  max: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    xxlarge
    string
}
\`\`\`

**wrap**

Whether children can wrap if they can't all fit.

\`\`\`
boolean
reverse
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`
## Theme
  
**global.animation**

The animation configuration for the Box. Expects \`object\`.

Defaults to

\`\`\`
{
  duration: '1s',
  jiggle: {
    duration: '0.1s',
  },
}
\`\`\`

**global.borderSize**

The possible border sizes in the Box. Expects \`object\`.

Defaults to

\`\`\`
{
  xsmall: '1px',
  small: '2px',
  medium: '4px',
  large: '12px',
  xlarge: '24px,
}
\`\`\`

**global.elevation**

The possible shadows in Box elevation. Expects \`object\`.

Defaults to

\`\`\`
{
  light: {
    none: 'none',
    xsmall: '0px 1px 2px rgba(100, 100, 100, 0.50)',
    small: '0px 2px 4px rgba(100, 100, 100, 0.50)',
    medium: '0px 3px 8px rgba(100, 100, 100, 0.50)',
    large: '0px 6px 12px rgba(100, 100, 100, 0.50)',
    xlarge: '0px 8px 16px rgba(100, 100, 100, 0.50)',
  },
  dark: {
    none: 'none',
    xsmall: '0px 2px 2px rgba(255, 255, 255, 0.40)',
    small: '0px 4px 4px rgba(255, 255, 255, 0.40)',
    medium: '0px 6px 8px rgba(255, 255, 255, 0.40)',
    large: '0px 8px 16px rgba(255, 255, 255, 0.40)',
    xlarge: '0px 10px 24px rgba(255, 255, 255, 0.40)',
  },
}
\`\`\`

**global.colors.border**

The color of the border Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: rgba(255, 255, 255, 0.33), light: rgba(0, 0, 0, 0.33), }
\`\`\`

**global.hover.background.color**

The color of the default background when hovering Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
active
\`\`\`

**global.hover.background.opacity**

The opacity of the default background when hovering Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
medium
\`\`\`

**global.hover.color**

The color of the default background when hovering Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: \\"white\\", light: \\"black\\" }
\`\`\`

**global.opacity.medium**

The value used when background opacity is set to true. Expects \`number\`.

Defaults to

\`\`\`
0.4
\`\`\`

**global.size**

The possible sizes for width, height, and basis. Expects \`object\`.

Defaults to

\`\`\`
{
  xxsmall: '48px',
  xsmall: '96px',
  small: '192px',
  medium: '384px',
  large: '768px',
  xlarge: '1152px',
  xxlarge: '1536px',
  full: '100%',
}
\`\`\`

**box.extend**

Any additional style for the Box. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**box.responsiveBreakpoint**

The actual breakpoint to trigger changes in the border, 
    direction, gap, margin, pad, and round. Expects \`string\`.

Defaults to

\`\`\`
small
\`\`\`

**global.edgeSize**

The possible sizes for any of gap, margin, and pad. Expects \`object\`.

Defaults to

\`\`\`
{
    edgeSize: {
      none: '0px',
      hair: '1px',
      xxsmall: '3px',
      xsmall: '6px',
      small: '12px',
      medium: '24px',
      large: '48px',
      xlarge: '96px',
      responsiveBreakpoint: 'small',
    },
  }
\`\`\`

**global.breakpoints**

The possible breakpoints that could affect border, direction, gap, margin, 
    pad, and round. Expects \`object\`.

Defaults to

\`\`\`
{
    small: {
      value: '768px',
      borderSize: {
        xsmall: '1px',
        small: '2px',
        medium: '4px',
        large: '6px',
        xlarge: '12px',
      },
      edgeSize: {
        none: '0px',
        hair: '1px',
        xxsmall: '2px',
        xsmall: '3px',
        small: '6px',
        medium: '12px',
        large: '24px',
        xlarge: '48px',
      },
      size: {
        xxsmall: '24px',
        xsmall: '48px',
        small: '96px',
        medium: '192px',
        large: '384px',
        xlarge: '768px',
        full: '100%',
      },
    },
    medium: {
      value: '1536px',
    },
    large: {},
  }
\`\`\`
",
  "Button": "## Button
A button.

You can provide a single function child that will be called with
      'hover' and 'focus' keys. This allows you to customize the rendering
      of the Button in those cases.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Button&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/button&module=%2Fsrc%2FButton.js)
## Usage

\`\`\`javascript
import { Button } from 'grommet';
<Button primary label='Label' />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**children**

Function that can be called to render the visual representation.
      Button can take in Children as a function, node, or object. 
      For example hover can be passed as an object that would 
      then return a react element.
      \`children={({ hover }) => <Box...>{...}</Box>}\`
      

\`\`\`
function
object
node
\`\`\`

**active**

Whether the button is active.

\`\`\`
boolean
\`\`\`

**as**

The DOM tag or react component to use for the element.

\`\`\`
string
function
\`\`\`

**color**

Fill color for primary, label color for plain, border color otherwise.

\`\`\`
string
{
  dark: string,
  light: string
}
\`\`\`

**disabled**

Whether the button is disabled.

\`\`\`
boolean
\`\`\`

**fill**

Whether the button expands to fill all of the available width and/or 
        height.

\`\`\`
horizontal
vertical
boolean
\`\`\`

**focusIndicator**

Whether when 'plain' it should receive a focus outline. Defaults to \`true\`.

\`\`\`
boolean
\`\`\`

**gap**

The amount of spacing between icon and label in the button. Defaults to \`small\`.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
string
\`\`\`

**hoverIndicator**

The hover indicator to apply when the user is mousing over the
button. An object can be also be specified for color index support:
{background: 'neutral-2'}. This prop is meant to be used only
with plain Buttons.

\`\`\`
boolean
string
background
{
  color: string,
  dark: 
    boolean
    string,
  image: string,
  light: string,
  position: string,
  opacity: 
    string
    boolean
    number
    weak
    medium
    strong,
  repeat: 
    no-repeat
    repeat
    string,
  size: 
    cover
    contain
    string
}
\`\`\`

**href**

If specified, the button will behave like an anchor tag.

\`\`\`
string
\`\`\`

**icon**

Icon element to place in the button.

\`\`\`
element
\`\`\`

**label**

Label text to place in the button.

\`\`\`
node
\`\`\`

**onClick**

Click handler. Not setting this property and not specifying a href
        causes the Button to be disabled.

\`\`\`
function
\`\`\`

**plain**

Whether this is a plain button with no border or pad.
          Non plain button will show both pad and border.
          The plain button has no border and unless the icon prop exist it has 
          no pad as well.

\`\`\`
boolean
\`\`\`

**primary**

Whether this is a primary button. There should be at most one per page
            or screen.

\`\`\`
boolean
\`\`\`

**reverse**

Whether an icon and label should be reversed so that the icon is at the
              end of the anchor.

\`\`\`
boolean
\`\`\`

**secondary**

Whether this is a secondary button.

\`\`\`
boolean
\`\`\`

**size**

The possible sizes of Button, that impacts the overall Button 
      padding, border radius, text size and line height. 
      'size' will not impact any icon related sizing.

\`\`\`
small
medium
large
\`\`\`

**target**

Specifies where to display the URL defined in the href property.

\`\`\`
_self
_blank
_parent
_top
string
\`\`\`

**type**

The type of button. Set the type to submit for the default button on 
                forms. Defaults to \`button\`.

\`\`\`
button
reset
submit
\`\`\`
  
## Intrinsic element

\`\`\`
button
\`\`\`
## Theme
  
**global.active.background.color**

The background color when using active prop. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
active
\`\`\`

**global.active.background.opacity**

The value used for active button background opacity. Expects \`number | string\`.

Defaults to

\`\`\`
medium
\`\`\`

**global.active.color**

The text color when using active prop. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: 'white', light: 'black' }
\`\`\`

**global.hover.background**

The background style when hovering. Expects \`string | { color: string, opacity: string }\`.

Defaults to

\`\`\`
{ color: 'active', opacity: 'medium' }
\`\`\`

**global.hover.color**

The text color when hovering. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: 'white', light: 'black' }
\`\`\`

**global.edgeSize.small**

The padding around an icon-only button. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
12px
\`\`\`

**global.colors.control**

The color of the border. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: 'accent-1', light: 'brand', }
\`\`\`

**global.colors.brand**

The light version of the border. Expects \`string\`.

Defaults to

\`\`\`
#7D4CDB
\`\`\`

**global.colors.text**

The color of the text label. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: '#f8f8f8', light: '#444444' }
\`\`\`

**text.medium.size**

The font size of the text label. Expects \`string\`.

Defaults to

\`\`\`
18px
\`\`\`

**text.medium.height**

The line height of the text label. Expects \`string\`.

Defaults to

\`\`\`
24px
\`\`\`

**button.active.background.color**

Background color when the button is active. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.active.border.color**

The border color when the button is active. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.active.color**

Label color when the button is active. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.active.extend**

Any additional style for an active Button. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.active.default**

Adjustments to the default Button style when the Button is active. Expects \`object\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.active.primary**

Adjustments to the primary Button style when the Button is active. Expects \`{}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.active.secondary**

Adjustments to the secondary Button style when the Button is active. Expects \`{}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.border.color**

The color of the border. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.border.radius**

The corner radius. Expects \`string\`.

Defaults to

\`\`\`
18px
\`\`\`

**button.border.width**

The border width. Expects \`string\`.

Defaults to

\`\`\`
2px
\`\`\`

**button.color**

The color of the text label. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.default.background.color**

The color of the background for default buttons. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.default.background.opacity**

The value used for default button background opacity. Expects \`number | string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.default.border.color**

The color of the border for default buttons. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.default.color**

The color of the label for default buttons. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.default.font.weight**

The weight of the text label for default buttons. Expects \`string | number\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.default.extend**

Any additional style for a default button. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.default.padding.horizontal**

The horizontal padding for a default button. Expects \`string\`.

Defaults to

\`\`\`
22px
\`\`\`

**button.default.padding.vertical**

The vertical padding for a default button. Expects \`string\`.

Defaults to

\`\`\`
4px
\`\`\`

**button.disabled.color**

Label color when the button is disabled. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.disabled.border.color**

The border color when the button is disabled. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.disabled.background.color**

Background color when the button is disabled. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.disabled.opacity**

The opacity when the button is disabled. Expects \`number\`.

Defaults to

\`\`\`
0.3
\`\`\`

**button.disabled.extend**

Any additional style for a disabled Button. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.disabled.default**

Adjustments to the default Button style when the Button is disabled. Expects \`{}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.disabled.primary**

Adjustments to the primary Button style when the Button is disabled. Expects \`{}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.disabled.secondary**

Adjustments to the secondary Button style when the Button is disabled. Expects \`{}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.hover.color**

Label color when the button is hovered. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.hover.border.color**

The border color when the button is hovered. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.hover.background.color**

Background color when the button is hovered. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.hover.extend**

Any additional style for a hovered Button. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.hover.default**

Adjustments to the default Button style when the Button is hovered. Expects \`{}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.hover.primary**

Adjustments to the primary Button style when the Button is hovered. Expects \`{}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.hover.secondary**

Adjustments to the secondary Button style when the Button is hovered. Expects \`{}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.padding.horizontal**

The horizontal padding. Expects \`string\`.

Defaults to

\`\`\`
22px
\`\`\`

**button.padding.vertical**

The vertical padding. Expects \`string\`.

Defaults to

\`\`\`
4px
\`\`\`

**button.primary.background.color**

The color of the background for primary buttons. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.primary.background.opacity**

The value used for primary button background opacity. Expects \`number | string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.primary.border.color**

The color of the border for primary buttons. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.primary.color**

The color of the label for primary buttons. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.primary.font.weight**

The weight of the text label for primary buttons. Expects \`string | number\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.primary.padding.horizontal**

The horizontal padding for a primary button. Expects \`string\`.

Defaults to

\`\`\`
22px
\`\`\`

**button.primary.padding.vertical**

The vertical padding for a primary button. Expects \`string\`.

Defaults to

\`\`\`
4px
\`\`\`

**button.primary.extend**

Any additional style for a primary button. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.secondary.background.color**

The color of the background for secondary buttons. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.secondary.background.opacity**

The value used for secondary button background opacity. Expects \`number | string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.secondary.border.color**

The color of the border for secondary buttons. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.secondary.color**

The color of the label for secondary buttons. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.secondary.font.weight**

The weight of the text label for secondary buttons. Expects \`string | number\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.secondary.padding.horizontal**

The horizontal padding for a secondary button. Expects \`string\`.

Defaults to

\`\`\`
22px
\`\`\`

**button.secondary.padding.vertical**

The vertical padding for a secondary button. Expects \`string\`.

Defaults to

\`\`\`
4px
\`\`\`

**button.secondary.extend**

Any additional style for a secondary button. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**button.size.small.border.radius**

The border corner radius. Expects \`string\`.

Defaults to

\`\`\`
18px
\`\`\`

**button.size.small.pad.horizontal**

The pad Expects \`string\`.

Defaults to

\`\`\`
20px
\`\`\`

**button.size.small.pad.vertical**

The pad Expects \`string\`.

Defaults to

\`\`\`
4px
\`\`\`

**button.size.medium.border.radius**

The border corner radius. Expects \`string\`.

Defaults to

\`\`\`
18px
\`\`\`

**button.size.medium.pad.horizontal**

The pad Expects \`string\`.

Defaults to

\`\`\`
22px
\`\`\`

**button.size.medium.pad.vertical**

The pad Expects \`string\`.

Defaults to

\`\`\`
4px
\`\`\`

**button.size.large.border.radius**

The border corner radius. Expects \`string\`.

Defaults to

\`\`\`
24px
\`\`\`

**button.size.large.pad.horizontal**

The pad Expects \`string\`.

Defaults to

\`\`\`
32px
\`\`\`

**button.size.large.pad.vertical**

The pad Expects \`string\`.

Defaults to

\`\`\`
8px
\`\`\`

**button.transition.duration**

The length of time it will take for the element to transition
between two states. Expects \`number\`.

Defaults to

\`\`\`
0.1
\`\`\`

**button.transition.properties**

The CSS properties you want to add the transition to. Expects \`string[]\`.

Defaults to

\`\`\`
['color', 'background-color', 'border-color', 'box-shadow']
\`\`\`

**button.transition.timing**

Describes how a transition will progress over one cycle of its
duration and allowing it to change speed during its course. Expects \`string\`.

Defaults to

\`\`\`
ease-in-out
\`\`\`

**button.extend**

Any additional style for the Button. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.focus.border.color**

The border color of the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
focus
\`\`\`

**global.focus.outline.color**

The outline color around the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.focus.outline.size**

The size of the outline around the component when in focus. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.focus.shadow.color**

The shadow color around the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
focus
\`\`\`

**global.focus.shadow.size**

The size of the shadow around the component when in focus. Expects \`string\`.

Defaults to

\`\`\`
2px
\`\`\`

**global.control.disabled.opacity**

The opacity when a component is disabled. Expects \`number\`.

Defaults to

\`\`\`
0.3
\`\`\`
",
  "Calendar": "## Calendar
A calendar of days displayed by month.
      It can be used to select a single date, a range of dates, or multiple
      individual dates.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Calendar&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/calendar&module=%2Fsrc%2FCalendar.js)
## Usage

\`\`\`javascript
import { Calendar } from 'grommet';
<Calendar />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**animate**

Whether to animate the calender as the user interacts with it. Defaults to \`true\`.

\`\`\`
boolean
\`\`\`

**bounds**

An array of two numbers indicating the limits on
        navigation in ISO8601 format

\`\`\`
[string]
\`\`\`

**date**

The selected date in ISO8601 format

\`\`\`
string
\`\`\`

**dates**

Multiple selected dates in ISO8601 format.
      Items that are an array indicate a range of dates.

\`\`\`
[
  string
  [string]
]
\`\`\`

**disabled**

Multiple dates in ISO8601 format that should not be
        selectable. Items that are an array indicate a range of dates.

\`\`\`
[
  string
  [string]
]
\`\`\`

**daysOfWeek**

Whether to show the days of the week.

\`\`\`
boolean
\`\`\`

**firstDayOfWeek**

The first day of the week. 0 for Sunday. 1 for Monday.

\`\`\`
0
1
\`\`\`

**header**

If specified, the entire calendar header will be managed by the caller.
The function passes the following options:

\`\`\`
  {
    date: Date,
    locale: string,
    onPreviousMonth: func,
    onNextMonth: func,
    previousInBound: bool,
    nextInBound: bool,
  }
\`\`\`

\`onPreviousMonth\` and \`onNextMonth\` are callbacks that will tell the 
calendar to move between months.
\`previousInBound\` and \`nextInBound\` are booleans that tell, when using 
\`bounds\`, if the current date is within that range. You can then use that 
to disable the previous and next buttons.


\`\`\`
function
\`\`\`

**locale**

The locale to use. Defaults to \`en-US\`.

\`\`\`
string
\`\`\`

**onReference**

Called with an ISO8601 date when the user navigates to a different
       month.

\`\`\`
function
\`\`\`

**onSelect**

Called with an ISO8601 date when
      the user selects a day.
      For single select, make this the subsequent \`date\` property value.
      For multiple select or ranges, toggle values in \`dates\`.
      Not specifying this property makes the component read only.

\`\`\`
function
\`\`\`

**range**

Whether to automatically manage multiple date selection as a range.
        When the user clicks the first date, onSelect will be called with that
        date. When the user selects another date, onSelect will be called with
        an array of two dates.

\`\`\`
boolean
\`\`\`

**reference**

The date to show if \`date\` isn't set, in ISO8601 format

\`\`\`
string
\`\`\`

**showAdjacentDays**

Whether to show the days from the previous and next months. Defaults to \`true\`.

\`\`\`
boolean
\`\`\`

**size**

What size to make it. Defaults to \`medium\`.

\`\`\`
small
medium
large
string
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`
## Theme
  
**calendar.day.extend**

Any additional style for the day of Calendar. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**calendar.extend**

Any additional style for the Calendar. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**calendar.heading.level**

The heading level used for the calendar. Expects \`number\`.

Defaults to

\`\`\`
4
\`\`\`

**calendar.icons.next**

The icon to use for the next month navigation control. Expects \`element\`.

Defaults to

\`\`\`
<Next />
\`\`\`

**calendar.icons.previous**

The icon to use for the previous month navigation control. Expects \`element\`.

Defaults to

\`\`\`
<Previous />
\`\`\`

**calendar.icons.small.next**

The icon to use for the next month navigation control when small. Expects \`element\`.

Defaults to

\`\`\`
<FormNext />
\`\`\`

**calendar.icons.small.previous**

The icon to use for the previous month navigation control when small. Expects \`element\`.

Defaults to

\`\`\`
<FormPrevious />
\`\`\`

**calendar.large.daySize**

The size of a day when large. Expects \`string\`.

Defaults to

\`\`\`
109.7px
\`\`\`

**calendar.large.fontSize**

The font size to use for days when large. Expects \`string\`.

Defaults to

\`\`\`
30px
\`\`\`

**calendar.large.lineHeight**

The line height to use for days when large. Expects \`number\`.

Defaults to

\`\`\`
1.11
\`\`\`

**calendar.large.slideDuration**

How long it animate the slide between months when large. Expects \`string\`.

Defaults to

\`\`\`
0.8s
\`\`\`

**calendar.medium.daySize**

The size of a day when medium. Expects \`string\`.

Defaults to

\`\`\`
54.84px
\`\`\`

**calendar.medium.fontSize**

The font size to use for days when medium. Expects \`string\`.

Defaults to

\`\`\`
18px
\`\`\`

**calendar.medium.lineHeight**

The line height to use for days when medium. Expects \`number\`.

Defaults to

\`\`\`
1.45
\`\`\`

**calendar.medium.slideDuration**

How long it animate the slide between months when medium. Expects \`string\`.

Defaults to

\`\`\`
0.5s
\`\`\`

**calendar.small.daySize**

The size of a day when small. Expects \`string\`.

Defaults to

\`\`\`
27.42px
\`\`\`

**calendar.small.fontSize**

The font size to use for days when small. Expects \`string\`.

Defaults to

\`\`\`
14px
\`\`\`

**calendar.small.lineHeight**

The line height to use for days when small. Expects \`number\`.

Defaults to

\`\`\`
1.375
\`\`\`

**calendar.small.slideDuration**

How long it animate the slide between months when small. Expects \`string\`.

Defaults to

\`\`\`
0.2s
\`\`\`

**global.size.small**

The width of the calendar when small. Expects \`string\`.

Defaults to

\`\`\`
192px
\`\`\`

**global.size.medium**

The width of the calendar when medium. Expects \`string\`.

Defaults to

\`\`\`
384px
\`\`\`

**global.size.large**

The width of the calendar when large. Expects \`string\`.

Defaults to

\`\`\`
768px
\`\`\`

**global.colors.icon**

The color of a given icon. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: #f8f8f8, light: #666666 }
\`\`\`

**global.edgeSize**

The possible sizes for margin. Expects \`object\`.

Defaults to

\`\`\`
{
    edgeSize: {
      none: '0px',
      hair: '1px',
      xxsmall: '3px',
      xsmall: '6px',
      small: '12px',
      medium: '24px',
      large: '48px',
      xlarge: '96px',
      responsiveBreakpoint: 'small',
    },
  }
\`\`\`
",
  "Card": "## Card
A Card.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Card&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/card&module=%2Fsrc%2FCard.js)
## Usage

\`\`\`javascript
import { Card } from 'grommet';
<Card/>
\`\`\`

## Properties

  
## Intrinsic element

\`\`\`
div
\`\`\`
## Theme
  
**card.container**

Any valid Box prop for the Card container. Expects \`object\`.

Defaults to

\`\`\`
{ round: 'small', elevation: 'small' }
\`\`\`

**card.header**

Any valid Box prop for the CardHeader. Expects \`object\`.

Defaults to

\`\`\`
[object Object]
\`\`\`

**card.body**

Any valid Box prop for the CardBody. Expects \`object\`.

Defaults to

\`\`\`
[object Object]
\`\`\`

**card.footer**

Any valid Box prop for the CardFooter container. Expects \`object\`.

Defaults to

\`\`\`
{ background: 'background-contrast' }
\`\`\`
",
  "CardBody": "## CardBody
The Card Body.


## Properties

  
## Intrinsic element

\`\`\`
div
\`\`\`",
  "CardFooter": "## CardFooter
The Card Footer. Works best as the latter sibling of CardBody or any 
      other flex container.


## Properties

  
## Intrinsic element

\`\`\`
div
\`\`\`",
  "CardHeader": "## CardHeader
The Card Header.


## Properties

  
## Intrinsic element

\`\`\`
div
\`\`\`",
  "Carousel": "## Carousel
A carousel that cycles through children. Child components
      would typically be Images. It is the caller's responsibility to ensure
      that all children are the same size.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Carousel&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/carousel&module=%2Fsrc%2FCarousel.js)
## Usage

\`\`\`javascript
import { Carousel } from 'grommet';
<Carousel />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**fill**

Whether to expand to fill
      all of the available width and height in the parent container.

\`\`\`
boolean
\`\`\`

**play**

If specified, the number of
      milliseconds between automatically transitioning to the next child. It
      will loop through all children indefinitely.

\`\`\`
number
\`\`\`

**initialChild**

If specified, the index of
      the first element to be shown. Defaults to 0.

\`\`\`
number
\`\`\`

**controls**

Whether to show carousel controls and which type of controls. Defaults to \`true\`.

\`\`\`
boolean
arrows
selectors
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`
## Theme
  
**carousel.icons.next**

The icon to use for the next image navigation control. Expects \`element\`.

Defaults to

\`\`\`
<Next />
\`\`\`

**carousel.animation.duration**

The duration of the Carousel animation. Expects \`number\`.

Defaults to

\`\`\`
1000
\`\`\`

**carousel.icons.previous**

The icon to use for the previous image navigation control. Expects \`element\`.

Defaults to

\`\`\`
<Previous />
\`\`\`

**carousel.icons.current**

The icon to use on the middle navigation control. 
      One icon per carousel image. Expects \`element\`.

Defaults to

\`\`\`
<Next />
\`\`\`

**carousel.icons.color**

The color used for Carousel icons. Expects \`string | { 'dark': string, 'light': string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**carousel.disabled.icons.color**

The color used for disabled Carousel icons. Expects \`string | { 'dark': string, 'light': string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.colors.icon**

The color of a given icon. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: #f8f8f8, light: #666666 }
\`\`\`

**global.edgeSize**

The possible sizes for margin. Expects \`object\`.

Defaults to

\`\`\`
{
    edgeSize: {
      none: '0px',
      hair: '1px',
      xxsmall: '3px',
      xsmall: '6px',
      small: '12px',
      medium: '24px',
      large: '48px',
      xlarge: '96px',
      responsiveBreakpoint: 'small',
    },
  }
\`\`\`
",
  "Chart": "## Chart
A graphical chart.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Chart&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/chart&module=%2Fsrc%2FChart.js)
## Usage

\`\`\`javascript
import { Chart } from 'grommet';
<Chart />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**animate**

Whether to animate drawing.

\`\`\`
boolean
\`\`\`

**bounds**

The limits for the values, specified as a two dimensional array. 
      The first array specifies the limits of the x-axis. The second array 
      specifies the limits of the y-axis. 
      For example: [[x-min, x-max], [y-min, y-max]].
      If not specified, the bounds will automatically be set to fit
      the provided values.

\`\`\`
[[number]]
\`\`\`

**color**

A color identifier to use for the graphic color. If an
      array is specified, it is used to create a gradient mask. Array objects
      indicate what color to show at what value. In the simplest case, the
      values should map to the Y bounds values, resulting in a vertical
      gradient. Specifying more objects allows more fine grained control over
      where the gradient colors change. Defaults to \`accent-1\`.

\`\`\`
string
{
  dark: string,
  light: string
}
{
  color: 
    string
    {
      dark: string,
      light: string
    },
  opacity: 
    weak
    medium
    strong
    boolean
}
[{
  color: 
    string
    {
      dark: string,
      light: string
    },
  value: number
}]
\`\`\`

**id**

A unique identifier for the Chart. This
      is required if more than one Chart is shown and they use color
      gradients.

\`\`\`
string
\`\`\`

**dash**

Whether to use dashed lines for line or bar charts.

\`\`\`
boolean
\`\`\`

**gap**

The amount of spacing between data points. This
      is only used when the size specifies width as 'auto'.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
string
\`\`\`

**onClick**

Called when the user clicks on the
     visualization. Clicking on individual bars or points are handled via
     values[].onClick for those types of charts.

\`\`\`
function
\`\`\`

**onHover**

Called with a boolean argument
      indicating when the user hovers onto or away from it.
      This is only available when the type is line or area.

\`\`\`
function
\`\`\`

**opacity**

What opacity to apply to the visuals. Supercedes 'color.opacity'

\`\`\`
weak
medium
strong
boolean
\`\`\`

**overflow**

Whether the chart strokes should overflow the component. Set this
      to true for precise positioning when stacking charts or including
      precise axes. Set this to false to have the graphical elements
      align with the component boundaries.

\`\`\`
boolean
\`\`\`

**pad**

Spacing around the outer edge of the drawing coordinate area.
      Related to 'overflow', this allows control over how much space
      is available for bars and points to overflow into. Defaults to \`none\`.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**point**

When using a 'point' type, what shape the points should use.
      If this property is not specified, points will be drawn as a square or
      a circle, based on how 'round' is specified.

\`\`\`
circle
diamond
square
star
triangle
triangleDown
\`\`\`

**round**

Whether to round the line ends.

\`\`\`
boolean
\`\`\`

**size**

The size of the Chart.
      'full' is deprecated as 'fill' is more consistent with how that term is
      used elsewhere. Defaults to \`{
  \\"width\\": \\"medium\\",
  \\"height\\": \\"small\\"
}\`.

\`\`\`
xxsmall
xsmall
small
medium
large
xlarge
fill
full
{
  height: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    fill
    full
    string,
  width: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    fill
    full
    auto
    string
}
string
\`\`\`

**thickness**

The width of the stroke. Defaults to \`medium\`.

\`\`\`
hair
xsmall
small
medium
large
xlarge
none
string
number
\`\`\`

**type**

The visual type of chart. Defaults to \`bar\`.

\`\`\`
bar
line
area
point
\`\`\`

**values**

Required. Array of value objects describing the data.
      'value' is a tuple indicating the coordinate of the value or a triple
      indicating the x coordinate and a range of two y coordinates.
      'label' is a text string describing it.
      'onHover' and 'onClick' only work when type='bar'.
      'color', 'opacity', and 'thickness' allow bar and point charts to have
      color variation per-value.

\`\`\`
[
  number
  [number]
  {
    color: 
      string
      {
        dark: string,
        light: string
      },
    label: string,
    onClick: function,
    onHover: function,
    opacity: 
      string
      number,
    thickness: 
      hair
      xsmall
      small
      medium
      large
      xlarge
      none
      string
      number,
    value: 
      number
      [number]
  }
]
\`\`\`
  
## Theme
  
**chart.color**

Color of the Chart. Expects \`string | {dark: string, light: string}\`.

Defaults to

\`\`\`
accent-1
\`\`\`

**chart.extend**

Any additional style for the Chart. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.colors**

Color options. Expects \`object\`.

Defaults to

\`\`\`
{
      \\"accent-1\\": \\"#6FFFB0\\",
      \\"graph-0\\": \\"accent-1\\",
      ...
    }
\`\`\`

**global.edgeSize**

The possible sizes for the thickness in the Chart. Expects \`object\`.

Defaults to

\`\`\`
{
        none: '0px',
        hair: '1px',
        xxsmall: '3px',
        xsmall: '6px',
        small: '12px',
        medium: '24px',
        large: '48px',
        xlarge: '96px',
        responsiveBreakpoint: 'small',
    }
\`\`\`

**global.opacity**

The opacity of the Chart stroke. Expects \`object\`.

Defaults to

\`\`\`
{
      strong: 0.8,
      medium: 0.4,
      weak: 0.1,
    }
\`\`\`

**global.size**

The possible sizes for Chart width and height. Expects \`object\`.

Defaults to

\`\`\`
{
      xxsmall: '48px',
      xsmall: '96px',
      small: '192px',
      medium: '384px',
      large: '768px',
      xlarge: '1152px',
      xxlarge: '1536px',
      full: '100%',
      }
\`\`\`
",
  "CheckBox": "## CheckBox
A checkbox toggle control.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=CheckBox&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/checkbox&module=%2Fsrc%2FCheckBox.js)
## Usage

\`\`\`javascript
import { CheckBox } from 'grommet';
<CheckBox />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers.
      When provided, an aria-label will be added to the element.

\`\`\`
string
\`\`\`

**checked**

Same as React <input checked={} />

\`\`\`
boolean
\`\`\`

**disabled**

Same as React <input disabled={} />. Also adds a hidden input element
      with the same name so form submissions work.

\`\`\`
boolean
\`\`\`

**id**

The DOM id attribute value to use for the underlying <input/> element.

\`\`\`
string
\`\`\`

**label**

Label text to place next to the control. 
      Can be used instead of a11yTitle to meet accessibility requirements

\`\`\`
node
\`\`\`

**name**

The DOM name attribute value to use for the underlying <input/> 
      element.

\`\`\`
string
\`\`\`

**onChange**

Function that will be called when the user clicks the check box. It
      will be passed a React event object. The current state can be accessed
      via event.target.checked. Same as React <input onChange={} />.

\`\`\`
function
\`\`\`

**reverse**

Whether to show the label in front of the checkbox.

\`\`\`
boolean
\`\`\`

**toggle**

Whether to visualize it as a toggle switch.

\`\`\`
boolean
\`\`\`

**indeterminate**

Whether state is indeterminate.
NOTE: This can only be used with non-toggle components

\`\`\`
boolean
\`\`\`
  
## Intrinsic element

\`\`\`
input
\`\`\`
## Theme
  
**checkBox.border.color**

The border color when unchecked. Expects \`string | { 'dark': string, 'light': string }\`.

Defaults to

\`\`\`
{ dark: 'rgba(255, 255, 255, 0.5)', light: 'rgba(0, 0, 0, 0.15)' }
\`\`\`

**checkBox.border.width**

The border width when unchecked. Expects \`string\`.

Defaults to

\`\`\`
2px
\`\`\`

**checkBox.check.extend**

Any additional style for checked CheckBox. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**checkBox.check.radius**

The radius of the checked icon. Expects \`string\`.

Defaults to

\`\`\`
4px
\`\`\`

**checkBox.check.thickness**

The stroke width of the checked icon. Expects \`string\`.

Defaults to

\`\`\`
4px
\`\`\`

**checkBox.color**

The stroke color for the CheckBox icon, and the border when checked. Expects \`string | { 'dark': string, 'light': string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**checkBox.extend**

Any additional style for CheckBox. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**checkBox.gap**

The right margin of the CheckBox to its label. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**checkBox.hover.border.color**

The border color on hover. Expects \`string | { 'dark': string, 'light': string }\`.

Defaults to

\`\`\`
{ dark: 'white', light: 'black' }
\`\`\`

**checkBox.icon.size**

The size of the checked icon. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**checkBox.icon.extend**

Any additional style for CheckBox icon. Expects \`string | (props)=>{}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**checkBox.icons.checked**

The icon to use when checked. Expects \`React.Element\`.

Defaults to

\`\`\`
undefined
\`\`\`

**checkBox.icons.indeterminate**

The icon to use when indeterminate. Expects \`React.Element\`.

Defaults to

\`\`\`
undefined
\`\`\`

**checkBox.size**

The height and width used for the CheckBox icon. Expects \`string\`.

Defaults to

\`\`\`
24px
\`\`\`

**checkBox.toggle.background**

The background color of the toggle. Expects \`string | { 'dark': string, 'light': string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**checkBox.toggle.color**

The color of the toggle knob. Expects \`string | { 'dark': string, 'light': string }\`.

Defaults to

\`\`\`
{ dark: '#d9d9d9', light: '#d9d9d9' }
\`\`\`

**checkBox.toggle.extend**

Any additional style for CheckBox toggle. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**checkBox.toggle.knob.extend**

Any additional style for the CheckBox toggle knob. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**checkBox.toggle.radius**

The border radius used for the toggle and the knob. Expects \`string\`.

Defaults to

\`\`\`
24px
\`\`\`

**checkBox.toggle.size**

The width size of the toggle. Expects \`string\`.

Defaults to

\`\`\`
48px
\`\`\`
",
  "CheckBoxGroup": "## CheckBoxGroup
A group of CheckBoxes.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=CheckBoxGroup&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/checkboxgroup&module=%2Fsrc%2FCheckBoxGroup.js)
## Usage

\`\`\`javascript
import { CheckBoxGroup } from 'grommet';
        <CheckBoxGroup />
\`\`\`

## Properties

**value**

An array of the values for the checked options. 
      If options is provided as an object, the value array will be the values 
     that the valueKey maps to.

\`\`\`
[
  number
  string
]
\`\`\`

**disabled**

Disables all options.

\`\`\`
boolean
\`\`\`

**labelKey**

When the options array contains objects, this property indicates how
        to determine the label of each option. If a string is
        provided, it is used as the key to retrieve each option's label.

\`\`\`
string
\`\`\`

**name**

Required when used in the Context of Form and FormField.

\`\`\`
string
\`\`\`

**onChange**

Function that will be called when the user clicks on a CheckBox option. 
      It will pass a React event object with the additional CheckBoxGroup 
      properties of 'option' and 'value'.

\`\`\`
function
\`\`\`

**options**

Required. Options can be either a string or an object of CheckBox props 
      excluding the 'checked' property, use CheckBoxGroup 'value' prop instead 
      of 'checked'.

\`\`\`
[string]
[{

}]
\`\`\`

**valueKey**

When the options array contains objects, this property indicates how
        to determine the value of each option. If a string is provided, 
        it is used as the key to retrieve each option's value.

\`\`\`
string
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`",
  "Clock": "## Clock
A clock with timezone awareness.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Clock&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/clock&module=%2Fsrc%2FClock.js)
## Usage

\`\`\`javascript
import { Clock } from 'grommet';
<Clock />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**hourLimit**

Whether to roll over the hours after 12 or after 24. Defaults to \`24\`.

\`\`\`
12
24
12
24
\`\`\`

**onChange**

If the clock is running, this function will be called with the
      current time value each time it changes.

\`\`\`
function
\`\`\`

**precision**

How precise a time to represent. Defaults to \`seconds\`.

\`\`\`
hours
minutes
seconds
\`\`\`

**run**

Whether the clock should actively adjust time or be fixed to the
      time specified. 'backward' could be used as a countdown timer. Defaults to \`forward\`.

\`\`\`
boolean
backward
forward
\`\`\`

**size**

Clock size Defaults to \`medium\`.

\`\`\`
small
medium
large
xlarge
string
\`\`\`

**time**

ISO8601 time or duration. For example: 'PT8H12M23S',
      'T08:12:23', or '2015-02-22T08:12:23'. Any included date
      portion will be ignored. If not provided, the
      current browser time will be used.

\`\`\`
string
\`\`\`

**type**

What type of visualization to show. Defaults to \`analog\`.

\`\`\`
analog
digital
\`\`\`
  
## Intrinsic element

\`\`\`
div,svg
\`\`\`
## Theme
  
**clock.analog.extend**

Any additional style for Clock. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**clock.analog.hour.color**

The color of the hour hand. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: light-2, light: dark-3 }
\`\`\`

**clock.analog.hour.shape**

The shape of the hour hand Expects \`string\`.

Defaults to

\`\`\`
round
\`\`\`

**clock.analog.hour.size**

The length of the hour hand. Expects \`string\`.

Defaults to

\`\`\`
24px
\`\`\`

**clock.analog.hour.width**

The thickness of the hour hand Expects \`string\`.

Defaults to

\`\`\`
8px
\`\`\`

**clock.analog.minute.color**

The color of the hour minute. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: light-4, light: dark-3 }
\`\`\`

**clock.analog.minute.shape**

The shape of the minute hand. Expects \`string\`.

Defaults to

\`\`\`
round
\`\`\`

**clock.analog.minute.size**

The length of the minute hand. Expects \`string\`.

Defaults to

\`\`\`
12px
\`\`\`

**clock.analog.minute.width**

The thickness of the minute hand. Expects \`string\`.

Defaults to

\`\`\`
4px
\`\`\`

**clock.analog.second.color**

The color of the seconds hand Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: accent-1, light: accent-1 }
\`\`\`

**clock.analog.second.shape**

The shape of the seconds hand. Expects \`string\`.

Defaults to

\`\`\`
round
\`\`\`

**clock.analog.second.size**

The length of the seconds hand. Expects \`string\`.

Defaults to

\`\`\`
10px
\`\`\`

**clock.analog.second.width**

The thickness of the seconds hand. Expects \`string\`.

Defaults to

\`\`\`
3px
\`\`\`

**clock.analog.size.medium**

The whole size of the Analog clock Expects \`string\`.

Defaults to

\`\`\`
96px
\`\`\`
",
  "Collapsible": "## Collapsible
Expand or collapse animation.

## Usage

\`\`\`javascript
import { Collapsible } from 'grommet';
<Collapsible open>test</Collapsible>
\`\`\`

## Properties

**open**

Whether or not the component should be open.

\`\`\`
boolean
\`\`\`

**direction**

Direction to animate the collapsible content. Defaults to \`vertical\`.

\`\`\`
horizontal
vertical
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`
## Theme
  
**collapsible.minSpeed**

The minimum speed of Collapsible animation in milliseconds. Expects \`number\`.

Defaults to

\`\`\`
200
\`\`\`

**collapsible.baseline**

Default height to be used to calculate the optimal collapsible speed. Expects \`number\`.

Defaults to

\`\`\`
500
\`\`\`

**collapsible.extend**

Any additional style for Collapsible. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`
",
  "DataChart": "## DataChart
Takes a data set and visualizes it. While Chart renders a
    single value across a data set. DataChart allows multiple overlayed
    Charts and adds guides and axes for decoration.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=DataChart&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/datachart&module=%2Fsrc%2FDataChart.js)
## Usage

\`\`\`javascript
import { DataChart } from 'grommet';
<DataChart data={data} property={} />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**axis**

Whether to show an axis and how it should look.
      If 'x' or 'y' is a string, it indicates the property to use
      to determine the values to show.
      If axis or 'x' is true, DataChart will look for a property called 'date'
      or 'time' and automatically use that for the x-axis. If DataChart
      can't find a property to use, it will use the data index for the x-axis.
      If axis or 'y' is true, DataChart will use the first property in 'series'.
      'granularity' indicates how many values to show.
      'coarse' granularity shows two values, one at each end.
      'fine' granularity shows all x-axis values and 5 y-axis values.
      'medium' granularity picks something in between. Defaults to \`true\`.

\`\`\`
boolean
{
  x: 
    boolean
    string
    {
      property: string,
      granularity: 
        coarse
        medium
        fine
    },
  y: 
    boolean
    string
    {
      property: string,
      granularity: 
        coarse
        medium
        fine
    }
}
\`\`\`

**bounds**

When set to 'align', indicates that the bounds of all series
      should be aligned. When not set, the bounds of each series
      property are based solely on the data found for that property. Defaults to \`align\`.

\`\`\`
align
\`\`\`

**chart**

How to visualize the data.
    'property' indicates which property of the data objects to use.
    When 'property' is an array, multiple properties are used for a
    stacked bar chart. If only a string is specified, that is the property
    to use and all other aspects are defaulted. If 'property' is an object,
    it specifies a map of properties to graphic aspects: x, y, color, thickness.
    If 'transform' is specified, it will be used to transform the data value
    before using it. For example, to convert a data value to a hex color
    string for the color.

\`\`\`
string
{
  property: 
    string
    [
      string
      {
        property: string,
        color: 
          string
          [{
  color: string,
  value: number
}]
      }
    ]
    {
      color: 
        string
        {
          property: string,
          transform: function
        },
      thickness: 
        string
        {
          property: string,
          transform: function
        },
      x: string,
      y: string
    },
  color: 
    string
    [{
  color: string,
  value: number
}],
  dash: boolean,
  opacity: 
    weak
    medium
    strong
    number
    boolean,
  point: 
    circle
    diamond
    square
    star
    triangle
    triangleDown,
  round: boolean,
  thickness: 
    hair
    xsmall
    small
    medium
    large
    xlarge
    none
    string,
  type: 
    bar
    bars
    line
    area
    point
}
[
  string
  {
    property: 
      string
      [
        string
        {
          property: string,
          color: 
            string
            [{
  color: string,
  value: number
}]
        }
      ]
      {
        color: 
          string
          {
            property: string,
            transform: function
          },
        thickness: 
          string
          {
            property: string,
            transform: function
          },
        x: string,
        y: string
      },
    color: 
      string
      [{
  color: string,
  value: number
}],
    dash: boolean,
    opacity: 
      weak
      medium
      strong
      number
      boolean,
    point: 
      circle
      diamond
      square
      star
      triangle
      triangleDown,
    round: boolean,
    thickness: 
      hair
      xsmall
      small
      medium
      large
      xlarge
      none
      string,
    type: 
      bar
      bars
      line
      area
      point
  }
]
\`\`\`

**data**

the data set

\`\`\`
[{

}]
\`\`\`

**detail**

Whether to add the ability to interact with the chart
      via mouse or keyboard to show details on specific values in the chart.
      It shows all properties specified in 'series', using any 'render'
      functions therein.

\`\`\`
boolean
\`\`\`

**gap**

The spacing between the axes and the Charts.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
string
\`\`\`

**guide**

Whether to put guidelines underneath the chart graphics.
    See the description of 'granularity' under 'axis'.

\`\`\`
boolean
{
  x: 
    boolean
    {
      granularity: 
        coarse
        medium
        fine
    },
  y: 
    boolean
    {
      granularity: 
        coarse
        medium
        fine
    }
}
\`\`\`

**legend**

Whether to include a legend

\`\`\`
boolean
\`\`\`

**pad**

Spacing around the outer edge of
    the drawing coordinate area for the graphic elements to overflow into. Defaults to \`none\`.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**series**

Describes which parts of the 'data' are of interest and
    how to handle them. 'property' indicates which property of the 'data'
    objects this series refers to. 'label' indicates how to label the series
    in a legend or hover details. 'prefix' and 'suffix' are applied to the
    data values shown in an axis, legend, or details. 'render' allows custom
    rendering of the data value. 'render' is called with:
    (value, datum, property) => { return < />; }

\`\`\`
string
{
  label: 
    string,
  prefix: string,
  property: string,
  render: function,
  suffix: string
}
[
  string
  {
    label: 
      string,
    prefix: string,
    property: string,
    render: function,
    suffix: string
  }
]
\`\`\`

**size**

The size of the Charts. This does not include the axes
      and any gap. It is passed through to the underlying Chart.

\`\`\`
fill
{
  height: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    fill
    string,
  width: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    fill
    auto
    string
}
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`",
  "DataTable": "## DataTable
A data driven table.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=DataTable&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/datatable&module=%2Fsrc%2FDataTable.js)
## Usage

\`\`\`javascript
import { DataTable } from 'grommet';
<DataTable />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**background**

Cell background. You can set the background per context by passing an
      object with keys for 'heading', 'body', and/or 'footer'. If you pass
      an array, rows will cycle between the array values.

\`\`\`
string
[string]
{
  header: 
    string
    {
      dark: string,
      light: string
    }
    [string],
  body: 
    string
    {
      dark: string,
      light: string
    }
    [string],
  footer: 
    string
    {
      dark: string,
      light: string
    }
    [string]
}
\`\`\`

**border**

Cell border. You can set the border per context by passing an
      object with keys for 'heading', 'body', and/or 'footer'.

\`\`\`
boolean
horizontal
vertical
top
bottom
left
right
{
  color: 
    string
    {
      dark: string,
      light: string
    },
  side: 
    horizontal
    vertical
    top
    bottom
    left
    right,
  size: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
{
  header: 
    boolean
    horizontal
    vertical
    top
    bottom
    left
    right
    {
      color: 
        string
        {
          dark: string,
          light: string
        },
      side: 
        horizontal
        vertical
        top
        bottom
        left
        right,
      size: 
        xxsmall
        xsmall
        small
        medium
        large
        xlarge
        string
    },
  body: 
    boolean
    horizontal
    vertical
    top
    bottom
    left
    right
    {
      color: 
        string
        {
          dark: string,
          light: string
        },
      side: 
        horizontal
        vertical
        top
        bottom
        left
        right,
      size: 
        xxsmall
        xsmall
        small
        medium
        large
        xlarge
        string
    },
  footer: 
    boolean
    horizontal
    vertical
    top
    bottom
    left
    right
    {
      color: 
        string
        {
          dark: string,
          light: string
        },
      side: 
        horizontal
        vertical
        top
        bottom
        left
        right,
      size: 
        xxsmall
        xsmall
        small
        medium
        large
        xlarge
        string
    }
}
\`\`\`

**columns**

A description of the data. The order controls the column order.
      'property' indicates which property in the data objects to associate
      the column with. 'header' indicates what to display in the column
      header. 'render' allows for custom rendering of body cells. Use 'render'
      for custom formatting for things like currency and date or to
      display rich content like Meters. 'align' indicates how the cells in
      the column are aligned. 'aggregate' indicates how the data in the
      column should be aggregated. This only applies to a footer or groupBy
      context. 'footer' indicates what should be shown in the footer for
      the column. 'search' indicates whether a search filter should be
      made available for the column. 'primary' indicates that this property
      should be used as the unique identifier, which gives the cell 'row' scope
      for accessibility. If 'primary' is not used for any column, and
      'primaryKey' isn't specified either, then the first column will be used.

\`\`\`
[{
  align: 
    center
    start
    end,
  aggregate: 
    avg
    max
    min
    sum,
  footer: 
    node
    {
      aggregate: boolean
    },
  header: 
    string
    node
    {
      aggregate: boolean
    },
  primary: boolean,
  property: string,
  render: function,
  search: boolean,
  sortable: boolean,
  size: 
    small
    medium
    large
    xlarge
    1/2
    1/4
    2/4
    3/4
    1/3
    2/3
    string,
  verticalAlign: 
    middle
    top
    bottom
}]
\`\`\`

**data**

Array of data objects.

\`\`\`
[{

}]
\`\`\`

**groupBy**

Property to group data by. If object is specified
      'property' is used to group data by, 'expand' accepts array of 
       group keys that sets expanded groups and 'onExpand' is a function
       that will be called after expand button is clicked with
       an array of keys of expanded groups.

\`\`\`
string
{
  property: string,
  expand: [string],
  onExpand: function
}
\`\`\`

**onMore**

Use this to indicate that 'data' doesn't contain all that it could.
      It will be called when all of the data rows have been rendered.
      This might be used when the total number of items that could be retrieved
      is more than you'd want to load into the browser. 'onMore' allows you
      to lazily fetch more from the server only when needed. This cannot
      be combined with properties that expect all data to be present in the
      browser, such as columns.search, sortable, groupBy, or 
      columns.aggregate.

\`\`\`
function
\`\`\`

**replace**

Whether to replace previously rendered items with a generic spacing
      element when they have scrolled out of view. This is more performant but
      means that in-page searching will not find elements that have been
      replaced.

\`\`\`
boolean
\`\`\`

**onClickRow**

When supplied, this function will be called with an event object that
      include a 'datum' property containing the data value associated with
      the clicked row. You should not include interactive elements, like
      Anchor or Button inside table cells as that can cause confusion with
      overlapping interactive elements.

\`\`\`
function
\`\`\`

**onSearch**

When supplied, and when at least one column has 'search' enabled,
      this function will be called with an object with keys for property
      names and values which are the search text strings. This is typically
      employed so a back-end can be used to search through the data.

\`\`\`
function
\`\`\`

**onSort**

When supplied, this function will be called with an object
      with a 'property' property that indicates which property
      is being sorted on and a 'direction' property that will either be
      'asc' or 'desc'. onSort={({ property, direction }) => {}}

\`\`\`
function
\`\`\`

**pad**

Cell padding. You can set the padding per context by passing an
      object with keys for 'heading', 'body', and/or 'footer'.

\`\`\`
xxsmall
xsmall
small
medium
large
xlarge
string
{
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
{
  header: custom,
  body: custom,
  footer: custom
}
\`\`\`

**primaryKey**

When supplied, indicates the property for a data object to use to
      get a unique identifier. See also the 'columns.primary' description.
      Use this property when the columns approach will not work for your
      data set. Setting primaryKey to false indicates there should be no
      unique identifier, avoid this as it's less accessible.

\`\`\`
string
boolean
\`\`\`

**resizeable**

Whether to allow the user to resize column widths.

\`\`\`
boolean
\`\`\`

**rowProps**

Row specific background, border, and pad, keyed by primary key value.
      For example:
      { \\"primary-key-value\\": { background: ..., border: ..., pad: ... }},
      where the background, border, and pad accept the same values as
      the same named properties on DataTable.

\`\`\`
{

}
\`\`\`

**size**

The height of the table body. If set, the table body will have a fixed
      height and the rows will be scrollable within it. In order to preserve
      header and footer cell alignment, all cells will have the same
      width. This cannot be used in combination with 'resizeable'.

\`\`\`
small
medium
large
xlarge
string
\`\`\`

**sort**

Which property to sort on and which direction to sort.

\`\`\`
{
  direction: 
    asc
    desc,
  property: string
}
\`\`\`

**sortable**

Whether to allow the user to sort columns.

\`\`\`
boolean
\`\`\`

**step**

How many items to render at a time. Defaults to \`50\`.

\`\`\`
number
\`\`\`
  
## Intrinsic element

\`\`\`
table
\`\`\`
## Theme
  
**global.hover.background**

The background style when hovering over an interactive row. Expects \`string | { color: string, opacity: string }\`.

Defaults to

\`\`\`
{ color: 'active', opacity: 'medium' }
\`\`\`

**global.hover.color**

The text color when hovering over an interactive row. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: 'white', light: 'black' }
\`\`\`

**dataTable.body.extend**

Any additional style for an DataTable Body Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**dataTable.groupHeader.background**

The background color of the group header. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: 'dark-2', light: 'light-2' }
\`\`\`

**dataTable.groupHeader.border.side**

The border side rendered for the group header. Expects \`string\`.

Defaults to

\`\`\`
bottom
\`\`\`

**dataTable.groupHeader.border.size**

The border size of the group header border. Expects \`string\`.

Defaults to

\`\`\`
xsmall
\`\`\`

**dataTable.groupHeader.fill**

Whether the height should fill the group header. Expects \`string\`.

Defaults to

\`\`\`
vertical
\`\`\`

**dataTable.groupHeader.pad**

The pad used for the group header. Expects \`string | object\`.

Defaults to

\`\`\`
{ horizontal: 'small', vertical: 'xsmall' }
\`\`\`

**dataTable.header**

Styles for the header. Expects \`object\`.

Defaults to

\`\`\`
{}
\`\`\`

**dataTable.icons.ascending**

The ascending icon. Expects \`React.Element\`.

Defaults to

\`\`\`
<FormDown />
\`\`\`

**dataTable.icons.contract**

The contract icon. Expects \`React.Element\`.

Defaults to

\`\`\`
<FormUp />
\`\`\`

**dataTable.icons.descending**

The descending icon. Expects \`React.Element\`.

Defaults to

\`\`\`
<FormUp />
\`\`\`

**dataTable.icons.expand**

The expand icon. Expects \`React.Element\`.

Defaults to

\`\`\`
<FormDown />
\`\`\`

**dataTable.primary.weight**

The font weight for primary cells. Expects \`string\`.

Defaults to

\`\`\`
bold
\`\`\`

**dataTable.resize.border.color**

The border color for resize. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
border
\`\`\`

**dataTable.resize.border.side**

The border side used for resize. Expects \`string\`.

Defaults to

\`\`\`
right
\`\`\`

**table.row.hover.background**

The background color when hovering over an interactive row. Expects \`string | { color: string, opacity: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**table.row.hover.color**

The text color when hovering over an interactive row. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`
",
  "DateInput": "## DateInput
A control to input a single date or a date range.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=DateInput&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/dateinput&module=%2Fsrc%2FDateInput.js)
## Usage

\`\`\`javascript
import { DateInput } from 'grommet';
<DateInput id='item' name='item' />
\`\`\`

## Properties

**buttonProps**

Any properties to pass on to the underlying DropButton
      when not inline and no format.

\`\`\`
{

}
\`\`\`

**calendarProps**

Any properties to pass on to the underlying Calendar.

\`\`\`
{

}
\`\`\`

**defaultValue**

The default date or date range value in ISO8601 format.

\`\`\`
string
[string]
\`\`\`

**dropProps**

Any properties to pass on to the underlying Drop when not inline. Defaults to \`{
  \\"align\\": {
    \\"top\\": \\"bottom\\",
    \\"left\\": \\"left\\"
  }
}\`.

\`\`\`
{

}
\`\`\`

**format**

The date format to use. If not specified, the date value will not
      be displayed as a text string and the user will not be able to enter
      a date by typing. For example: 'mm/dd/yyyy', or for a range:
      'mm/dd/yyyy-mm/dd/yyyy'. This property should be used when in a Form.

\`\`\`
string
\`\`\`

**id**

The id of the input.

\`\`\`
string
\`\`\`

**inline**

Whether the calendar should always be shown or via a Drop when
      interacting with the input.

\`\`\`
boolean
\`\`\`

**inputProps**

Any properties to pass on to the underlying MaskedInput
      when there is a format.

\`\`\`
{

}
\`\`\`

**name**

The name of the input.
      This property is required when used within FormField.

\`\`\`
string
\`\`\`

**onChange**

Function that will be called when the user types or selects a date.
      The updated value will be available via 'event.value'.

\`\`\`
function
\`\`\`

**value**

The date or date range value(s) in ISO8601 format.

\`\`\`
string
[string]
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`
## Theme
  
**dateInput.icon.size**

The size of the Calendar icon Expects \`string\`.

Defaults to

\`\`\`
24px
\`\`\`
",
  "Diagram": "## Diagram
Graphical connection lines. Diagram is meant to be used with Stack.
      Boxes can be used in the \`guidingChild\` layer of Stack and then
      Diagram can be used to draw lines connecting the Boxes.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Diagram&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/diagram&module=%2Fsrc%2FDiagram.js)
## Usage

\`\`\`javascript
import { Diagram } from 'grommet';
<Diagram />
\`\`\`

## Properties

**connections**

Required. Array of objects describing the connections.
      The 'fromTarget' and 'toTarget' may be either DOM element ids or
      React references.
      'offset' can be used to shift a bit to reduce the amount of overlap
      with other connection lines to make the lines easier to distinguish. Defaults to \`[]\`.

\`\`\`
[{
  anchor: 
    center
    vertical
    horizontal,
  color: 
    string
    {
      dark: string,
      light: string
    },
  fromTarget: 
    string
    object,
  label: string,
  offset: 
    xsmall
    small
    medium
    large
    string,
  thickness: 
    hair
    xxsmall
    xsmall
    small
    medium
    large
    string,
  toTarget: 
    string
    object,
  type: 
    direct
    curved
    rectilinear
}]
\`\`\`
  
## Intrinsic element

\`\`\`
svg
\`\`\`
## Theme
  
**diagram.extend**

Any additional style for Diagram. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**diagram.line.color**

The color of the connection line. Expects \`string | {dark: string, light: string}\`.

Defaults to

\`\`\`
accent-1
\`\`\`

**global.colors**

Color options. Expects \`object\`.

Defaults to

\`\`\`
{
      \\"accent-1\\": \\"#6FFFB0\\",
      \\"graph-0\\": \\"accent-1\\",
      \\"graph-1\\": \\"neutral-1\\",
      ...
    }
\`\`\`

**global.edgeSize**

The possible sizes for the connections thickness and offset. Expects \`object\`.

Defaults to

\`\`\`
{
        none: '0px',
        hair: '1px',
        xxsmall: '3px',
        xsmall: '6px',
        small: '12px',
        medium: '24px',
        large: '48px',
        xlarge: '96px',
        responsiveBreakpoint: 'small',
    }
\`\`\`
",
  "Distribution": "## Distribution
Proportionally sized grid of boxes. The proportions are approximate. The
      area given to each box isn't mathematically precise according to the
      ratio to the total values. Instead, the boxes are laid out in a
      manner that makes them more visually easy to scan. For example,
      two values of 48 and 52 will actually each get 50% of the area.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Distribution&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/distribution&module=%2Fsrc%2FDistribution.js)
## Usage

\`\`\`javascript
import { Distribution } from 'grommet';
<Distribution />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**basis**

A fixed or relative size along its container's main axis.

\`\`\`
xxsmall
xsmall
small
medium
large
xlarge
xxlarge
full
1/2
1/3
2/3
1/4
2/4
3/4
auto
string
\`\`\`

**children**

Function that will be called when each value is rendered. Defaults to \`function children(value) {
    return /*#__PURE__*/_react[\\"default\\"].createElement(_Box.Box, {
      fill: true,
      border: true
    }, /*#__PURE__*/_react[\\"default\\"].createElement(_Text.Text, null, value.value));
  }\`.

\`\`\`
function
\`\`\`

**fill**

Whether the distribution expands to fill all of the available width 
        and height.

\`\`\`
boolean
\`\`\`

**gap**

The amount of spacing between child elements. Defaults to \`xsmall\`.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
string
\`\`\`

**values**

Required. Array of objects containing a value. The array should already be
      sorted from largest to smallest value. The caller can put other
      properties in the object. The children function will be called to
      render the contents of each value. Defaults to \`[]\`.

\`\`\`
[{
  value: number
}]
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`",
  "Drop": "## Drop
A container that is overlaid next to a target.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Drop&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/drop&module=%2Fsrc%2FDrop.js)
## Usage

\`\`\`javascript
import { Drop } from 'grommet';
<Drop target={reference}>...</Drop>
\`\`\`

## Properties

**align**

How to align the drop with respect to the target element. Not 
        specifying a vertical or horizontal alignment will cause it to be 
        aligned in the center. Defaults to \`{
  \\"top\\": \\"top\\",
  \\"left\\": \\"left\\"
}\`.

\`\`\`
{
  top: 
    top
    bottom,
  bottom: 
    top
    bottom,
  right: 
    left
    right,
  left: 
    left
    right
}
\`\`\`

**onClickOutside**

Function that will be invoked when the user clicks outside the drop.

\`\`\`
function
\`\`\`

**onEsc**

Function that will be called when the user presses the escape key inside
       the drop.

\`\`\`
function
\`\`\`

**overflow**

How to control the overflow inside the drop. Defaults to \`auto\`.

\`\`\`
auto
hidden
scroll
visible
{
  horizontal: 
    auto
    hidden
    scroll
    visible,
  vertical: 
    auto
    hidden
    scroll
    visible
}
string
\`\`\`

**responsive**

Whether to dynamically re-place when resized. Defaults to \`true\`.

\`\`\`
boolean
\`\`\`

**restrictFocus**

Whether the drop should control focus.

\`\`\`
boolean
\`\`\`

**stretch**

Whether the drop element should be stretched to at least match the
      width of the target element. The default is true because
      that is what most uses of Drop want, like Select and Menu. Defaults to \`true\`.

\`\`\`
boolean
\`\`\`

**target**

Required. Target where the drop will be aligned to. This should be a React 
      reference.

\`\`\`
object
\`\`\`

**elevation**

Elevated height of the target, indicated via a drop shadow.

\`\`\`
none
xsmall
small
medium
large
xlarge
string
\`\`\`

**plain**

Whether the drop element should have no background nor shadow

\`\`\`
boolean
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`
## Theme
  
**drop.maxHeight**

The max height of the Drop container Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.drop.background**

The background color of Drop Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
#ffffff
\`\`\`

**global.drop.border.radius**

The corner radius Expects \`string\`.

Defaults to

\`\`\`
0px
\`\`\`

**global.drop.extend**

Any additional style for Drop. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.drop.shadowSize**

Elevated height of the Drop Expects \`string\`.

Defaults to

\`\`\`
small
\`\`\`

**global.drop.zIndex**

The stack order of the Drop Expects \`number\`.

Defaults to

\`\`\`
20
\`\`\`
",
  "DropButton": "## DropButton
A Button that controls a Drop. When opened, the Drop will contain
      whatever is specified via \`dropContent\`. The Drop will control the focus
      so that the contents behind it are not focusable. All properties and 
      theme properties of Button or Drop can be passed through.
      

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=DropButton&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/dropbutton&module=%2Fsrc%2FDropButton.js)
## Usage

\`\`\`javascript
import { DropButton } from 'grommet';
<DropButton dropContent={...} />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**disabled**

Whether the button should be disabled.

\`\`\`
boolean
\`\`\`

**dropAlign**

How to align the drop with respect to the button. Defaults to \`{
  \\"top\\": \\"top\\",
  \\"left\\": \\"left\\"
}\`.

\`\`\`
{
  top: 
    top
    bottom,
  bottom: 
    top
    bottom,
  right: 
    left
    right,
  left: 
    left
    right
}
\`\`\`

**dropContent**

Required. Content to put inside the Drop.

\`\`\`
element
\`\`\`

**dropTarget**

Target where the drop will be aligned to. This should be
      a React reference. Typically, this is not required as the drop will be
      aligned to the DropButton itself by default.

\`\`\`
object
\`\`\`

**dropProps**

Any valid Drop prop.

\`\`\`
object
\`\`\`

**onClose**

Callback for when the drop is closed

\`\`\`
function
\`\`\`

**onOpen**

Callback for when the drop is opened

\`\`\`
function
\`\`\`

**open**

Whether the drop should be open or not. Setting this property does not
      influence user interaction after it has been rendered.

\`\`\`
boolean
\`\`\`
  
## Intrinsic element

\`\`\`
button
\`\`\`",
  "Footer": "## Footer
Footer for a document or section

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Footer&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/footer&module=%2Fsrc%2FFooter.js)
## Usage

\`\`\`javascript
import { Footer } from 'grommet';
<Footer />
\`\`\`

## Properties

  ",
  "Form": "## Form
A form that manages state for its fields.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Form&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/form&module=%2Fsrc%2FForm.js)
## Usage

\`\`\`javascript
import { Form } from 'grommet';
<Form />
\`\`\`

## Properties

**errors**

An object representing any errors in the data. Their keys should
        match the keys in the value object. Defaults to \`{}\`.

\`\`\`
{

}
\`\`\`

**infos**

An object representing any information details in the data.
        Their keys should match the keys in the value object. Defaults to \`{}\`.

\`\`\`
{

}
\`\`\`

**messages**

Custom validation messages. Defaults to \`{
  \\"invalid\\": \\"invalid\\",
  \\"required\\": \\"required\\"
}\`.

\`\`\`
{
  invalid: string,
  required: string
}
\`\`\`

**onChange**

Function that will be called when any fields are updated.
      The fields must have a non-null \`name\` property assigned.

\`\`\`
function
\`\`\`

**onSubmit**

Function that will be called when the form is submitted. The
      single argument is an event containing the latest value object
      via \`event.value\` and an object indicating which fields were
      touched via \`event.touched\`.

\`\`\`
function
\`\`\`

**onReset**

Function that will be called when the form is reset. The
      single argument is the event provided by react.

\`\`\`
function
\`\`\`

**onValidate**

Function that will be called when the form is validated. The
      single argument is an event containing the latest error object
      via \`validationResults.errors\` and info object via 
      \`validationResults.infos\`.

\`\`\`
function
\`\`\`

**validate**

When to perform validation Defaults to \`submit\`.

\`\`\`
blur
submit
\`\`\`

**value**

An object representing all of the data in the form. Defaults to \`{}\`.

\`\`\`
{

}
\`\`\`
  
## Intrinsic element

\`\`\`
form
\`\`\`",
  "FormField": "## FormField
A single field in a form. FormField wraps an input component with
      a label, help, and/or error messaging. It typically contains an input
      control like TextInput, TextArea, Select, etc.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=FormField&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/formfield&module=%2Fsrc%2FFormField.js)
## Usage

\`\`\`javascript
import { FormField } from 'grommet';
<FormField />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers.
       Should only be provided if FormField has no children.
       When a11yTitle is provided an aria-label will be added to the element
       if it has no children.

\`\`\`
string
\`\`\`

**component**

The component to insert in the FormField. Grommet will add update the
      form values when this field changes. Any additional properties
      (such as initial value) you pass to FormField will be forwarded to this
      component. The component may be custom as long it supports the properties
      of name, value, onChange (event => {}), while event has either event.value
      or event.target.value.

\`\`\`
function
object
\`\`\`

**contentProps**

Any valid Box property. These
     properties are applied to the FormField contents container and will
     override properties from the theme.

\`\`\`
object
\`\`\`

**disabled**

Whether the field should look disabled.

\`\`\`
boolean
\`\`\`

**error**

Any error text describing issues with the field's value

\`\`\`
string
node
\`\`\`

**help**

Any help text describing how the field works

\`\`\`
string
node
\`\`\`

**htmlFor**

The id of the input element contained in this field

\`\`\`
string
\`\`\`

**info**

Any informational text regarding the field's value

\`\`\`
string
node
\`\`\`

**label**

A short label describing the field

\`\`\`
string
node
\`\`\`

**name**

The name of the value data when in a Form and the name of
      the input field.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**pad**

Whether to add padding to align with the padding of TextInput.

\`\`\`
boolean
\`\`\`

**required**

Whether the field is required.

\`\`\`
boolean
\`\`\`

**validate**

Validation rule when used within a grommet Form. Provide an object
      with a regular expression, a function, or an array of these. If a
      function is provided, it will be called with two arguments, the value
      for this field and the entire value object. This permits validation to
      encompass multiple fields. The function should return a string message
      describing the validation issue, if any, or an object with 'message'
      and 'status' properties.

\`\`\`
{
  regexp: new RegExp(...),
  message: 
    string
    node,
  status: 
    error
    info
}
function
[
  {
    regexp: new RegExp(...),
    message: 
      string
      node,
    status: 
      error
      info
  }
  function
]
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`
## Theme
  
**formField.border.color**

The border color. Expects \`string | { 'dark': string, 'light': string }\`.

Defaults to

\`\`\`
border
\`\`\`

**formField.border.error.color**

The border color of the error. Expects \`string | {'dark': string, 'light': string}\`.

Defaults to

\`\`\`
{ dark: 'white', light: 'status-critical' },
\`\`\`

**formField.border.position**

The border position. Expects \`string\`.

Defaults to

\`\`\`
inner
\`\`\`

**formField.border.side**

The border side of the FormField. Expects \`string\`.

Defaults to

\`\`\`
bottom
\`\`\`

**formField.content.margin**

The margin of the FormField content. Expects \`object\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.content.pad**

The pad of the FormField content. Expects \`object\`.

Defaults to

\`\`\`
small
\`\`\`

**formField.disabled.background.color**

The color of the FormField background when it is disabled. Expects \`string | {'dark': string, 'light': string}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.disabled.background.opacity**

The opacity of the FormField background when it is disabled. Expects \`string | boolean | number\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.disabled.border.color**

The color of the FormField border when it is disabled. Expects \`string | {'dark': string, 'light': string}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.disabled.label.color**

The color of the FormField label when it is disabled. Expects \`string | {'dark': string, 'light': string}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.error.background.color**

The color of the FormField background when there is an error. Expects \`string | {'dark': string, 'light': string}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.error.background.opacity**

The opacity of the FormField background when there is an error. Expects \`string | boolean | number\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.error.color**

The color of the FormField error. Expects \`string | {'dark': string, 'light': string}\`.

Defaults to

\`\`\`
status-critical
\`\`\`

**formField.error.margin**

The margin used for the FormField error. Expects \`string | object\`.

Defaults to

\`\`\`
{ vertical: 'xsmall', horizontal: 'small' }
\`\`\`

**formField.focus.background.color**

The color of the FormField background when it is in focus. Expects \`string | {'dark': string, 'light': string}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.focus.border.color**

The color of the FormField border when it is in focus. Expects \`string | {'dark': string, 'light': string}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.extend**

Any additional style for FormField. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.help.color**

The color of the FormField help. Expects \`string | {'dark': string, 'light': string}\`.

Defaults to

\`\`\`
{ dark: 'dark-3', light: 'dark-3' }
\`\`\`

**formField.help.margin**

The margin for the FormField help. Expects \`string | object\`.

Defaults to

\`\`\`
{ left: 'small' }
\`\`\`

**formField.info.color**

The color of the FormField info. Expects \`string | {'dark': string, 'light': string}\`.

Defaults to

\`\`\`
text-xweak
\`\`\`

**formField.info.margin**

The margin used for the FormField info. Expects \`string | object\`.

Defaults to

\`\`\`
{ vertical: 'xsmall', horizontal: 'small' }
\`\`\`

**formField.label**

Any props of Text that will be applied on the FormField label. Expects \`object\`.

Defaults to

\`\`\`
undefined
\`\`\`

**formField.label.margin**

The margin for the FormField label. Expects \`string | object\`.

Defaults to

\`\`\`
{ vertical: 'xsmall', horizontal: 'small' }
\`\`\`

**formField.margin**

The margin of FormField. Expects \`string | object\`.

Defaults to

\`\`\`
{ bottom: 'small' }
\`\`\`

**formField.round**

The rounding of the FormField. Expects \`boolean | string | object\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.borderSize**

The possible border sizes for FormField. Expects \`object\`.

Defaults to

\`\`\`
{
  xsmall: '1px',
  small: '2px',
  medium: '4px',
  large: '12px',
  xlarge: '24px,
}
\`\`\`
",
  "Grid": "## Grid
A grid system for laying out content. To use, define the
rows and columns, create area names for adjacent cells, and then
place Box components inside those areas using the gridArea property.
See https://css-tricks.com/snippets/css/complete-guide-grid/.
The availability of Grid can be tested via \`Grid.available\`. Use this
to create fallback rendering for older browsers, like ie11.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Grid&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/grid&module=%2Fsrc%2FGrid.js)
## Usage

\`\`\`javascript
import { Grid } from 'grommet';
<Grid />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**align**

How to align the individual items inside the grid when there is extra
space in the column axis. Defaults to \`stretch\`.

\`\`\`
start
center
end
stretch
\`\`\`

**alignContent**

How to align the contents along the column axis.

\`\`\`
start
center
end
between
around
stretch
\`\`\`

**areas**

Grid areas.
      Either area names and column,row coordinates.
      Or, an array of string arrays that specify named grid areas.

\`\`\`
[{
  name: string,
  start: [number],
  end: [number]
}]
[[string]]
\`\`\`

**columns**

Column sizes.
      If an array value is an array, the inner array indicates the
      minimum and maximum sizes for the column.
      Specifying a single string will repeat multiple columns
      of that size, as long as there is room for more.
      Specifying an object allows indicating how the columns
      stretch to fit the available space.

\`\`\`
[
  [
    xsmall
    small
    medium
    large
    xlarge
    full
    1/2
    1/3
    2/3
    1/4
    2/4
    3/4
    flex
    auto
    string
  ]
  xsmall
  small
  medium
  large
  xlarge
  full
  1/2
  1/3
  2/3
  1/4
  2/4
  3/4
  flex
  auto
  string
]
xsmall
small
medium
large
xlarge
{
  count: 
    fit
    fill
    number,
  size: 
    xsmall
    small
    medium
    large
    xlarge
    [xsmall
small
medium
large
xlarge
full
1/2
1/3
2/3
1/4
2/4
3/4
flex
auto]
    string
}
string
\`\`\`

**fill**

Whether the width and/or height should fill the container.

\`\`\`
horizontal
vertical
boolean
\`\`\`

**gap**

Gap sizes between rows and/or columns.

\`\`\`
xxsmall
xsmall
small
medium
large
xlarge
none
{
  row: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    none
    string,
  column: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    none
    string
}
string
\`\`\`

**justify**

How to align the individual items inside the grid when there is extra
space in the row axis. Defaults to \`stretch\`.

\`\`\`
start
center
end
stretch
\`\`\`

**justifyContent**

How to align the contents along the row axis.

\`\`\`
start
center
end
between
around
stretch
\`\`\`

**pad**

Spacing around the outer edge of
    the drawing coordinate area for the graphic elements to overflow into. Defaults to \`none\`.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**responsive**

Whether margin and pad sizes should be scaled for mobile
        environments. Defaults to \`true\`.

\`\`\`
boolean
\`\`\`

**rows**

Row sizes.
      If an array value is an array, the inner array indicates the
      minimum and maximum sizes for the row.
      Specifying a single string will cause automatically added rows to be
      the specified size.

\`\`\`
[
  [
    xsmall
    small
    medium
    large
    xlarge
    full
    1/2
    1/3
    2/3
    1/4
    2/4
    3/4
    flex
    auto
    string
  ]
  xsmall
  small
  medium
  large
  xlarge
  full
  1/2
  1/3
  2/3
  1/4
  2/4
  3/4
  flex
  auto
  string
]
xsmall
small
medium
large
xlarge
string
\`\`\`

**tag**

The DOM tag to use for the element. NOTE: This is deprecated
      in favor of indicating the DOM tag via the 'as' property.

\`\`\`
string
function
\`\`\`

**as**

The DOM tag or react component to use for the element. Defaults to \`div\`.

\`\`\`
string
function
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`
## Theme
  
**global.size**

The possible sizes for row and column. Expects \`object\`.

Defaults to

\`\`\`
{
      xxsmall: '48px',
      xsmall: '96px',
      small: '192px',
      medium: '384px',
      large: '768px',
      xlarge: '1152px',
      xxlarge: '1536px',
      full: '100%',
    }
\`\`\`

**grid.extend**

Any additional style for the Grid. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.edgeSize**

The possible sizes for the grid margin and gap. Expects \`object\`.

Defaults to

\`\`\`
{
    edgeSize: {
      none: '0px',
      hair: '1px',
      xxsmall: '3px',
      xsmall: '6px',
      small: '12px',
      medium: '24px',
      large: '48px',
      xlarge: '96px',
      responsiveBreakpoint: 'small',
    },
  }
\`\`\`
",
  "Grommet": "## Grommet
The top level Grommet container.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Grommet&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/grommet&module=%2Fsrc%2FGrommet.js)
## Usage

\`\`\`javascript
import { Grommet } from 'grommet';
<Grommet>...</Grommet>
\`\`\`

## Properties

**background**

Either a color 
identifier to use for the background color. For example: 'neutral-1'. Or, a 
'url()' for an image. Dark is not needed if color is provided.

\`\`\`
string
{
  color: 
    string
    {
      dark: string,
      light: string
    },
  dark: 
    boolean
    string,
  image: string,
  position: string,
  opacity: 
    string
    boolean
    number
    weak
    medium
    strong,
  repeat: 
    no-repeat
    repeat
    string,
  size: 
    cover
    contain
    string,
  light: string
}
\`\`\`

**dir**

Layout direction for right to left contexts

\`\`\`
rtl
\`\`\`

**full**

Whether to take the whole viewport.

\`\`\`
boolean
\`\`\`

**plain**

Whether or not Grommet should apply a global font-family, font-size,
        and line-height.

\`\`\`
boolean
\`\`\`

**cssVars**

Whether to expose the css variables.

\`\`\`
boolean
\`\`\`

**theme**

Custom styles for Grommet app component.

\`\`\`
object
\`\`\`

**themeMode**

Dark vs. light theme variation. Default is unspecified and left to
      theme.

\`\`\`
dark
light
\`\`\`

**userAgent**

User agent used to detect the device width for setting the initial
      breakpoint.

\`\`\`
string
\`\`\`

**containerTarget**

The node where Drop and Layer containers are inserted. Defaults to
      document.body which is almost always the right choice. This is used
      for less common cases like rendering within an internal node (e.g.
      shadow root).

\`\`\`
object
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`
## Theme
  
**grommet.extend**

Any additional style for Grommet. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.font.face**

Custom font face declaration Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`
",
  "Header": "## Header
Is a Box container for introductory content

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Header&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/header&module=%2Fsrc%2FHeader.js)
## Usage

\`\`\`javascript
import { Header } from 'grommet';
<Header />
\`\`\`

## Properties

  ",
  "Heading": "## Heading
Heading text structured in levels.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Heading&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/heading&module=%2Fsrc%2FHeading.js)
## Usage

\`\`\`javascript
import { Heading } from 'grommet';
<Heading />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**color**

A color identifier to use for the text color.

\`\`\`
string
{
  dark: string,
  light: string
}
\`\`\`

**level**

The heading level. It corresponds to the number after the 'H' for
the DOM tag. Set the level for semantic accuracy and accessibility.
The sizing can be further adjusted using the size property. Defaults to \`1\`.

\`\`\`
1
2
3
4
5
6
1
2
3
4
5
6
\`\`\`

**responsive**

Whether the font size should be scaled for
      mobile environments. Defaults to \`true\`.

\`\`\`
boolean
\`\`\`

**size**

The font size is primarily driven by the chosen tag. But, it can
be adjusted via this size property. The tag should be set for semantic
correctness and accessibility. This size property allows for stylistic
adjustments. Defaults to \`medium\`.

\`\`\`
small
medium
large
xlarge
string
\`\`\`

**textAlign**

How to align the text inside the heading. Defaults to \`start\`.

\`\`\`
start
center
end
\`\`\`

**truncate**

Restrict the text to a single line and truncate with ellipsis if it
is too long to all fit.

\`\`\`
boolean
\`\`\`
  
## Intrinsic element

\`\`\`
h1,h2,h3,h4
\`\`\`
## Theme
  
**global.breakpoints**

The possible breakpoints that could affect font-size and max-width Expects \`object\`.

Defaults to

\`\`\`
{
    small: {
      value: '768px',
      borderSize: {
        xsmall: '1px',
        small: '2px',
        medium: '4px',
        large: '6px',
        xlarge: '12px',
      },
      edgeSize: {
        none: '0px',
        hair: '1px',
        xxsmall: '2px',
        xsmall: '3px',
        small: '6px',
        medium: '12px',
        large: '24px',
        xlarge: '48px',
      },
      size: {
        xxsmall: '24px',
        xsmall: '48px',
        small: '96px',
        medium: '192px',
        large: '384px',
        xlarge: '768px',
        full: '100%',
      },
    },
    medium: {
      value: '1536px',
    },
    large: {},
  }
\`\`\`

**global.edgeSize**

The possible sizes for margin. Expects \`object\`.

Defaults to

\`\`\`
{
    edgeSize: {
      none: '0px',
      hair: '1px',
      xxsmall: '3px',
      xsmall: '6px',
      small: '12px',
      medium: '24px',
      large: '48px',
      xlarge: '96px',
      responsiveBreakpoint: 'small',
    },
  }
\`\`\`

**heading.extend**

Any additional style for Heading. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**heading.level**

The level that impacts line-height, max-width, font size, 
weight and family of the Heading. Heading styling is automatically adjusted at 
different screen sizes. When the heading.responsiveBreakpoint is hit (\\"small\\" 
by default), all heading styles will automatically be adjusted. A heading of 
level 1, for example, will use the styling defined in heading level 2; a 
heading of level 2 will use the styling defined in heading level 3 and so 
forth. The tag in the DOM is not adjusted. A heading of level 1 remains an h1. 
The styling adjustment is intended to aid readability on smaller screens but 
will not semantically affect your application structure. If you do not want 
this responsive styling to occur, you can set header.responsiveBreakpoint to 
undefined. Expects \`object\`.

Defaults to

\`\`\`

      1: {
        medium: {
          size: 34px,
          height: 40px,
          width: 826px,
        },
      },
      weight: 600,
      font:
        {
          family: undefined,
        }
\`\`\`

**heading.weight**

Default heading weight used unless a per level heading is defined. Expects \`number\`.

Defaults to

\`\`\`
600
\`\`\`

**heading.font**

Default heading font used unless a per level heading is defined. Expects \`object\`.

Defaults to

\`\`\`
undefined
\`\`\`

**heading.responsiveBreakpoint**

The breakpoint to trigger changes in the Heading layout. 
The actual values will be derived from global.breakpoints. Expects \`string\`.

Defaults to

\`\`\`
small
\`\`\`
",
  "Image": "## Image
An image.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Image&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/image&module=%2Fsrc%2FImage.js)
## Usage

\`\`\`javascript
import { Image } from 'grommet';
<Image/>
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**fill**

Whether the width and/or height should fill the container.

\`\`\`
horizontal
vertical
boolean
\`\`\`

**fit**

How the image fills its container.

\`\`\`
cover
contain
\`\`\`

**fallback**

Specifies the URL of the fallback image used when 
      src is failing to load

\`\`\`
string
\`\`\`

**opacity**

Transparency of the image.

\`\`\`
weak
medium
strong
string
boolean
\`\`\`
  
## Intrinsic element

\`\`\`
img
\`\`\`
## Theme
  
**global.opacity.medium**

The value used when opacity is set to true. Expects \`number\`.

Defaults to

\`\`\`
0.4
\`\`\`

**image.extend**

Any additional style for the Image. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`
",
  "InfiniteScroll": "## InfiniteScroll
A container that lazily renders items.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=InfiniteScroll&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/infinitescroll&module=%2Fsrc%2FInfiniteScroll.js)
## Usage

\`\`\`javascript
import { InfiniteScroll } from 'grommet';
<InfiniteScroll />
\`\`\`

## Properties

**children**

Function that will be called when each item is rendered. It will be
      called with three arguments, the item to render, the index of the item,
      and a ref that should be applied to the element. For example:
      {(item, index, ref) => <li key={index} ref={ref}>{item}</li>}

\`\`\`
function
\`\`\`

**items**

The children callback will be called to render each item.

\`\`\`
[any]
\`\`\`

**onMore**

Use this to indicate that 'items' doesn't contain all that it could.
      It will be called when the entire list of items has been rendered.
      This might be used when the total number of items that could be retrieved
      is more than you'd want to load into the browser. 'onMore' allows you
      to lazily fetch more from the server only when needed.

\`\`\`
function
\`\`\`

**renderMarker**

Function that will be called to render the marker element that
      is inserted into the DOM to track when scrolling nears the end of the
      rendered items. It will be called with a single element that should
      be wrapped appropriately. This is needed when the default
      element, a <span>, isn't sufficient, such as a row of a table body.

\`\`\`
function
\`\`\`

**replace**

Whether to replace previously rendered items with a generic spacing
      element when they have scrolled out of view. This is more performant but
      means that in-page searching will not find elements that have been
      replaced. In general, this should be set to true within Drop containers
      and false otherwise.

\`\`\`
boolean
\`\`\`

**scrollableAncestor**

A custom ancestor to determine if the marker is visible in it.
      This is useful in cases where you do not want the immediate
      scrollable ancestor to be the container. For example, when your
      marker is in a div that has overflow auto but you are detecting
      visibility based on the window.
      This should typically be a reference to a DOM node, but it will
      also work to pass it the string \\"window\\" if you are using server
      rendering.

\`\`\`
node
window
\`\`\`

**show**

Ensure that the item at this index is visible initially.

\`\`\`
number
\`\`\`

**step**

How many items to render at a time. Defaults to \`50\`.

\`\`\`
number
\`\`\`
  ",
  "Keyboard": "## Keyboard
A handler of keyboard key presses.

## Usage

\`\`\`javascript
import { Keyboard } from 'grommet';
<Keyboard onUp={() => {}} />
\`\`\`

## Properties

**target**

Where to listen for the keyboard presses. Defaults to \`component\`.

\`\`\`
component
document
\`\`\`

**onBackspace**

Function that will be called when the user presses the backspace key.

\`\`\`
function
\`\`\`

**onComma**

Function that will be called when the user presses the comma key.

\`\`\`
function
\`\`\`

**onDown**

Function that will be called when the user presses the down key.

\`\`\`
function
\`\`\`

**onEnter**

Function that will be called when the user presses the enter key.

\`\`\`
function
\`\`\`

**onEsc**

Function that will be called when the user presses the esc key.

\`\`\`
function
\`\`\`

**onKeyDown**

Function that will be called when the user presses any key.

\`\`\`
function
\`\`\`

**onLeft**

Function that will be called when the user presses the left key.

\`\`\`
function
\`\`\`

**onRight**

Function that will be called when the user presses the right key.

\`\`\`
function
\`\`\`

**onShift**

Function that will be called when the user presses the shift key.

\`\`\`
function
\`\`\`

**onSpace**

Function that will be called when the user presses the space key.

\`\`\`
function
\`\`\`

**onTab**

Function that will be called when the user presses the tab key.

\`\`\`
function
\`\`\`

**onUp**

Function that will be called when the user presses the up key.

\`\`\`
function
\`\`\`
  ",
  "Layer": "## Layer
An overlay. Layer is typically modal and anchored to an edge, corner, or
      center of the window. It is the caller's responsibility to provide a
      control for the user to close the layer.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Layer&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/layer&module=%2Fsrc%2FLayer.js)
## Usage

\`\`\`javascript
import { Layer } from 'grommet';
<Layer />
\`\`\`

## Properties

**animate**

Whether to animate the Layer content when it opens. This
        property is deprecated and will be removed in the next major version
        of grommet. Instead, use 'animation'. Defaults to \`true\`.

\`\`\`
boolean
\`\`\`

**animation**

Animation transition of the Layer content when it opens and closes. Defaults to \`slide\`.

\`\`\`
slide
fadeIn
none
boolean
\`\`\`

**full**

Whether the width and/or height should fill the current viewport 
        size.

\`\`\`
boolean
vertical
horizontal
\`\`\`

**margin**

The amount of margin around the Layer. An object can be specified to
distinguish horizontal margin, vertical margin, and margin on a
particular side of the layer

\`\`\`
none
xxsmall
xsmall
small
medium
large
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    string
}
string
\`\`\`

**modal**

Whether there should be an overlay preventing interaction underneath 
        the layer. Defaults to \`true\`.

\`\`\`
boolean
\`\`\`

**onClickOutside**

Function that will be invoked on modal layers when the user clicks 
      outside the layer.

\`\`\`
function
\`\`\`

**onEsc**

Function that will be called when the user presses the escape key inside
       the layer.

\`\`\`
function
\`\`\`

**plain**

Whether this is a plain Layer with no background color or border.

\`\`\`
boolean
\`\`\`

**position**

Position of the layer content. Defaults to \`center\`.

\`\`\`
bottom
bottom-left
bottom-right
center
end
hidden
left
right
start
top
top-left
top-right
\`\`\`

**responsive**

Whether the layer should take full width and height on mobile Defaults to \`true\`.

\`\`\`
boolean
\`\`\`

**target**

Target where the layer will be aligned to. This should be a React 
      reference.

\`\`\`
object
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`
## Theme
  
**global.size.xxsmall**

The minimal height of the Layer. Expects \`string\`.

Defaults to

\`\`\`
48px
\`\`\`

**layer.background**

The background color of the Layer Container. Expects \`string\`.

Defaults to

\`\`\`
white
\`\`\`

**layer.container.zIndex**

The stack order of Layer Container. Expects \`number\`.

Defaults to

\`\`\`
15
\`\`\`

**layer.extend**

Any additional style for Layer. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**layer.overlay.background**

The background of the Layer overlay. Expects \`string\`.

Defaults to

\`\`\`
rgba(0, 0, 0, 0.5)
\`\`\`

**layer.responsiveBreakpoint**

The actual breakpoint to trigger changes in the border, 
direction, gap, margin, pad, and round. Expects \`string\`.

Defaults to

\`\`\`
small
\`\`\`

**layer.zIndex**

The stack order of Layer. Expects \`number\`.

Defaults to

\`\`\`
10
\`\`\`

**global.breakpoints**

The possible breakpoints that could affect border, direction, gap, margin, 
    pad, and round. Expects \`object\`.

Defaults to

\`\`\`
{
    small: {
      value: '768px',
      borderSize: {
        xsmall: '1px',
        small: '2px',
        medium: '4px',
        large: '6px',
        xlarge: '12px',
      },
      edgeSize: {
        none: '0px',
        hair: '1px',
        xxsmall: '2px',
        xsmall: '3px',
        small: '6px',
        medium: '12px',
        large: '24px',
        xlarge: '48px',
      },
      size: {
        xxsmall: '24px',
        xsmall: '48px',
        small: '96px',
        medium: '192px',
        large: '384px',
        xlarge: '768px',
        full: '100%',
      },
    },
    medium: {
      value: '1536px',
    },
    large: {},
  }
\`\`\`
",
  "List": "## List
An ordered list of items.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=List&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/list&module=%2Fsrc%2FList.js)
## Usage

\`\`\`javascript
import { List } from 'grommet';
<List data={[...]} />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**action**

Accepts a function that allows for a custom rendering
       of a component, it should be passed with an item and
        index of an array and return a react element
      \`action = ({item, index}) => <Content />\`
    />

\`\`\`
function
\`\`\`

**as**

The DOM tag or react component to use for the element. Defaults to \`ul\`.

\`\`\`
string
\`\`\`

**background**

Item background. An array value indicates that items should have
      different backgrounds, modulo the array index.

\`\`\`
string
[string]
\`\`\`

**border**

Item border.

\`\`\`
boolean
horizontal
vertical
top
bottom
left
right
start
end
{
  color: 
    string
    {
      dark: string,
      light: string
    },
  side: 
    horizontal
    vertical
    top
    bottom
    left
    right
    start
    end,
  size: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
\`\`\`

**data**

Array of data objects.

\`\`\`
[
  string
  {

  }
]
\`\`\`

**children**

Function that will be called when each data item is rendered.
      It will be passed three arguments, the individual data item, its index,
      and an object indicating the state of the item, if any. It
      should return a react element.
      For example:
      \`children={(item, index, { active }) => <Box ...>{...}</Box>}\`
      

\`\`\`
function
\`\`\`

**itemProps**

Item specific background, border, and pad, keyed by data index.
      For example:
      { 27: { background: ..., border: ..., pad: ... }},
      where the background, border, and pad accept the same values as
      the same named properties on List.

\`\`\`
{

}
\`\`\`

**onMore**

Use this to indicate that 'data' doesn't contain all that it could.
      It will be called when all of the data items have been rendered.
      This might be used when the total number of items that could be retrieved
      is more than you'd want to load into the browser. 'onMore' allows you
      to lazily fetch more from the server only when needed.

\`\`\`
function
\`\`\`

**onClickItem**

When supplied, this function will be called with an event object that
      include a 'item' property containing the data value associated with
      the clicked item and an 'index' property containing the index in 'data'
      of the clicked item. You should not include interactive elements, like
      Anchor or Button inside 'primaryKey' or 'secondaryKey' as that can
      cause confusion with overlapping interactive elements.

\`\`\`
function
\`\`\`

**pad**

Item padding.

\`\`\`
xxsmall
xsmall
small
medium
large
xlarge
string
{
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge,
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
}
\`\`\`

**primaryKey**

When a string is supplied, it indicates the property in a data item
      object to use to get the primary content. If a function is supplied, it
      will be called with the current data item object and should return
      a React element that will be rendered as the primary content.

\`\`\`
string
function
\`\`\`

**secondaryKey**

When a string is supplied, it indicates the property in a data item
      object to use to get the secondary content. If a function is supplied, it
      will be called with the current data item object and should return
      a React element that will be rendered as the secondary content.

\`\`\`
string
function
\`\`\`

**step**

How many items to render at a time. Defaults to \`50\`.

\`\`\`
number
\`\`\`
  
## Intrinsic element

\`\`\`
ol
\`\`\`
## Theme
  
**global.hover.background**

The background style when hovering over an interactive item. Expects \`string | { color: string, opacity: string }\`.

Defaults to

\`\`\`
{ color: 'active', opacity: 'medium' }
\`\`\`

**global.hover.color**

The text color when hovering over an interactive item. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: 'white', light: 'black' }
\`\`\`

**list.extend**

Any additional style for the list. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**list.item.background**

Background color for list items. Expects \`string | [string]\`.

Defaults to

\`\`\`
undefined
\`\`\`

**list.item.border**

Border for list items. Expects \`boolean | string | object\`.

Defaults to

\`\`\`
horizontal
\`\`\`

**list.item.pad**

Border for list items. Expects \`boolean | string | object\`.

Defaults to

\`\`\`
{ horizontal: 'medium', vertical: 'small' }
\`\`\`

**list.item.extend**

Any additional style for the list items. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`
",
  "Main": "## Main
main content of a document.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Main&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/main&module=%2Fsrc%2FMain.js)
## Usage

\`\`\`javascript
import { Main } from 'grommet';
<Main />
\`\`\`

## Properties

  ",
  "Markdown": "## GrommetMarkdown
Markdown formatting using Grommet components.

Grommet uses 'markdown-to-jsx' in Markdown component,
      you can see all the options in the documentation.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Markdown&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/markdown&module=%2Fsrc%2FMarkdown.js)
## Usage

\`\`\`javascript
import { Markdown } from 'grommet';
      <Markdown>{content}</Markdown>
\`\`\`

## Properties

**components**

Custom components and props to override html elements such as 'img'
      or 'pre'. By default 'a', 'p', 'img', and table elements are overridden
      with grommet components

\`\`\`
{

}
\`\`\`

**options**

Used to tune the jsx compiler to specific properties, available options on [markdown-to-jsx](https://github.com/probablyup/markdown-to-jsx).

\`\`\`
{

}
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`",
  "MaskedInput": "## MaskedInput
An input field with formalized syntax.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=MaskedInput&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/maskedinput&module=%2Fsrc%2FMaskedInput.js)
## Usage

\`\`\`javascript
import { MaskedInput } from 'grommet';
<MaskedInput id='item' name='item' />
\`\`\`

## Properties

**a11yTitle**

Custom title to be used by screen readers.

\`\`\`
string
\`\`\`

**icon**

An optional icon to show. This could be used to provide an
      indication of what kind of input is expected, like an email icon,
      or what the input will be used for, like a search icon.

\`\`\`
element
\`\`\`

**id**

The id attribute of the input.

\`\`\`
string
\`\`\`

**name**

The name attribute of the input.

\`\`\`
string
\`\`\`

**onChange**

Function that will be called when the user types or pastes text.

\`\`\`
function
\`\`\`

**onBlur**

Function that will be called when the user leaves the field.

\`\`\`
function
\`\`\`

**mask**

Describes the structure of the mask. If a regexp is provided, it should
      allow both the final full string element as well as partial strings
      as the user types characters one by one.

\`\`\`
[{
  length: 
    number
    [number],
  fixed: string,
  options: [
  string
  number
],
  regexp: 
    {

    }
}]
\`\`\`

**reverse**

Whether an icon should be reversed so that the icon is at the
      end of the input.

\`\`\`
boolean
\`\`\`

**size**

The size of the text.

\`\`\`
small
medium
large
xlarge
string
\`\`\`

**value**

What text to put in the input. The caller should ensure that it
      is initially valid with respect to the mask.

\`\`\`
string
number
\`\`\`
  
## Intrinsic element

\`\`\`
input
\`\`\`
## Theme
  
**global.hover.background**

The background style when hovering. Expects \`string | { color: string, opacity: string }\`.

Defaults to

\`\`\`
{ color: 'active', opacity: 'medium' }
\`\`\`

**global.hover.color**

The text color when hovering. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: 'white', light: 'black' }
\`\`\`

**maskedInput.extend**

Any additional style for MaskedInput. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**text.medium**

The size of the text for MaskedInput. Expects \`string\`.

Defaults to

\`\`\`
18px
\`\`\`

**maskedInput.disabled.opacity**

The opacity when the MaskedInput is disabled. Expects \`number | string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.control.disabled.opacity**

The opacity when a component is disabled. Expects \`number\`.

Defaults to

\`\`\`
0.3
\`\`\`

**global.focus.border.color**

The border color of the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
focus
\`\`\`

**global.focus.outline.color**

The outline color around the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.focus.outline.size**

The size of the outline around the component when in focus. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.focus.shadow.color**

The shadow color around the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
focus
\`\`\`

**global.focus.shadow.size**

The size of the shadow around the component when in focus. Expects \`string\`.

Defaults to

\`\`\`
2px
\`\`\`

**global.colors.placeholder**

The placeholder color used for the component. Expects \`string\`.

Defaults to

\`\`\`
#AAAAAA
\`\`\`

**global.input.font.height**

The line-height of the text. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.input.font.size**

The size of the text. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.input.font.weight**

The font-weight of the text. This value will only be 
      applied if global.input.weight is undefined. Expects \`number | string\`.

Defaults to

\`\`\`
600
\`\`\`

**global.input.weight**

This value has been deprecated and replaced by 
      global.input.font.weight. Expects \`number | string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.input.padding**

The padding of the text. Expects \`string | { top: string, bottom: string, left: string, right: 
        string, horizontal: string, vertical: string }\`.

Defaults to

\`\`\`
12px
\`\`\`
",
  "Menu": "## Menu
A control that opens a Drop containing plain Buttons.

The labels and behavior of the contained Buttons are described
      via the \`items\` property.
      You can provide a single function child that will be called with
      'hover', 'focus', and 'drop' keys. This allows you to customize
      the rendering of the Menu button in those cases.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Menu&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/menu&module=%2Fsrc%2FMenu.js)
## Usage

\`\`\`javascript
import { Menu } from 'grommet';
<Menu />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**children**

Function that will be called to render the visual representation.
      It will be passed an object containing button props.
      It should return a react element.
      For example:
      \`children={({ drop, hover }) => <Box ...>{...}</Box>}\`
      

\`\`\`
function
\`\`\`

**disabled**

Whether the menu should be disabled.

\`\`\`
boolean
\`\`\`

**dropAlign**

Where to place the drop down.
The keys correspond to a side of the drop down.
The values correspond to a side of the control. For instance,
{left: 'left', top: 'bottom'} would align the left edges and the top of
the drop down to the bottom of the control. At most one of left or right and
one of top or bottom should be specified. Defaults to \`{
  \\"top\\": \\"top\\",
  \\"left\\": \\"left\\"
}\`.

\`\`\`
{
  top: 
    top
    bottom,
  bottom: 
    top
    bottom,
  left: 
    right
    left,
  right: 
    right
    left
}
\`\`\`

**dropBackground**

Background color when drop is active

\`\`\`
string
{
  color: string,
  opacity: 
    boolean
    number
    weak
    medium
    strong
}
\`\`\`

**dropTarget**

Target where the drop will be aligned to. This should be
      a React reference. Typically, this is not required as the drop will be
      aligned to the Menu itself by default.

\`\`\`
object
\`\`\`

**dropProps**

Any valid Drop prop. Defaults to \`{}\`.

\`\`\`
object
\`\`\`

**justifyContent**

How to align the contents along the row axis. Defaults to \`start\`.

\`\`\`
start
center
end
between
around
stretch
\`\`\`

**icon**

Indicates the icon shown as a control to open it.

\`\`\`
boolean
node
\`\`\`

**items**

Required. Menu items to be placed inside the drop down.
The object values can be any Button prop, 
for example: label, onClick, and href. Defaults to \`[]\`.

\`\`\`
[object]
\`\`\`

**label**

Indicates the label shown as a control to open it.

\`\`\`
string
node
\`\`\`

**messages**

Custom messages. Used for accessibility by screen readers. 
      These values will be overridden if an a11yTitle is provided. Defaults to \`{
  \\"openMenu\\": \\"Open Menu\\",
  \\"closeMenu\\": \\"Close Menu\\"
}\`.

\`\`\`
{
  closeMenu: string,
  openMenu: string
}
\`\`\`

**open**

Whether the state of the component should be open

\`\`\`
boolean
\`\`\`

**size**

The size of the menu. Defaults to \`medium\`.

\`\`\`
small
medium
large
xlarge
string
\`\`\`
  
## Intrinsic element

\`\`\`
button
\`\`\`
## Theme
  
**global.colors.control**

The default color to use for the icon. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: 'accent-1', light: 'brand'}
\`\`\`

**menu.icons.color**

The color to use for the icon. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
control
\`\`\`

**menu.background**

The color for the background of the menu Drop when it is open. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**menu.extend**

Any additional style for the Menu. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**menu.icons.down**

The icon to show to the right of the label when menu is 
    closed. Expects \`React.Element\`.

Defaults to

\`\`\`
<FormDown />
\`\`\`

**menu.icons.up**

The icon to show to the right of the label when menu is 
    opened. Expects \`undefined | React.Element\`.

Defaults to

\`\`\`
undefined
\`\`\`
",
  "Meter": "## Meter
A graphical meter.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Meter&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/meter&module=%2Fsrc%2FMeter.js)
## Usage

\`\`\`javascript
import { Meter } from 'grommet';
<Meter />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**background**

Background color Defaults to \`{
  \\"color\\": \\"light-2\\",
  \\"opacity\\": \\"medium\\"
}\`.

\`\`\`
string
{
  color: string,
  opacity: 
    weak
    medium
    strong
    number
    boolean
}
\`\`\`

**max**

The maximum value for the Meter.

\`\`\`
number
string
\`\`\`

**round**

Whether to round the line ends

\`\`\`
boolean
\`\`\`

**size**

The size of the Meter. Defaults to \`medium\`.

\`\`\`
xsmall
small
medium
large
xlarge
full
string
\`\`\`

**thickness**

The size of the Meter. Defaults to \`medium\`.

\`\`\`
xsmall
small
medium
large
xlarge
string
\`\`\`

**type**

The visual type of meter. Defaults to \`bar\`.

\`\`\`
bar
circle
\`\`\`

**values**

Array of value objects describing the data.
      'value' is the actual numeric value.
      'label' is a text string describing it.
      'color' indicates the color name to use. If not specified a default one
      will be chosen.
      'onClick' will be called when the user clicks on it.
      Set 'highlight' to call attention to it.
      'onHover' will be called with a boolean argument indicating when the
      user hovers onto or away from it.

\`\`\`
[{
  color: string,
  highlight: boolean,
  label: string,
  onClick: function,
  onHover: function,
  value: number
}]
\`\`\`
  
## Theme
  
**global.colors**

Color options. Expects \`object\`.

Defaults to

\`\`\`
{
      \\"accent-1\\": \\"#6FFFB0\\",
      \\"graph-0\\": \\"accent-1\\",
      ...
    }
\`\`\`

**global.edgeSize**

The border-radius of the styled Meter. thickness, height and 
    width of the Bar Meter, height of the Circle Meter. Expects \`object\`.

Defaults to

\`\`\`
{
        none: '0px',
        hair: '1px',
        xxsmall: '3px',
        xsmall: '6px',
        small: '12px',
        medium: '24px',
        large: '48px',
        xlarge: '96px',
        responsiveBreakpoint: 'small',
    }
\`\`\`

**global.opacity.medium**

The opacity value used on the Meter color. Expects \`number\`.

Defaults to

\`\`\`
0.4
\`\`\`

**global.size**

The possible sizes for Circle Meter width. Expects \`object\`.

Defaults to

\`\`\`
{
      xxsmall: '48px',
      xsmall: '96px',
      small: '192px',
      medium: '384px',
      large: '768px',
      xlarge: '1152px',
      xxlarge: '1536px',
      full: '100%',
    }
\`\`\`

**meter.color**

The color used for the Meter. Expects \`string\`.

Defaults to

\`\`\`
accent-1
\`\`\`

**meter.extend**

Any additional style for Meter. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`
",
  "Nav": "## Nav
Is a Box container for navigation links

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Nav&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/nav&module=%2Fsrc%2FNav.js)
## Usage

\`\`\`javascript
import { Nav } from 'grommet';
<Nav />
\`\`\`

## Properties

  ",
  "Paragraph": "## Paragraph
A paragraph of text.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Paragraph&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/paragraph&module=%2Fsrc%2FParagraph.js)
## Usage

\`\`\`javascript
import { Paragraph } from 'grommet';
<Paragraph />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**color**

A color identifier to use for the text color.

\`\`\`
string
{
  dark: string,
  light: string
}
\`\`\`

**fill**

Whether the width should fill the container.

\`\`\`
boolean
\`\`\`

**responsive**

Whether margin should be scaled for mobile environments. Defaults to \`true\`.

\`\`\`
boolean
\`\`\`

**size**

The size of the Paragraph text. Defaults to \`medium\`.

\`\`\`
small
medium
large
xlarge
xxlarge
string
\`\`\`

**textAlign**

How to align the text inside the paragraph. Defaults to \`start\`.

\`\`\`
start
center
end
\`\`\`
  
## Intrinsic element

\`\`\`
p
\`\`\`
## Theme
  
**paragraph**

The possible sizes of the paragraph in terms of its max-width,
     font-size and line-height. Expects \`object\`.

Defaults to

\`\`\`
{
      small: {
        size: '14px',
        height: '20px',
        maxWidth: '336px',
       },
      medium: {
        size: '18px',
        height: '24px',
        maxWidth: '432px',
      },
      large: {
        size: '22px',
        height: '28px',
        maxWidth: '528px',
      },
      xlarge: {
        size: '26px',
        height: '32px',
        maxWidth: '624px',
      },
      xxlarge: {
        size: '34px',
        height: '40px',
        maxWidth: '816px',
      },
    }
\`\`\`

**paragraph.textAlign**

How to align the text inside the Paragraph. Expects \`string\`.

Defaults to

\`\`\`
start
\`\`\`

**paragraph.extend**

Any additional style for the Paragraph. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.edgeSize**

The possible sizes for margin. Expects \`object\`.

Defaults to

\`\`\`
{
    edgeSize: {
      none: '0px',
      hair: '1px',
      xxsmall: '3px',
      xsmall: '6px',
      small: '12px',
      medium: '24px',
      large: '48px',
      xlarge: '96px',
      responsiveBreakpoint: 'small',
    },
  }
\`\`\`
",
  "RadioButton": "## RadioButton
A radio button control.

RadioButton should typically not be used directly.
      Instead, use RadioButtonGroup.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=RadioButton&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/radiobutton&module=%2Fsrc%2FRadioButton.js)
## Usage

\`\`\`javascript
import { RadioButton } from 'grommet';
<RadioButton />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers.
      When provided, an aria-label will be added to the element.

\`\`\`
string
\`\`\`

**checked**

Same as React <input checked={} />

\`\`\`
boolean
\`\`\`

**children**

Function that will be called to render the visual representation.
      It will be passed an object indicating whether the button is checked. It
      should return a react element.
      For example:
      \`children={({ checked }) => <Box ...>{...}</Box>}\`
      

\`\`\`
function
\`\`\`

**disabled**

Same as React <input disabled={} />. Also adds a hidden input element
with the same name so form submissions work.

\`\`\`
boolean
\`\`\`

**id**

The DOM id attribute value to use for the underlying <input/> element.

\`\`\`
string
\`\`\`

**label**

Label text to place next to the control.

\`\`\`
node
\`\`\`

**name**

Required. The DOM name attribute value to use for the underlying <input/>
       element.

\`\`\`
string
\`\`\`

**onChange**

Function that will be called when the user clicks the radio button. It
      will be passed a React event object. The current state can be accessed
      via event.target.checked. Same as React <input onChange={} />.

\`\`\`
function
\`\`\`
  
## Intrinsic element

\`\`\`
input
\`\`\`
## Theme
  
**global.colors.control**

The default color of the border surrounding 
    the checked icon in RadioButton checked state. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: 'accent-1', light: 'brand'}
\`\`\`

**radioButton.border.color**

The color of the border of the Radio Button. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{dark: 'rgba(255, 255, 255, 0.5), light: 'rgba(0, 0, 0, 0.15)}
\`\`\`

**radioButton.border.width**

The width size of the border of the RadioButton. Expects \`string\`.

Defaults to

\`\`\`
2px
\`\`\`

**radioButton.check.background.color**

The background color of the checked icon in the RadioButton. Expects \`string | {dark: string, light: string}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**radioButton.check.color**

The color of the checked icon in the RadioButton. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**radioButton.check.extend**

Any additional style for the checked RadioButton. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**radioButton.check.radius**

The border-radius of the RadioButton. Expects \`string\`.

Defaults to

\`\`\`
100%
\`\`\`

**radioButton.color**

The color of the border surrounding the checked 
    icon in RadioButton checked state. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**radioButton.extend**

Any additional style for the RadioButton. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**radioButton.gap**

The gap between the label and the RadioButton itself. Expects \`string\`.

Defaults to

\`\`\`
small
\`\`\`

**radioButton.font.weight**

The font weight of the label. Expects \`number | string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**radioButton.size**

The size of the RadioButton. Expects \`string\`.

Defaults to

\`\`\`
24px
\`\`\`

**radioButton.hover.background.color**

The background color of the Box surrounding the RadioButton
    when hovered over. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**radioButton.hover.border.color**

The color of the RadioButton border when hovered over. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{dark: white, light: black}
\`\`\`

**radioButton.icon.extend**

Any additional style for the RadioButton icon. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**radioButton.icon.size**

The size of the icon in the RadioButton. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`
",
  "RadioButtonGroup": "## RadioButtonGroup
A group of radio buttons.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=RadioButtonGroup&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/radiobuttongroup&module=%2Fsrc%2FRadioButtonGroup.js)
## Usage

\`\`\`javascript
import { RadioButtonGroup } from 'grommet';
<RadioButtonGroup />
\`\`\`

## Properties

**children**

Function that will be called to render the visual representation.
      It will be passed an object indicating whether the button is checked. It
      should return a react element.
      For example:
      \`children={(option, { checked }) => <Box ...>{...}</Box>}\`
      

\`\`\`
function
\`\`\`

**disabled**

Disables all options.

\`\`\`
boolean
\`\`\`

**name**

Required. The DOM name attribute value to use for the underlying <input/> 
      elements.

\`\`\`
string
\`\`\`

**onChange**

Function that will be called when the user clicks on one of the radio
      buttons. It will be passed a React event object.

\`\`\`
function
\`\`\`

**options**

Required. Options can be either a string, boolean, number 
      or an object. Each option is rendered as a single RadioButton.

\`\`\`
[string]
[number]
[boolean]
[{
  disabled: boolean,
  id: string,
  label: 
    string
    element,
  value: 
    string
    number
    boolean
}]
\`\`\`

**value**

Currently selected option value.

\`\`\`
string
number
boolean
object
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`
## Theme
  
**radioButtonGroup.container**

Any valid Box props for the RadioButtonGroup container. Expects \`object\`.

Defaults to

\`\`\`
undefined
\`\`\`
",
  "RangeInput": "## RangeInput
A slider control to input a value within a fixed range.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=RangeInput&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/rangeinput&module=%2Fsrc%2FRangeInput.js)
## Usage

\`\`\`javascript
import { RangeInput } from 'grommet';
<RangeInput />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers.
      When provided, an aria-label will be added to the element.

\`\`\`
string
\`\`\`

**id**

The id attribute of the range input.

\`\`\`
string
\`\`\`

**min**

The minimum value permitted.

\`\`\`
number
string
\`\`\`

**max**

The maximum value permitted.

\`\`\`
number
string
\`\`\`

**name**

The name attribute of the range input.

\`\`\`
string
\`\`\`

**onChange**

Function that will be called when the user changes the value. It will
      be passed an event object. The new input value will be available
      via 'event.target.value'.

\`\`\`
function
\`\`\`

**step**

The step interval between values.

\`\`\`
number
\`\`\`

**value**

The current value.

\`\`\`
number
string
\`\`\`
  
## Intrinsic element

\`\`\`
input
\`\`\`
## Theme
  
**global.focus.border.color**

The border color of the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
focus
\`\`\`

**global.focus.outline.color**

The outline color around the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.focus.outline.size**

The size of the outline around the component when in focus. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.focus.shadow.color**

The shadow color around the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
focus
\`\`\`

**global.focus.shadow.size**

The size of the shadow around the component when in focus. Expects \`string\`.

Defaults to

\`\`\`
2px
\`\`\`

**global.colors.border**

The color used for rangeInput.track.color. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: rgba(255, 255, 255, 0.33), light: rgba(0, 0, 0, 0.33) }
\`\`\`

**global.spacing**

The height, width and border-radius of the range thumb. Expects \`string\`.

Defaults to

\`\`\`
24px
\`\`\`

**rangeInput.extend**

Any additional style for the RangeInput. Expects \`string | (props) => \`
      any CSS styling;
    \`\`.

Defaults to

\`\`\`
undefined
\`\`\`

**rangeInput.thumb.color**

The color of the thumb. Expects \`string | { dark: undefined, light: undefined }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**rangeInput.thumb.extend**

Any additional style for the thumb. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**rangeInput.track.color**

The color of the track. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
border
\`\`\`

**rangeInput.track.opacity**

The opacity of the track color. Expects \`string | number\`.

Defaults to

\`\`\`
undefined
\`\`\`

**rangeInput.track.lower.color**

The color of the lower bound track. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**rangeInput.track.lower.opacity**

The opacity on the lower bound track color. Expects \`string | number\`.

Defaults to

\`\`\`
undefined
\`\`\`

**rangeInput.track.upper.color**

The color of the upper track. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**rangeInput.track.upper.opacity**

The opacity on the upper track color. Expects \`string | number\`.

Defaults to

\`\`\`
undefined
\`\`\`

**rangeInput.track.extend**

Any additional style for the track. Expects \`string | (props) => \`
      any CSS styling;
    \`\`.

Defaults to

\`\`\`
undefined
\`\`\`

**rangeInput.track.height**

The height of the track. Expects \`string\`.

Defaults to

\`\`\`
4px
\`\`\`
",
  "RangeSelector": "## RangeSelector
A control to input a range of values.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=RangeSelector&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/rangeselector&module=%2Fsrc%2FRangeSelector.js)
## Usage

\`\`\`javascript
import { RangeSelector } from 'grommet';
<RangeSelector />
\`\`\`

## Properties

**color**

What color to use to indicate the selection.

\`\`\`
string
{
  dark: string,
  light: string
}
\`\`\`

**direction**

 Defaults to \`horizontal\`.

\`\`\`
horizontal
vertical
\`\`\`

**invert**

Whether to indicate what has not been selected.

\`\`\`
boolean
\`\`\`

**max**

The maximum value permitted. Defaults to \`100\`.

\`\`\`
number
\`\`\`

**messages**

Custom messages used by screen readers for accessibility.

\`\`\`
{
  lower: string,
  upper: string
}
\`\`\`

**min**

The minimum value permitted.

\`\`\`
number
\`\`\`

**onChange**

Function that will be called when the user changes one of the
      values. It will be passed an array of two numbers indicating
      the new values selected.

\`\`\`
function
\`\`\`

**opacity**

Transparency of the selection indicator. Defaults to \`medium\`.

\`\`\`
weak
medium
strong
string
boolean
\`\`\`

**round**

How much to round the corners.

\`\`\`
xsmall
small
medium
large
full
string
\`\`\`

**size**

How thick to make the selection indicator. Defaults to \`medium\`.

\`\`\`
xxsmall
xsmall
small
medium
large
xlarge
full
string
\`\`\`

**step**

The step interval between values. Defaults to \`1\`.

\`\`\`
number
\`\`\`

**values**

Required. The current values.

\`\`\`
[number]
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`
## Theme
  
**global.borderSize**

The size of the border. Expects \`string\`.

Defaults to

\`\`\`
{
      xsmall: '1px',
      small: '2px',
      medium: '4px',
      large: '12px',
      xlarge: '24px,
    }
\`\`\`

**global.colors.border**

The color for the border. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
[object Object]
\`\`\`

**global.colors.control**

The color for the edge controls. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{dark: accent-1, light: brand}
\`\`\`

**global.colors.focus**

The color of the focus. Expects \`string\`.

Defaults to

\`\`\`
accent-1
\`\`\`

**global.edgeSize.small**

The possible sizes for the margin, padding and gap. Expects \`string\`.

Defaults to

\`\`\`
6px
\`\`\`

**rangeSelector.background.invert.color**

The background color on an invert display. Expects \`string\`.

Defaults to

\`\`\`
light-4
\`\`\`

**rangeSelector.edge.type**

The edge control type. Expects \`'bar' | 'disc' | node\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.spacing**

The size of the edge controls thumb. Expects \`string\`.

Defaults to

\`\`\`
24px
\`\`\`
",
  "RoutedAnchor": "## RoutedAnchor
An Anchor with support for React Router.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=RoutedAnchor&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/routedanchor&module=%2Fsrc%2FRoutedAnchor.js)
## Usage

\`\`\`javascript
import { RoutedAnchor } from 'grommet';
<RoutedAnchor primary path='/documentation' />
\`\`\`

## Properties

**path**

Required. Indicates the path to be used for react-router link.

\`\`\`
string
\`\`\`

**method**

Indicates whether the browser history should be appended to or 
      replaced. Defaults to \`push\`.

\`\`\`
push
replace
\`\`\`
  
## Intrinsic element

\`\`\`
a
\`\`\`",
  "RoutedButton": "## RoutedButton
A button with support for React Router.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=RoutedButton&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/routedbutton&module=%2Fsrc%2FRoutedButton.js)
## Usage

\`\`\`javascript
import { RoutedButton } from 'grommet';
<RoutedButton primary path='/documentation' />
\`\`\`

## Properties

**path**

Required. Indicates the path to be used for react-router link.

\`\`\`
string
\`\`\`

**method**

Indicates whether the browser history should be appended to or 
      replaced. Defaults to \`push\`.

\`\`\`
push
replace
\`\`\`
  
## Intrinsic element

\`\`\`
button
\`\`\`",
  "Select": "## Select
A control to select a value, with optional search.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Select&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/select&module=%2Fsrc%2FSelect.js)
## Usage

\`\`\`javascript
import { Select } from 'grommet';
<Select />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**children**

Function that will be called when each option is rendered.
      It will be passed (option, index, options, state) where option
      is the option to render, index is the index of that option in the
      options array, and state is an object with
      { active, disabled, selected } keys indicating the current state
      of the option.

\`\`\`
function
\`\`\`

**closeOnChange**

Wether to close the drop when a selection is made. Defaults to \`true\`.

\`\`\`
boolean
\`\`\`

**disabled**

Whether the entire select or individual options should be disabled.
        An array of numbers indicates the indexes into 'options' of the
        disabled options. An array of strings or objects work the same way
        as the 'value' to indicate which options are disabled.

\`\`\`
boolean
[
  number
  string
  object
]
\`\`\`

**disabledKey**

When the options array contains objects, this property indicates how
      to determine which options should be disabled. If a string is
      provided, it is used as the key for each item object and if that key
      returns truthy, the option is disabled. If a function is provided, it is
      called with the option and the return value determines if the option
      is disabled.

\`\`\`
string
function
\`\`\`

**dropAlign**

How to align the drop. Defaults to \`{
  \\"top\\": \\"bottom\\",
  \\"left\\": \\"left\\"
}\`.

\`\`\`
{
  top: 
    top
    bottom,
  bottom: 
    top
    bottom,
  right: 
    left
    right,
  left: 
    left
    right
}
\`\`\`

**dropHeight**

The height of the drop container.

\`\`\`
xsmall
small
medium
large
xlarge
string
\`\`\`

**dropTarget**

Target where the options drop will be aligned to. This should be
      a React reference. Typically, this is not required as the drop will be
      aligned to the Select itself by default.

\`\`\`
object
\`\`\`

**dropProps**

Any valid Drop prop.

\`\`\`
object
\`\`\`

**focusIndicator**

Whether when 'plain' it should receive a focus outline.

\`\`\`
boolean
\`\`\`

**icon**

A custom icon to be used when rendering the select. You can use false to
       not render an icon at all.

\`\`\`
boolean
function
node
\`\`\`

**labelKey**

When the options array contains objects, this property indicates how
      to determine the label of each option. If a string is
      provided, it is used as the key to retrieve each option's label.
      If a function is provided, it is called with the option and the
      return value indicates the label.

\`\`\`
string
function
\`\`\`

**messages**

Custom messages.

\`\`\`
{
  multiple: string
}
\`\`\`

**multiple**

Whether to allow multiple options to be selected.

\`\`\`
boolean
\`\`\`

**name**

The name of the attribute when in a Form or FormField.

\`\`\`
string
\`\`\`

**onChange**

Function that will be called when the user selects an option.

\`\`\`
function
\`\`\`

**onClose**

Function that will be called when the Select drop closes.

\`\`\`
function
\`\`\`

**onOpen**

Function that will be called when the Select drop opens.

\`\`\`
function
\`\`\`

**onSearch**

Function that will be called when the user types in the search input.
      If this property is not provided, no search field will be rendered.

\`\`\`
function
\`\`\`

**onMore**

Use this to indicate that 'items' doesn't contain all that it could.
      It will be called when the entire list of items has been rendered.
      This might be used when the total number of items that could be retrieved
      is more than you'd want to load into the browser. 'onMore' allows you
      to lazily fetch more from the server only when needed.

\`\`\`
function
\`\`\`

**options**

Required. Options can be either a string or an object. If an object is used, use
      children callback in order to render anything based on the current item.

\`\`\`
[
  string
  number
  boolean
  element
  object
]
\`\`\`

**open**

Control the state of the component.

\`\`\`
boolean
\`\`\`

**placeholder**

Placeholder to use when no value is provided.

\`\`\`
string
element
node
\`\`\`

**plain**

Whether this is a plain Select input with no border or padding.

\`\`\`
boolean
\`\`\`

**replace**

Whether to replace previously rendered items with a generic spacing
      element when they have scrolled out of view. This is more performant but
      means that in-page searching will not find elements that have been
      replaced. Defaults to \`true\`.

\`\`\`
boolean
\`\`\`

**searchPlaceholder**

Placeholder text to use in the search box when the search input is 
      empty.

\`\`\`
string
\`\`\`

**selected**

Index of the currently selected option. When multiple, the set of
      options selected. NOTE: This is deprecated in favor of indicating
      the selected values via the 'value' property.

\`\`\`
number
[number]
\`\`\`

**size**

The size of the text and icon.

\`\`\`
small
medium
large
xlarge
string
\`\`\`

**value**

Currently selected value. This can be an array
      when multiple. Passing an element allows the caller to control how
      the value is rendered. Passing an element is deprecated. Instead,
      use the 'valueLabel' property.

\`\`\`
string
element
object
number
[
  string
  object
  number
]
\`\`\`

**valueLabel**

Provides custom rendering of the value. If not provided, Select
      will render the value automatically.

\`\`\`
node
\`\`\`

**valueKey**

When the options array contains objects, this property indicates how
      to determine the value of each option. If a string is
      provided, it is used as the key to retrieve each option's value.
      If a function is provided, it is called with the option and the
      return value indicates the value. If reduce is true, the value
      coming via the key will be used for the onChange value and the value
      property is expected to be reduced to align.

\`\`\`
string
function
{
  key: string,
  reduce: boolean
}
\`\`\`

**emptySearchMessage**

Empty option message to display when no matching results were found Defaults to \`No matches found\`.

\`\`\`
string
\`\`\`
  
## Theme
  
**global.hover.background**

The background style when hovering. Expects \`string | { color: string, opacity: string }\`.

Defaults to

\`\`\`
{ color: 'active', opacity: 'medium' }
\`\`\`

**global.hover.color**

The text color when hovering. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: 'white', light: 'black' }
\`\`\`

**select.background**

The background color used for Select. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**select.options.container**

Any valid Box prop for the options container. Expects \`object\`.

Defaults to

\`\`\`
{ align: 'start', pad: 'small' }
\`\`\`

**select.options.text**

Any valid Text prop for text used inside the options container. Expects \`object\`.

Defaults to

\`\`\`
{ margin: 'none }
\`\`\`

**select.container.extend**

Any additional style for the container of the Select component. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**select.control.open**

Any additional style for the Select DropButton when using the
    controlled open state. Expects \`string | object\`.

Defaults to

\`\`\`
undefined
\`\`\`

**select.control.extend**

Any additional style for the control of the Select component. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**select.icons.margin**

The margin used for Select icons. Expects \`string | object\`.

Defaults to

\`\`\`
undefined
\`\`\`

**select.icons.color**

The color used for Select icons. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**select.icons.down**

The down icon to use for opening the Select. Expects \`React.Element\`.

Defaults to

\`\`\`
<FormDown />
\`\`\`

**select.icons.up**

The up icon to use for closing the Select. Expects \`React.Element\`.

Defaults to

\`\`\`
undefined
\`\`\`

**select.searchInput**

Component for the Select search input field. Expects \`React.Component\`.

Defaults to

\`\`\`
undefined
\`\`\`

**select.step**

How many items to render at a time. Expects \`number\`.

Defaults to

\`\`\`
20
\`\`\`
",
  "Sidebar": "## Sidebar
A sidebar, typically used with Nav children.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Sidebar&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/sidebar&module=%2Fsrc%2FSidebar.js)
## Usage

\`\`\`javascript
import { Sidebar } from 'grommet';
<Sidebar/>
\`\`\`

## Properties

**footer**

If specified, a footer element for the Sidebar

\`\`\`
node
\`\`\`

**header**

If specified, an header element for the Sidebar

\`\`\`
node
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`",
  "SkipLinks": "## SkipLinks
Describe a list of elements to skip to.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=SkipLinks&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/skiplinks&module=%2Fsrc%2FSkipLinks.js)
## Usage

\`\`\`javascript
import { SkipLinks } from 'grommet';
<SkipLinks elements={['main', 'footer']} />
\`\`\`

## Properties

**children**

Required. Array of SkipLink

\`\`\`
node
\`\`\`

**messages**

Custom messages for SkipLinks. Used for accessibility by screen 
readers. Defaults to \`{
  \\"skipTo\\": \\"Skip To:\\"
}\`.

\`\`\`
{
  skipTo: string
}
\`\`\`
  
## Theme
  
**skipLinks.position**

Position of the layer content once opened. Expects \`string\`.

Defaults to

\`\`\`
top
\`\`\`

**skipLinks.container**

Any valid Box prop for the SkipLinks container. Expects \`object\`.

Defaults to

\`\`\`
{ elevation: 'large', pad: 'medium', round: 'small' }
\`\`\`

**skipLinks.container.elevation**

The container shadow. Expects \`string\`.

Defaults to

\`\`\`
large
\`\`\`

**skipLinks.container.pad**

The pad used for the layer container. Expects \`string | object\`.

Defaults to

\`\`\`
medium
\`\`\`

**skipLinks.container.round**

The rounding of the later container. Expects \`boolean | string | object\`.

Defaults to

\`\`\`
small
\`\`\`

**skipLinks.label**

Any valid Text prop for the text message. Expects \`object\`.

Defaults to

\`\`\`
{ margin: 'small', size: 'medium' }
\`\`\`

**skipLinks.label.margin**

The margin size around the text message. Expects \`string\`.

Defaults to

\`\`\`
{ bottom: medium }
\`\`\`

**skipLinks.label.size**

The font size of the text label. Expects \`string\`.

Defaults to

\`\`\`
medium
\`\`\`

**text.medium.size**

The font size of the text label. Expects \`string\`.

Defaults to

\`\`\`
18px
\`\`\`
",
  "Stack": "## Stack
A container that stacks contents on top of each other. One child is
      designated as the \`guidingChild\` which determines the size. All
      other children are placed within that size, either above or below
      based on their order. Stack is typically used to decorate Meter, Chart,
      or icons.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Stack&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/stack&module=%2Fsrc%2FStack.js)
## Usage

\`\`\`javascript
import { Stack } from 'grommet';
<Stack />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**anchor**

Where to anchor children from. If not specified, children
      fill the guiding child's area.

\`\`\`
center
left
right
top
bottom
top-left
bottom-left
top-right
bottom-right
\`\`\`

**fill**

Whether to expand to fill
      all of the available width and height in the parent container.

\`\`\`
horizontal
vertical
boolean
\`\`\`

**guidingChild**

Which child to guide layout from. All other children
      will be positioned within that area. Defaults to 'first'. Defaults to \`first\`.

\`\`\`
number
first
last
\`\`\`

**interactiveChild**

Which child to restrict user interaction to. All other children
      will have user interaction disabled.

\`\`\`
number
first
last
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`
## Theme
  
**stack.extend**

Any additional style for the control of the Stack component. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`
",
  "Tab": "## Tab
One tab within Tabs.

## Usage

\`\`\`javascript
import { Tab } from 'grommet';
<Tab />
\`\`\`

## Properties

**disabled**

Whether the tab is disabled.

\`\`\`
boolean
\`\`\`

**icon**

Icon element to place in the tab.

\`\`\`
element
\`\`\`

**plain**

Whether this is a plain tab with no style.

\`\`\`
boolean
\`\`\`

**reverse**

Whether an icon and label should be reversed so that the icon is at the
              end of the tab.

\`\`\`
boolean
\`\`\`

**title**

The title of the tab.

\`\`\`
node
\`\`\`
  
## Intrinsic element

\`\`\`
button
\`\`\`
## Theme
  
**tab.active**

styles for the active tab. Expects \`object\`.

Defaults to

\`\`\`
{color: 'text', background: undefined }
\`\`\`

**tab.background**

background styling of Tab. Expects \`object\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tab.border**

border styles of the tab Expects \`object\`.

Defaults to

\`\`\`
{
      side: 'bottom',
      size: 'small',
      color: {
        dark: 'accent-1',
        light: 'brand',
      },
      active: {
        color: {
          dark: 'white',
          light: 'black',
        },
      },
      hover: {
        color: {
          dark: 'white',
          light: 'black',
        },
        // extend: undefined,
      },
    }
\`\`\`

**tab.border.disabled.color**

border color of the Tab when disabled Expects \`string | {dark: string, light: string}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tab.color**

text color for the Tab. Expects \`string | {dark: string, light: string}\`.

Defaults to

\`\`\`
control
\`\`\`

**tab.disabled.color**

text color of the Tab when disabled. Expects \`string | {dark: string, light: string}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tab.extend**

Any additional style for Tab. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tab.hover.background**

background style of the Tab on hover. Expects \`string | object\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tab.hover.color**

text color of the tab on hover. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: 'white', light: 'black' }
\`\`\`

**tab.hover.extend**

Any additional style for Tab hover. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tab.margin**

The margin of Tab. Expects \`string | object\`.

Defaults to

\`\`\`
{ vertical: 'xxsmall', horizontal: 'small' }
\`\`\`

**tab.pad**

The pad of Tab. Expects \`string | object\`.

Defaults to

\`\`\`
{ bottom: 'xsmall' }
\`\`\`
",
  "Table": "## Table
A table of data organized in cells.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Table&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/table&module=%2Fsrc%2FTable.js)
## Usage

\`\`\`javascript
import { Table, TableHeader, TableFooter, TableBody, TableRow } from 'grommet';
<Table />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**caption**

One line description.

\`\`\`
string
\`\`\`
  
## Intrinsic element

\`\`\`
table
\`\`\`
## Theme
  
**global.edgeSize.responsiveBreakpoint**

The actual breakpoint to trigger changes in Table. Expects \`string\`.

Defaults to

\`\`\`
small
\`\`\`

**global.size**

The size that impacts max-width and width. Expects \`undefined\`.

Defaults to

\`\`\`
{
      xxsmall: '48px',
      xsmall: '96px',
      small: '192px',
      medium: '384px',
      large: '768px',
      xlarge: '1152px',
      xxlarge: '1536px',
      full: '100%',
      }
\`\`\`

**table.extend**

Any additional style for Table. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`
",
  "TableBody": "## TableBody
The body of a table.

## Usage

\`\`\`javascript
import { TableBody } from 'grommet';
<TableBody />
\`\`\`

## Properties

  
## Intrinsic element

\`\`\`
tbody
\`\`\`",
  "TableCell": "## TableCell
A cell of data in a table.

## Usage

\`\`\`javascript
import { TableCell } from 'grommet';
<TableCell />
\`\`\`

## Properties

**plain**

Whether default styling context should be removed.

\`\`\`
boolean
\`\`\`

**scope**

For header cells, what scope the header is for.
        Typically, the cells in a TableHeader have 'col' scope and
        the primary cell in each row in the TableBody has 'row' scope.

\`\`\`
col
row
\`\`\`

**size**

What size the cell should be. Typically, this is not needed
      unless you are trying to align multiple tables.

\`\`\`
xxsmall
xsmall
small
medium
large
xlarge
1/2
1/3
2/3
1/4
2/4
3/4
string
\`\`\`

**verticalAlign**

How to align the contents vertically.

\`\`\`
top
middle
bottom
\`\`\`
  
## Intrinsic element

\`\`\`
td
\`\`\`
## Theme
  
**table.body.align**

How to align the body inside the Table. Expects \`string\`.

Defaults to

\`\`\`
start
\`\`\`

**table.body.border**

The border side of the body. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**table.body.extend**

Any additional style for Table body. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**table.body.pad**

The padding of the body. Expects \`string | object\`.

Defaults to

\`\`\`
{ horizontal: 'small', vertical: 'xsmall' }
\`\`\`

**table.footer.align**

How to align the footer inside the Table. Expects \`string\`.

Defaults to

\`\`\`
start
\`\`\`

**table.footer.border**

The border side of the footer. Expects \`string\`.

Defaults to

\`\`\`
top
\`\`\`

**table.footer.extend**

Any additional style for Table footer. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**table.footer.fill**

Whether the height should fill the footer. Expects \`string\`.

Defaults to

\`\`\`
vertical
\`\`\`

**table.footer.pad**

The padding of the footer. Expects \`string | object\`.

Defaults to

\`\`\`
{ horizontal: 'small', vertical: 'xsmall' }
\`\`\`

**table.footer.verticalAlign**

How to align the content vertically. Expects \`string\`.

Defaults to

\`\`\`
top
\`\`\`

**table.header.align**

How to align the header inside the Table. Expects \`string\`.

Defaults to

\`\`\`
start
\`\`\`

**table.header.background**

The background color of the header. Expects \`string | object\`.

Defaults to

\`\`\`
undefined
\`\`\`

**table.header.border**

The border side of the header. Expects \`string\`.

Defaults to

\`\`\`
bottom
\`\`\`

**table.header.fill**

Whether the height should fill the header. Expects \`string\`.

Defaults to

\`\`\`
vertical
\`\`\`

**table.header.extend**

Any additional style for Table header. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**table.header.pad**

The padding of the header. Expects \`string | object\`.

Defaults to

\`\`\`
{ horizontal: 'small', vertical: 'xsmall' }
\`\`\`

**table.header.verticalAlign**

How to align the content vertically. Expects \`string\`.

Defaults to

\`\`\`
bottom
\`\`\`
",
  "TableFooter": "## TableFooter
The footer of a table.

## Usage

\`\`\`javascript
import { TableFooter } from 'grommet';
<TableFooter />
\`\`\`

## Properties

  
## Intrinsic element

\`\`\`
tfoot
\`\`\`",
  "TableHeader": "## TableHeader
The header of a table.

## Usage

\`\`\`javascript
import { TableHeader } from 'grommet';
<TableHeader />
\`\`\`

## Properties

  
## Intrinsic element

\`\`\`
thead
\`\`\`",
  "TableRow": "## TableRow
A row of cells in a table.

## Usage

\`\`\`javascript
import { TableRow } from 'grommet';
<TableRow />
\`\`\`

## Properties

  
## Intrinsic element

\`\`\`
tr
\`\`\`",
  "Tabs": "## Tabs
A container with controls to show one Tab at a time.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Tabs&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/tabs&module=%2Fsrc%2FTabs.js)
## Usage

\`\`\`javascript
import { Tabs, Tab } from 'grommet';
<Tabs>
  <Tab title='Tab 1'>...</Tab>
  <Tab title='Tab 2'>...</Tab>
</Tabs>
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**activeIndex**

Active tab index. If specified, Tabs will be a controlled component.
This means that future tab changes will not work unless you subscribe to
onActive function and update activeIndex accordingly.

\`\`\`
number
\`\`\`

**alignControls**

How to align the tab controls within the tabs header.

\`\`\`
start
center
end
stretch
\`\`\`

**children**

Required. Array of Tab.

\`\`\`
node
\`\`\`

**flex**

Whether flex-grow and/or flex-shrink is true.

\`\`\`
grow
shrink
boolean
\`\`\`

**justify**

How to align the tabs along the main axis. Defaults to \`center\`.

\`\`\`
start
center
end
\`\`\`

**messages**

Custom messages for Tabs. Used for accessibility by screen readers. Defaults to \`{
  \\"tabContents\\": \\"Tab Contents\\"
}\`.

\`\`\`
{
  tabContents: string
}
\`\`\`

**onActive**

Function that will be called with the active tab index when the
currently active tab changes.

\`\`\`
function
\`\`\`
  
## Intrinsic element

\`\`\`
div
\`\`\`
## Theme
  
**global.borderSize**

The size of the border. Expects \`string\`.

Defaults to

\`\`\`
{
      xsmall: '1px',
      small: '2px',
      medium: '4px',
      large: '12px',
      xlarge: '24px,
    }
\`\`\`

**global.colors.border**

The color of tabs border. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: rgba(255, 255, 255, 0.33), light: rgba(0, 0, 0, 0.33) }
\`\`\`

**global.edgeSize.small**

The possible sizes for margin, pad and gap. Expects \`string\`.

Defaults to

\`\`\`
6px
\`\`\`

**tabs.background**

background styling of Tabs. Expects \`string | object\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tabs.extend**

Any additional style for Tabs. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tabs.gap**

The gap size between the Tabs. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tabs.header.background**

The background styles of Tabs header. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tabs.header.border.color**

border color of the tabs controls Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tabs.header.border.side**

side of the border of the tabs controls Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tabs.header.border.size**

border size of the tabs controls Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tabs.header.border.style**

border style of the tabs controls Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tabs.header.extend**

Any additional style for Tabs header. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**tabs.panel.extend**

Any additional style for Tabs panel. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`
",
  "Text": "## Text
Arbitrary text.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Text&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/text&module=%2Fsrc%2FText.js)
## Usage

\`\`\`javascript
import { Text } from 'grommet';
<Text />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can be 
    specified to distinguish horizontal margin, vertical margin, and margin on 
    a particular side. For vertical margin to be applied, Text needs to be 
    contained within a layout component (such as Box or a generic div) or 
    behave as a div (by applying as=\\"div\\" or a display style of 
    inline-block).

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**color**

A color identifier to use for the text color.

\`\`\`
string
{
  dark: string,
  light: string
}
\`\`\`

**size**

The font size and line height are primarily driven by the chosen tag. 
But, it can be adjusted via this size property. The tag should be set for 
semantic correctness and accessibility. This size property allows for stylistic
adjustments. Defaults to \`medium\`.

\`\`\`
xsmall
small
medium
large
xlarge
xxlarge
string
\`\`\`

**tag**

The DOM tag to use for the element. NOTE: This is deprecated in favor
         of indicating the DOM tag via the 'as' property.

\`\`\`
string
function
\`\`\`

**as**

The DOM tag or react component to use for the element. Defaults to \`span\`.

\`\`\`
string
function
element
\`\`\`

**textAlign**

How to align the text inside the component. Defaults to \`start\`.

\`\`\`
start
center
end
\`\`\`

**truncate**

Restrict the text to a single line and truncate with ellipsis if it
is too long to all fit.

\`\`\`
boolean
\`\`\`

**weight**

Font weight

\`\`\`
normal
bold
number
\`\`\`

**wordBreak**

Whether words should break when reaching the end of a line. Defaults to \`normal\`.

\`\`\`
normal
break-all
keep-all
break-word
\`\`\`
  
## Intrinsic element

\`\`\`
span
\`\`\`
## Theme
  
**global.colors.text**

The text color used for Text. Expects \`object | { dark: string, light: string }\`.

Defaults to

\`\`\`
{ dark: '#f8f8f8', light: '#444444' }
\`\`\`

**text**

The possible sizes of the text in terms of its font-size and 
line-height. Expects \`object\`.

Defaults to

\`\`\`
{
      xsmall: {
        size: '12px',
        height: '18px',
       },
      small: {
        size: '14px',
        height: '20px',
       },
      medium: {
        size: '18px',
        height: '24px',
      },
      large: {
        size: '22px',
        height: '28px',
      },
      xlarge: {
        size: '26px',
        height: '32px',
      },
      xxlarge: {
        size: '34px',
        height: '40px',
      },
    }
\`\`\`

**text.extend**

Any additional style for Text. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.edgeSize**

The possible sizes for margin. Expects \`object\`.

Defaults to

\`\`\`
{
    edgeSize: {
      none: '0px',
      hair: '1px',
      xxsmall: '3px',
      xsmall: '6px',
      small: '12px',
      medium: '24px',
      large: '48px',
      xlarge: '96px',
      responsiveBreakpoint: 'small',
    },
  }
\`\`\`
",
  "TextArea": "## TextArea
A control to input multiple lines of text.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=TextArea&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/textarea&module=%2Fsrc%2FTextArea.js)
## Usage

\`\`\`javascript
import { TextArea } from 'grommet';
<TextArea id='item' name='item' />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers.
      When provided, an aria-label will be added to the element.

\`\`\`
string
\`\`\`

**id**

The id attribute of the textarea.

\`\`\`
string
\`\`\`

**fill**

Whether the width and height should fill the container.

\`\`\`
boolean
\`\`\`

**focusIndicator**

Whether the plain textarea should receive a focus outline.

\`\`\`
boolean
\`\`\`

**name**

The name attribute of the textarea.

\`\`\`
string
\`\`\`

**onChange**

Function that will be called when the user types in the textarea.

\`\`\`
function
\`\`\`

**placeholder**

Placeholder text to use when no value is provided.

\`\`\`
string
\`\`\`

**plain**

Whether this is a plain textarea with no border or padding.
Only use this when the containing context provides sufficient affordance.

\`\`\`
boolean
\`\`\`

**value**

What text to put in the textarea.

\`\`\`
string
\`\`\`

**resize**

Whether user is allowed to resize the textarea. Defaults to \`true\`.

\`\`\`
vertical
horizontal
boolean
\`\`\`

**size**

The size of the TextArea.

\`\`\`
small
medium
large
xlarge
string
\`\`\`
  
## Intrinsic element

\`\`\`
textarea
\`\`\`
## Theme
  
**global.colors.border**

The color of the border. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
[object Object]
\`\`\`

**global.control.border.color**

The border color. Expects \`string\`.

Defaults to

\`\`\`
border
\`\`\`

**global.control.border.radius**

The border radius. Expects \`string\`.

Defaults to

\`\`\`
4px
\`\`\`

**global.control.border.width**

The border width. Expects \`string\`.

Defaults to

\`\`\`
1px
\`\`\`

**textArea.extend**

Any additional style for Text. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**textArea.disabled.opacity**

The opacity when the textArea is disabled. Expects \`number\`.

Defaults to

\`\`\`
0.3
\`\`\`

**global.focus.border.color**

The border color of the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
focus
\`\`\`

**global.focus.outline.color**

The outline color around the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.focus.outline.size**

The size of the outline around the component when in focus. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.focus.shadow.color**

The shadow color around the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
focus
\`\`\`

**global.focus.shadow.size**

The size of the shadow around the component when in focus. Expects \`string\`.

Defaults to

\`\`\`
2px
\`\`\`

**global.colors.placeholder**

The placeholder color used for the component. Expects \`string\`.

Defaults to

\`\`\`
#AAAAAA
\`\`\`

**global.input.font.height**

The line-height of the text. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.input.font.size**

The size of the text. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.input.font.weight**

The font-weight of the text. This value will only be 
      applied if global.input.weight is undefined. Expects \`number | string\`.

Defaults to

\`\`\`
600
\`\`\`

**global.input.weight**

This value has been deprecated and replaced by 
      global.input.font.weight. Expects \`number | string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.input.padding**

The padding of the text. Expects \`string | { top: string, bottom: string, left: string, right: 
        string, horizontal: string, vertical: string }\`.

Defaults to

\`\`\`
12px
\`\`\`

**global.control.disabled.opacity**

The opacity when a component is disabled. Expects \`number\`.

Defaults to

\`\`\`
0.3
\`\`\`
",
  "TextInput": "## TextInput
A control to input a single line of text, with optional suggestions.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=TextInput&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/textinput&module=%2Fsrc%2FTextInput.js)
## Usage

\`\`\`javascript
import { TextInput } from 'grommet';
<TextInput id='item' name='item' />
\`\`\`

## Properties

**a11yTitle**

Custom title to be used by screen readers.

\`\`\`
string
\`\`\`

**dropAlign**

How to align the drop. Defaults to \`{
  \\"top\\": \\"bottom\\",
  \\"left\\": \\"left\\"
}\`.

\`\`\`
{
  top: 
    top
    bottom,
  bottom: 
    top
    bottom,
  right: 
    left
    right,
  left: 
    left
    right
}
\`\`\`

**dropHeight**

The height of the drop container.

\`\`\`
xsmall
small
medium
large
xlarge
string
\`\`\`

**dropTarget**

Target where any suggestions drop will be aligned to. This should be
      a React reference. Typically, this is not required as the drop will be
      aligned to the TextInput itself by default.

\`\`\`
object
\`\`\`

**dropProps**

Any valid Drop prop.

\`\`\`
object
\`\`\`

**icon**

An optional icon to show. This could be used to provide an
      indication of what kind of input is expected, like an email icon,
      or what the input will be used for, like a search icon.

\`\`\`
element
\`\`\`

**id**

The id attribute of the input.

\`\`\`
string
\`\`\`

**focusIndicator**

Whether the plain text input should receive a focus outline.

\`\`\`
boolean
\`\`\`

**messages**

Custom messages for TextInput. Used for accessibility by screen
        readers. Defaults to \`{
  \\"enterSelect\\": \\"(Press Enter to Select)\\",
  \\"suggestionsCount\\": \\"suggestions available\\",
  \\"suggestionsExist\\": \\"This input has suggestions use arrow keys to navigate\\",
  \\"suggestionIsOpen\\": \\"Suggestions drop is open, continue to use arrow keys to navigate\\"
}\`.

\`\`\`
{
  enterSelect: string,
  suggestionsCount: string,
  suggestionsExist: string,
  suggestionIsOpen: string
}
\`\`\`

**name**

The name of the attribute when in a Form or FormField.

\`\`\`
string
\`\`\`

**onChange**

Function that will be called when the user types in the input.

\`\`\`
function
\`\`\`

**onSelect**

Function that will be called when the user selects a suggestion.
The suggestion contains the object chosen from the supplied suggestions.

\`\`\`
function
\`\`\`

**onSuggestionsOpen**

Function that will be called when the suggestions drop is opened.

\`\`\`
function
\`\`\`

**onSuggestionsClose**

Function that will be called when the suggestions drop is closed.

\`\`\`
function
\`\`\`

**placeholder**

Placeholder to use when no value is provided.

\`\`\`
node
\`\`\`

**plain**

Whether this is a plain input with no border or padding.
Only use this when the containing context provides sufficient affordance

\`\`\`
boolean
\`\`\`

**reverse**

Whether an icon should be reversed so that the icon is at the
      end of the input.

\`\`\`
boolean
\`\`\`

**size**

The size of the TextInput.

\`\`\`
small
medium
large
xlarge
string
\`\`\`

**suggestions**

Suggestions to show. It is recommended to avoid showing too many
suggestions and instead rely on the user to type more.

\`\`\`
[
  {
    label: node,
    value: any
  }
  string
]
\`\`\`

**value**

What text to put in the input.

\`\`\`
string
number
\`\`\`
  
## Intrinsic element

\`\`\`
input
\`\`\`
## Theme
  
**global.colors.border**

The color of the border. Expects \`object\`.

Defaults to

\`\`\`
[object Object]
\`\`\`

**global.control.border.color**

The border color. Expects \`string\`.

Defaults to

\`\`\`
border
\`\`\`

**global.control.border.radius**

The border radius. Expects \`string\`.

Defaults to

\`\`\`
4px
\`\`\`

**global.control.border.width**

The border width. Expects \`string\`.

Defaults to

\`\`\`
1px
\`\`\`

**select.step**

How many suggestions to render at a time. Expects \`number\`.

Defaults to

\`\`\`
20
\`\`\`

**text**

The possible sizes of the text in terms of its font-size and
    line-height. Expects \`object\`.

Defaults to

\`\`\`
{
      xsmall: {
        size: '12px',
        height: '18px',
       },
      small: {
        size: '14px',
        height: '20px',
       },
      medium: {
        size: '18px',
        height: '24px',
      },
      large: {
        size: '22px',
        height: '28px',
      },
      xlarge: {
        size: '26px',
        height: '32px',
      },
      xxlarge: {
        size: '34px',
        height: '40px',
      },
    }
\`\`\`

**textInput.extend**

Any additional style for TextInput. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**textInput.container.extend**

Any additional style for TextInput container. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**textInput.placeholder.extend**

Any additional style for non-string placeholder inside TextInput. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**textInput.suggestions.extend**

Any additional style for TextInput suggestions. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`

**textInput.disabled.opacity**

The opacity when the textInput is disabled. Expects \`number | string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.focus.border.color**

The border color of the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
focus
\`\`\`

**global.focus.outline.color**

The outline color around the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.focus.outline.size**

The size of the outline around the component when in focus. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.focus.shadow.color**

The shadow color around the component when in focus. Expects \`string | { dark: string, light: string }\`.

Defaults to

\`\`\`
focus
\`\`\`

**global.focus.shadow.size**

The size of the shadow around the component when in focus. Expects \`string\`.

Defaults to

\`\`\`
2px
\`\`\`

**global.colors.placeholder**

The placeholder color used for the component. Expects \`string\`.

Defaults to

\`\`\`
#AAAAAA
\`\`\`

**global.control.disabled.opacity**

The opacity when a component is disabled. Expects \`number\`.

Defaults to

\`\`\`
0.3
\`\`\`

**global.input.font.height**

The line-height of the text. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.input.font.size**

The size of the text. Expects \`string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.input.font.weight**

The font-weight of the text. This value will only be 
      applied if global.input.weight is undefined. Expects \`number | string\`.

Defaults to

\`\`\`
600
\`\`\`

**global.input.weight**

This value has been deprecated and replaced by 
      global.input.font.weight. Expects \`number | string\`.

Defaults to

\`\`\`
undefined
\`\`\`

**global.input.padding**

The padding of the text. Expects \`string | { top: string, bottom: string, left: string, right: 
        string, horizontal: string, vertical: string }\`.

Defaults to

\`\`\`
12px
\`\`\`
",
  "Video": "## Video
A video player.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=Video&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/video&module=%2Fsrc%2FVideo.js)
## Usage

\`\`\`javascript
import { Video } from 'grommet';
<Video />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**autoPlay**

Enables automatic playback of the video as soon as it is loaded.

\`\`\`
boolean
\`\`\`

**controls**

Whether to show playback controls and where to place them. Defaults to \`over\`.

\`\`\`
false
over
below
\`\`\`

**fit**

How the image fills its container.

\`\`\`
cover
contain
\`\`\`

**loop**

Enables continuous video looping.

\`\`\`
boolean
\`\`\`

**mute**

Enables video muting. This option is best used with the autoPlay flag.

\`\`\`
boolean
\`\`\`

**messages**

Custom messages. Used for accessibility by screen readers. Defaults to \`{
  \\"closeMenu\\": \\"close menu\\",
  \\"fullScreen\\": \\"full screen\\",
  \\"progressMeter\\": \\"video progress\\",
  \\"scrubber\\": \\"scrubber\\",
  \\"openMenu\\": \\"open menu\\",
  \\"pauseButton\\": \\"pause\\",
  \\"playButton\\": \\"play\\",
  \\"volumeDown\\": \\"volume down\\",
  \\"volumeUp\\": \\"volume up\\"
}\`.

\`\`\`
{
  closeMenu: string,
  fullScreen: string,
  progressMeter: string,
  openMenu: string,
  pauseButton: string,
  playButton: string,
  scrubber: string,
  volumeDown: string,
  volumeUp: string
}
\`\`\`
  
## Intrinsic element

\`\`\`
video
\`\`\`
## Theme
  
**global.edgeSize.responsiveBreakpoint**

The actual breakpoint to trigger changes in the video component layout. Expects \`string\`.

Defaults to

\`\`\`
small
\`\`\`

**global.edgeSize.xsmall**

The width of the video scrubber. Expects \`object\`.

Defaults to

\`\`\`
6px
\`\`\`

**video.captions.background**

The caption background color of the video  Expects \`string\`.

Defaults to

\`\`\`
rgba(0, 0, 0, 0.7)
\`\`\`

**video.icons.closedCaption**

The icon to use for the caption. Expects \`React.Element\`.

Defaults to

\`\`\`
<ClosedCaption />
\`\`\`

**video.icons.configure**

The icon to use for the configuration action. Expects \`React.Element\`.

Defaults to

\`\`\`
<Actions />
\`\`\`

**video.icons.fullScreen**

The icon to use for viewing the video in full screen. Expects \`React.Element\`.

Defaults to

\`\`\`
<Expand />
\`\`\`

**video.icons.pause**

The icon to use for pausing the video. Expects \`React.Element\`.

Defaults to

\`\`\`
<Pause />
\`\`\`

**video.icons.play**

The icon to use for playing the video. Expects \`React.Element\`.

Defaults to

\`\`\`
<Play />
\`\`\`

**video.icons.reduceVolume**

The icon to use for the action of lowering the volume. Expects \`React.Element\`.

Defaults to

\`\`\`
<VolumeLow />
\`\`\`

**video.icons.volume**

The icon to use for the action of raising the volume. Expects \`React.Element\`.

Defaults to

\`\`\`
<Volume />
\`\`\`

**video.scrubber.color**

The background color of the video scrubber. Expects \`string\`.

Defaults to

\`\`\`
light-4
\`\`\`

**video.extend**

Any additional style for Video. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`
",
  "WorldMap": "## WorldMap
A map of the world, or a continent.

[![](https://cdn-images-1.medium.com/fit/c/120/120/1*TD1P0HtIH9zF0UEH28zYtw.png)](https://storybook.grommet.io/?selectedKind=WorldMap&full=0&addons=0&stories=1&panelRight=0) [![](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/grommet/grommet-sandbox?initialpath=/worldmap&module=%2Fsrc%2FWorldMap.js)
## Usage

\`\`\`javascript
import { WorldMap } from 'grommet';
<WorldMap />
\`\`\`

## Properties

**a11yTitle**

Custom label to be used by screen readers. When provided, an aria-label will
   be added to the element.

\`\`\`
string
\`\`\`

**alignSelf**

How to align along the cross axis when contained in
      a Box or along the column axis when contained in a Grid.

\`\`\`
start
center
end
stretch
\`\`\`

**gridArea**

The name of the area to place
    this inside a parent Grid.

\`\`\`
string
\`\`\`

**margin**

The amount of margin around the component. An object can
    be specified to distinguish horizontal margin, vertical margin, and
    margin on a particular side.

\`\`\`
none
xxsmall
xsmall
small
medium
large
xlarge
{
  bottom: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  end: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  horizontal: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  left: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  right: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  start: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  top: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string,
  vertical: 
    xxsmall
    xsmall
    small
    medium
    large
    xlarge
    string
}
string
\`\`\`

**color**

Color when hovering over places while selecting.

\`\`\`
string
{
  dark: string,
  light: string
}
\`\`\`

**continents**

Continent details.

\`\`\`
[{
  color: 
    string
    {
      dark: string,
      light: string
    },
  name: 
    Africa
    Asia
    Australia
    Europe
    North America
    South America,
  onClick: function,
  onHover: function
}]
\`\`\`

**fill**

Whether the width and/or height should fill the container.

\`\`\`
horizontal
vertical
boolean
\`\`\`

**onSelectPlace**

Called when the user clicks on a place.
        It is passed the location.

\`\`\`
function
\`\`\`

**places**

Place details.

\`\`\`
[{
  color: 
    string
    {
      dark: string,
      light: string
    },
  name: string,
  location: [number],
  onClick: function,
  onHover: function
}]
\`\`\`

**hoverColor**

Color when hovering over places while selecting.

\`\`\`
string
{
  dark: string,
  light: string
}
\`\`\`
  
## Intrinsic element

\`\`\`
svg
\`\`\`
## Theme
  
**worldMap.color**

The color for each individual dot when a color is not passed as a prop Expects \`string\`.

Defaults to

\`\`\`
light-3
\`\`\`

**worldMap.continent.active**

The size of the visual dots belonging to a continent when the
continent is being hovered. Expects \`string\`.

Defaults to

\`\`\`
8px
\`\`\`

**worldMap.continent.base**

The size of the visual dots belonging to a continent that is
not being hovered. Expects \`string\`.

Defaults to

\`\`\`
6px
\`\`\`

**worldMap.hover.color**

The color for an individual dot when it is being hovered Expects \`string\`.

Defaults to

\`\`\`
light-4
\`\`\`

**worldMap.place.active**

The size of a visual dot for an individual place in the map 
when it is being hovered. Expects \`string\`.

Defaults to

\`\`\`
20px
\`\`\`

**worldMap.place.base**

The size of the visual dot representing an individual place 
in the map when it is not being hovered. Expects \`string\`.

Defaults to

\`\`\`
8px
\`\`\`

**worldMap.extend**

Any additional style for the WorldMap. Expects \`string | (props) => {}\`.

Defaults to

\`\`\`
undefined
\`\`\`
",
}
`;
